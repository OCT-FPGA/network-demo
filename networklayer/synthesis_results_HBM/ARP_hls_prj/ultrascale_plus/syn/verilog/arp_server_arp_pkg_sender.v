// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module arp_server_arp_pkg_sender (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        arpRequestFifo_dout,
        arpRequestFifo_num_data_valid,
        arpRequestFifo_fifo_cap,
        arpRequestFifo_empty_n,
        arpRequestFifo_read,
        arpReplyFifo_dout,
        arpReplyFifo_num_data_valid,
        arpReplyFifo_fifo_cap,
        arpReplyFifo_empty_n,
        arpReplyFifo_read,
        networkMask_dout,
        networkMask_num_data_valid,
        networkMask_fifo_cap,
        networkMask_empty_n,
        networkMask_read,
        gatewayIP_dout,
        gatewayIP_num_data_valid,
        gatewayIP_fifo_cap,
        gatewayIP_empty_n,
        gatewayIP_read,
        myIpAddress_dout,
        myIpAddress_num_data_valid,
        myIpAddress_fifo_cap,
        myIpAddress_empty_n,
        myIpAddress_read,
        myMacAddress_dout,
        myMacAddress_num_data_valid,
        myMacAddress_fifo_cap,
        myMacAddress_empty_n,
        myMacAddress_read,
        arpDataOut_TREADY,
        arpDataOut_TDATA,
        arpDataOut_TVALID,
        arpDataOut_TKEEP,
        arpDataOut_TSTRB,
        arpDataOut_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] arpRequestFifo_dout;
input  [2:0] arpRequestFifo_num_data_valid;
input  [2:0] arpRequestFifo_fifo_cap;
input   arpRequestFifo_empty_n;
output   arpRequestFifo_read;
input  [255:0] arpReplyFifo_dout;
input  [2:0] arpReplyFifo_num_data_valid;
input  [2:0] arpReplyFifo_fifo_cap;
input   arpReplyFifo_empty_n;
output   arpReplyFifo_read;
input  [31:0] networkMask_dout;
input  [2:0] networkMask_num_data_valid;
input  [2:0] networkMask_fifo_cap;
input   networkMask_empty_n;
output   networkMask_read;
input  [31:0] gatewayIP_dout;
input  [2:0] gatewayIP_num_data_valid;
input  [2:0] gatewayIP_fifo_cap;
input   gatewayIP_empty_n;
output   gatewayIP_read;
input  [31:0] myIpAddress_dout;
input  [1:0] myIpAddress_num_data_valid;
input  [1:0] myIpAddress_fifo_cap;
input   myIpAddress_empty_n;
output   myIpAddress_read;
input  [47:0] myMacAddress_dout;
input  [2:0] myMacAddress_num_data_valid;
input  [2:0] myMacAddress_fifo_cap;
input   myMacAddress_empty_n;
output   myMacAddress_read;
input   arpDataOut_TREADY;
output  [511:0] arpDataOut_TDATA;
output   arpDataOut_TVALID;
output  [63:0] arpDataOut_TKEEP;
output  [63:0] arpDataOut_TSTRB;
output  [0:0] arpDataOut_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arpRequestFifo_read;
reg arpReplyFifo_read;
reg networkMask_read;
reg gatewayIP_read;
reg myIpAddress_read;
reg myMacAddress_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_i_nbreadreq_fu_150_p3;
wire   [0:0] tmp_8_i_nbreadreq_fu_158_p3;
reg    ap_predicate_op12_read_state1;
reg    ap_predicate_op17_read_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] aps_fsmState_load_reg_499;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [1:0] aps_fsmState_load_reg_499_pp0_iter1_reg;
wire    regslice_both_arpDataOut_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
reg   [1:0] aps_fsmState;
reg   [47:0] replyMeta_srcMac;
reg   [15:0] replyMeta_ethType;
reg   [15:0] replyMeta_hwType;
reg   [15:0] replyMeta_protoType;
reg   [7:0] replyMeta_hwLen;
reg   [7:0] replyMeta_protoLen;
reg   [47:0] replyMeta_hwAddrSrc;
reg   [31:0] replyMeta_protoAddrSrc;
reg   [31:0] inputIP;
reg    arpDataOut_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    myMacAddress_blk_n;
reg    myIpAddress_blk_n;
reg    gatewayIP_blk_n;
reg    networkMask_blk_n;
reg    arpReplyFifo_blk_n;
reg    arpRequestFifo_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [511:0] zext_ln117_1_fu_427_p1;
wire   [511:0] zext_ln117_fu_494_p1;
wire   [47:0] trunc_ln122_fu_249_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] xor_ln136_fu_381_p2;
wire   [31:0] and_ln136_fu_387_p2;
wire   [0:0] icmp_ln136_fu_393_p2;
wire   [31:0] auxQueryIP_2_fu_399_p3;
wire   [430:0] sendWord_data_1_fu_407_p9;
wire   [430:0] sendWord_data_fu_464_p14;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg   [511:0] arpDataOut_TDATA_int_regslice;
reg    arpDataOut_TVALID_int_regslice;
wire    arpDataOut_TREADY_int_regslice;
wire    regslice_both_arpDataOut_V_data_V_U_vld_out;
wire    regslice_both_arpDataOut_V_keep_V_U_apdone_blk;
wire    regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_arpDataOut_V_keep_V_U_vld_out;
wire    regslice_both_arpDataOut_V_strb_V_U_apdone_blk;
wire    regslice_both_arpDataOut_V_strb_V_U_ack_in_dummy;
wire    regslice_both_arpDataOut_V_strb_V_U_vld_out;
wire    regslice_both_arpDataOut_V_last_V_U_apdone_blk;
wire    regslice_both_arpDataOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_arpDataOut_V_last_V_U_vld_out;
reg    ap_condition_258;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 aps_fsmState = 2'd0;
#0 replyMeta_srcMac = 48'd0;
#0 replyMeta_ethType = 16'd0;
#0 replyMeta_hwType = 16'd0;
#0 replyMeta_protoType = 16'd0;
#0 replyMeta_hwLen = 8'd0;
#0 replyMeta_protoLen = 8'd0;
#0 replyMeta_hwAddrSrc = 48'd0;
#0 replyMeta_protoAddrSrc = 32'd0;
#0 inputIP = 32'd0;
end

arp_server_regslice_both #(
    .DataWidth( 512 ))
regslice_both_arpDataOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(arpDataOut_TDATA_int_regslice),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(arpDataOut_TREADY_int_regslice),
    .data_out(arpDataOut_TDATA),
    .vld_out(regslice_both_arpDataOut_V_data_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_data_V_U_apdone_blk)
);

arp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arpDataOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(64'd1152921504606846975),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy),
    .data_out(arpDataOut_TKEEP),
    .vld_out(regslice_both_arpDataOut_V_keep_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_keep_V_U_apdone_blk)
);

arp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arpDataOut_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(64'd0),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(regslice_both_arpDataOut_V_strb_V_U_ack_in_dummy),
    .data_out(arpDataOut_TSTRB),
    .vld_out(regslice_both_arpDataOut_V_strb_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_strb_V_U_apdone_blk)
);

arp_server_regslice_both #(
    .DataWidth( 1 ))
regslice_both_arpDataOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd1),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(regslice_both_arpDataOut_V_last_V_U_ack_in_dummy),
    .data_out(arpDataOut_TLAST),
    .vld_out(regslice_both_arpDataOut_V_last_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(aps_fsmState == 2'd2) & ~(aps_fsmState == 2'd1) & (tmp_i_nbreadreq_fu_150_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aps_fsmState <= 2'd1;
    end else if ((~(aps_fsmState == 2'd2) & ~(aps_fsmState == 2'd1) & (tmp_8_i_nbreadreq_fu_158_p3 == 1'd1) & (tmp_i_nbreadreq_fu_150_p3 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aps_fsmState <= 2'd2;
    end else if ((((aps_fsmState == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((aps_fsmState == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        aps_fsmState <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aps_fsmState_load_reg_499 <= aps_fsmState;
        aps_fsmState_load_reg_499_pp0_iter1_reg <= aps_fsmState_load_reg_499;
    end
end

always @ (posedge ap_clk) begin
    if ((~(aps_fsmState == 2'd2) & ~(aps_fsmState == 2'd1) & (tmp_8_i_nbreadreq_fu_158_p3 == 1'd1) & (tmp_i_nbreadreq_fu_150_p3 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inputIP <= arpRequestFifo_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(aps_fsmState == 2'd2) & ~(aps_fsmState == 2'd1) & (tmp_i_nbreadreq_fu_150_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        replyMeta_ethType <= {{arpReplyFifo_dout[79:64]}};
        replyMeta_hwAddrSrc <= {{arpReplyFifo_dout[175:128]}};
        replyMeta_hwLen <= {{arpReplyFifo_dout[119:112]}};
        replyMeta_hwType <= {{arpReplyFifo_dout[95:80]}};
        replyMeta_protoAddrSrc <= {{arpReplyFifo_dout[223:192]}};
        replyMeta_protoLen <= {{arpReplyFifo_dout[127:120]}};
        replyMeta_protoType <= {{arpReplyFifo_dout[111:96]}};
        replyMeta_srcMac <= trunc_ln122_fu_249_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (aps_fsmState_load_reg_499 == 2'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (aps_fsmState_load_reg_499 == 2'd2)))) begin
        arpDataOut_TDATA_blk_n = arpDataOut_TREADY_int_regslice;
    end else begin
        arpDataOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_258)) begin
        if ((aps_fsmState_load_reg_499 == 2'd1)) begin
            arpDataOut_TDATA_int_regslice = zext_ln117_fu_494_p1;
        end else if ((aps_fsmState_load_reg_499 == 2'd2)) begin
            arpDataOut_TDATA_int_regslice = zext_ln117_1_fu_427_p1;
        end else begin
            arpDataOut_TDATA_int_regslice = 'bx;
        end
    end else begin
        arpDataOut_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (aps_fsmState_load_reg_499 == 2'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (aps_fsmState_load_reg_499 == 2'd2)))) begin
        arpDataOut_TVALID_int_regslice = 1'b1;
    end else begin
        arpDataOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpReplyFifo_blk_n = arpReplyFifo_empty_n;
    end else begin
        arpReplyFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op17_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpReplyFifo_read = 1'b1;
    end else begin
        arpReplyFifo_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpRequestFifo_blk_n = arpRequestFifo_empty_n;
    end else begin
        arpRequestFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op12_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpRequestFifo_read = 1'b1;
    end else begin
        arpRequestFifo_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gatewayIP_blk_n = gatewayIP_empty_n;
    end else begin
        gatewayIP_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gatewayIP_read = 1'b1;
    end else begin
        gatewayIP_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        myIpAddress_blk_n = myIpAddress_empty_n;
    end else begin
        myIpAddress_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        myIpAddress_read = 1'b1;
    end else begin
        myIpAddress_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        myMacAddress_blk_n = myMacAddress_empty_n;
    end else begin
        myMacAddress_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        myMacAddress_read = 1'b1;
    end else begin
        myMacAddress_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        networkMask_blk_n = networkMask_empty_n;
    end else begin
        networkMask_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        networkMask_read = 1'b1;
    end else begin
        networkMask_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln136_fu_387_p2 = (xor_ln136_fu_381_p2 & networkMask_dout);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op17_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd2)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op17_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd2)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | (myMacAddress_empty_n == 1'b0) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd2)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op17_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd2)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | (myMacAddress_empty_n == 1'b0) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd2)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((ap_predicate_op17_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op12_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = (((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd2)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((myIpAddress_empty_n == 1'b0) | (gatewayIP_empty_n == 1'b0) | (networkMask_empty_n == 1'b0) | (myMacAddress_empty_n == 1'b0) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499 == 2'd2)));
end

always @ (*) begin
    ap_block_state3_io = (((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd2)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd1)) | ((arpDataOut_TREADY_int_regslice == 1'b0) & (aps_fsmState_load_reg_499_pp0_iter1_reg == 2'd2)));
end

always @ (*) begin
    ap_condition_258 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op12_read_state1 = (~(aps_fsmState == 2'd2) & ~(aps_fsmState == 2'd1) & (tmp_8_i_nbreadreq_fu_158_p3 == 1'd1) & (tmp_i_nbreadreq_fu_150_p3 == 1'd0));
end

always @ (*) begin
    ap_predicate_op17_read_state1 = (~(aps_fsmState == 2'd2) & ~(aps_fsmState == 2'd1) & (tmp_i_nbreadreq_fu_150_p3 == 1'd1));
end

assign arpDataOut_TVALID = regslice_both_arpDataOut_V_data_V_U_vld_out;

assign auxQueryIP_2_fu_399_p3 = ((icmp_ln136_fu_393_p2[0:0] == 1'b1) ? inputIP : gatewayIP_dout);

assign icmp_ln136_fu_393_p2 = ((and_ln136_fu_387_p2 == 32'd0) ? 1'b1 : 1'b0);

assign sendWord_data_1_fu_407_p9 = {{{{{{{{{{{{{{95'd21438213421863513942334111744}, {auxQueryIP_2_fu_399_p3}}}, {48'd0}}}, {myIpAddress_dout}}}, {myMacAddress_dout}}}, {80'd4722656402130033706504}}}, {myMacAddress_dout}}}, {48'd281474976710655}};

assign sendWord_data_fu_464_p14 = {{{{{{{{{{{{{{{{{{{{{{{{95'd21438213421863513942334111744}, {replyMeta_protoAddrSrc}}}, {replyMeta_hwAddrSrc}}}, {myIpAddress_dout}}}, {myMacAddress_dout}}}, {16'd512}}}, {replyMeta_protoLen}}}, {replyMeta_hwLen}}}, {replyMeta_protoType}}}, {replyMeta_hwType}}}, {replyMeta_ethType}}}, {myMacAddress_dout}}}, {replyMeta_srcMac}};

assign tmp_8_i_nbreadreq_fu_158_p3 = arpRequestFifo_empty_n;

assign tmp_i_nbreadreq_fu_150_p3 = arpReplyFifo_empty_n;

assign trunc_ln122_fu_249_p1 = arpReplyFifo_dout[47:0];

assign xor_ln136_fu_381_p2 = (myIpAddress_dout ^ inputIP);

assign zext_ln117_1_fu_427_p1 = sendWord_data_1_fu_407_p9;

assign zext_ln117_fu_494_p1 = sendWord_data_fu_464_p14;

endmodule //arp_server_arp_pkg_sender
