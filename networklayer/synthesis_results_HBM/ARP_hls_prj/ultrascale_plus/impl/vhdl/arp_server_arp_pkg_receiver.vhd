-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_server_arp_pkg_receiver is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    myIpAddress_c11_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_c11_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    myIpAddress_c11_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    myIpAddress_c11_full_n : IN STD_LOGIC;
    myIpAddress_c11_write : OUT STD_LOGIC;
    myIpAddress_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    myIpAddress_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    myIpAddress_c_full_n : IN STD_LOGIC;
    myIpAddress_c_write : OUT STD_LOGIC;
    arpDataIn_TVALID : IN STD_LOGIC;
    arpTableInsertFifo_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    arpTableInsertFifo_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    arpTableInsertFifo_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    arpTableInsertFifo_full_n : IN STD_LOGIC;
    arpTableInsertFifo_write : OUT STD_LOGIC;
    arpReplyFifo_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    arpReplyFifo_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    arpReplyFifo_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    arpReplyFifo_full_n : IN STD_LOGIC;
    arpReplyFifo_write : OUT STD_LOGIC;
    arpDataIn_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    arpDataIn_TREADY : OUT STD_LOGIC;
    arpDataIn_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    arpDataIn_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    arpDataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of arp_server_arp_pkg_receiver is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_i_nbreadreq_fu_136_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_i_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op50_write_state2 : BOOLEAN;
    signal ap_predicate_op54_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal wordCount : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal arpDataIn_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal myIpAddress_c_blk_n : STD_LOGIC;
    signal myIpAddress_c11_blk_n : STD_LOGIC;
    signal arpReplyFifo_blk_n : STD_LOGIC;
    signal arpTableInsertFifo_blk_n : STD_LOGIC;
    signal reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln62_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln74_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal meta_srcMac_reg_360 : STD_LOGIC_VECTOR (47 downto 0);
    signal meta_hwAddrSrc_reg_365 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_11_i_reg_378 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_13_i_reg_383 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln80_fu_304_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal opCode_fu_218_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal protoAddrDst_fu_238_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln74_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_1_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_fu_298_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln77_cast_fu_318_p5 : STD_LOGIC_VECTOR (96 downto 0);
    signal tmp_14_i_fu_334_p7 : STD_LOGIC_VECTOR (223 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_arpDataIn_V_data_V_U_apdone_blk : STD_LOGIC;
    signal arpDataIn_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal arpDataIn_TVALID_int_regslice : STD_LOGIC;
    signal arpDataIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_arpDataIn_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_arpDataIn_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal arpDataIn_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_arpDataIn_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataIn_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_arpDataIn_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal arpDataIn_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_arpDataIn_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataIn_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_arpDataIn_V_last_V_U_apdone_blk : STD_LOGIC;
    signal arpDataIn_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_arpDataIn_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataIn_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component arp_server_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_arpDataIn_V_data_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => arpDataIn_TDATA,
        vld_in => arpDataIn_TVALID,
        ack_in => regslice_both_arpDataIn_V_data_V_U_ack_in,
        data_out => arpDataIn_TDATA_int_regslice,
        vld_out => arpDataIn_TVALID_int_regslice,
        ack_out => arpDataIn_TREADY_int_regslice,
        apdone_blk => regslice_both_arpDataIn_V_data_V_U_apdone_blk);

    regslice_both_arpDataIn_V_keep_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => arpDataIn_TKEEP,
        vld_in => arpDataIn_TVALID,
        ack_in => regslice_both_arpDataIn_V_keep_V_U_ack_in,
        data_out => arpDataIn_TKEEP_int_regslice,
        vld_out => regslice_both_arpDataIn_V_keep_V_U_vld_out,
        ack_out => arpDataIn_TREADY_int_regslice,
        apdone_blk => regslice_both_arpDataIn_V_keep_V_U_apdone_blk);

    regslice_both_arpDataIn_V_strb_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => arpDataIn_TSTRB,
        vld_in => arpDataIn_TVALID,
        ack_in => regslice_both_arpDataIn_V_strb_V_U_ack_in,
        data_out => arpDataIn_TSTRB_int_regslice,
        vld_out => regslice_both_arpDataIn_V_strb_V_U_vld_out,
        ack_out => arpDataIn_TREADY_int_regslice,
        apdone_blk => regslice_both_arpDataIn_V_strb_V_U_apdone_blk);

    regslice_both_arpDataIn_V_last_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => arpDataIn_TLAST,
        vld_in => arpDataIn_TVALID,
        ack_in => regslice_both_arpDataIn_V_last_V_U_ack_in,
        data_out => arpDataIn_TLAST_int_regslice,
        vld_out => regslice_both_arpDataIn_V_last_V_U_vld_out,
        ack_out => arpDataIn_TREADY_int_regslice,
        apdone_blk => regslice_both_arpDataIn_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln62_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln74_reg_370 <= and_ln74_fu_260_p2;
                meta_hwAddrSrc_reg_365 <= arpDataIn_TDATA_int_regslice(223 downto 176);
                meta_srcMac_reg_360 <= arpDataIn_TDATA_int_regslice(95 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln74_fu_260_p2) and (tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln62_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln76_reg_374 <= and_ln76_fu_272_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln62_reg_356 <= icmp_ln62_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = and_ln74_fu_260_p2) and (tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln62_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_lv1_0 = and_ln74_fu_260_p2) and (ap_const_lv1_1 = and_ln76_fu_272_p2) and (tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln62_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_185 <= arpDataIn_TDATA_int_regslice(255 downto 224);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln74_fu_260_p2) and (tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln62_fu_202_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_11_i_reg_378 <= arpDataIn_TDATA_int_regslice(223 downto 176);
                tmp_13_i_reg_383 <= arpDataIn_TDATA_int_regslice(159 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_reg_352 <= tmp_i_nbreadreq_fu_136_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                wordCount <= select_ln80_fu_304_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln83_fu_298_p2 <= std_logic_vector(unsigned(wordCount) + unsigned(ap_const_lv4_1));
    and_ln74_fu_260_p2 <= (icmp_ln74_fu_248_p2 and icmp_ln74_1_fu_254_p2);
    and_ln76_fu_272_p2 <= (icmp_ln76_fu_266_p2 and icmp_ln74_1_fu_254_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, myIpAddress_c11_full_n, myIpAddress_c_full_n, tmp_i_nbreadreq_fu_136_p6, ap_done_reg, arpTableInsertFifo_full_n, ap_predicate_op50_write_state2, arpReplyFifo_full_n, ap_predicate_op54_write_state2, arpDataIn_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op54_write_state2 = ap_const_boolean_1) and (arpReplyFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op50_write_state2 = ap_const_boolean_1) and (arpTableInsertFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_c_full_n = ap_const_logic_0) or (myIpAddress_c11_full_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (arpDataIn_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, myIpAddress_c11_full_n, myIpAddress_c_full_n, tmp_i_nbreadreq_fu_136_p6, ap_done_reg, arpTableInsertFifo_full_n, ap_predicate_op50_write_state2, arpReplyFifo_full_n, ap_predicate_op54_write_state2, arpDataIn_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op54_write_state2 = ap_const_boolean_1) and (arpReplyFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op50_write_state2 = ap_const_boolean_1) and (arpTableInsertFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_c_full_n = ap_const_logic_0) or (myIpAddress_c11_full_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (arpDataIn_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, myIpAddress_c11_full_n, myIpAddress_c_full_n, tmp_i_nbreadreq_fu_136_p6, ap_done_reg, arpTableInsertFifo_full_n, ap_predicate_op50_write_state2, arpReplyFifo_full_n, ap_predicate_op54_write_state2, arpDataIn_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op54_write_state2 = ap_const_boolean_1) and (arpReplyFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op50_write_state2 = ap_const_boolean_1) and (arpTableInsertFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_c_full_n = ap_const_logic_0) or (myIpAddress_c11_full_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (arpDataIn_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(myIpAddress_c11_full_n, myIpAddress_c_full_n, tmp_i_nbreadreq_fu_136_p6, ap_done_reg, arpDataIn_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (myIpAddress_c_full_n = ap_const_logic_0) or (myIpAddress_c11_full_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (arpDataIn_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(arpTableInsertFifo_full_n, ap_predicate_op50_write_state2, arpReplyFifo_full_n, ap_predicate_op54_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op54_write_state2 = ap_const_boolean_1) and (arpReplyFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op50_write_state2 = ap_const_boolean_1) and (arpTableInsertFifo_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op50_write_state2_assign_proc : process(tmp_i_reg_352, icmp_ln62_reg_356, and_ln74_reg_370, and_ln76_reg_374)
    begin
                ap_predicate_op50_write_state2 <= ((ap_const_lv1_0 = and_ln74_reg_370) and (icmp_ln62_reg_356 = ap_const_lv1_1) and (tmp_i_reg_352 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln76_reg_374));
    end process;


    ap_predicate_op54_write_state2_assign_proc : process(tmp_i_reg_352, icmp_ln62_reg_356, and_ln74_reg_370)
    begin
                ap_predicate_op54_write_state2 <= ((icmp_ln62_reg_356 = ap_const_lv1_1) and (tmp_i_reg_352 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln74_reg_370));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    arpDataIn_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_136_p6, ap_done_reg, ap_block_pp0_stage0, arpDataIn_TVALID_int_regslice)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpDataIn_TDATA_blk_n <= arpDataIn_TVALID_int_regslice;
        else 
            arpDataIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arpDataIn_TREADY <= regslice_both_arpDataIn_V_data_V_U_ack_in;

    arpDataIn_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_136_p6, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_nbreadreq_fu_136_p6 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpDataIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            arpDataIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    arpReplyFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, arpReplyFifo_full_n, ap_predicate_op54_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op54_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpReplyFifo_blk_n <= arpReplyFifo_full_n;
        else 
            arpReplyFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arpReplyFifo_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_i_fu_334_p7),256));

    arpReplyFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op54_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op54_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpReplyFifo_write <= ap_const_logic_1;
        else 
            arpReplyFifo_write <= ap_const_logic_0;
        end if; 
    end process;


    arpTableInsertFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, arpTableInsertFifo_full_n, ap_predicate_op50_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op50_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpTableInsertFifo_blk_n <= arpTableInsertFifo_full_n;
        else 
            arpTableInsertFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arpTableInsertFifo_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln77_cast_fu_318_p5),128));

    arpTableInsertFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op50_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op50_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTableInsertFifo_write <= ap_const_logic_1;
        else 
            arpTableInsertFifo_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln62_fu_202_p2 <= "1" when (wordCount = ap_const_lv4_0) else "0";
    icmp_ln74_1_fu_254_p2 <= "1" when (protoAddrDst_fu_238_p4 = myIpAddress) else "0";
    icmp_ln74_fu_248_p2 <= "1" when (opCode_fu_218_p4 = ap_const_lv16_100) else "0";
    icmp_ln76_fu_266_p2 <= "1" when (opCode_fu_218_p4 = ap_const_lv16_200) else "0";

    myIpAddress_c11_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, myIpAddress_c11_full_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myIpAddress_c11_blk_n <= myIpAddress_c11_full_n;
        else 
            myIpAddress_c11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    myIpAddress_c11_din <= myIpAddress;

    myIpAddress_c11_write_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myIpAddress_c11_write <= ap_const_logic_1;
        else 
            myIpAddress_c11_write <= ap_const_logic_0;
        end if; 
    end process;


    myIpAddress_c_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, myIpAddress_c_full_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myIpAddress_c_blk_n <= myIpAddress_c_full_n;
        else 
            myIpAddress_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    myIpAddress_c_din <= myIpAddress;

    myIpAddress_c_write_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myIpAddress_c_write <= ap_const_logic_1;
        else 
            myIpAddress_c_write <= ap_const_logic_0;
        end if; 
    end process;

    opCode_fu_218_p4 <= arpDataIn_TDATA_int_regslice(175 downto 160);
    protoAddrDst_fu_238_p4 <= arpDataIn_TDATA_int_regslice(335 downto 304);
    select_ln80_fu_304_p3 <= 
        ap_const_lv4_0 when (arpDataIn_TLAST_int_regslice(0) = '1') else 
        add_ln83_fu_298_p2;
    tmp_14_i_fu_334_p7 <= (((((reg_185 & ap_const_lv16_0) & tmp_11_i_reg_378) & tmp_13_i_reg_383) & ap_const_lv16_0) & meta_srcMac_reg_360);
    tmp_i_nbreadreq_fu_136_p6 <= (0=>(arpDataIn_TVALID_int_regslice), others=>'-');
    zext_ln77_cast_fu_318_p5 <= (((ap_const_lv1_1 & reg_185) & ap_const_lv16_0) & meta_hwAddrSrc_reg_365);
end behav;
