// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="icmp_server_icmp_server,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.100000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.677688,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1498,HLS_SYN_LUT=605,HLS_VERSION=2023_1}" *)

module icmp_server (
        ap_clk,
        ap_rst_n,
        s_axis_icmp_TDATA,
        s_axis_icmp_TVALID,
        s_axis_icmp_TREADY,
        s_axis_icmp_TKEEP,
        s_axis_icmp_TSTRB,
        s_axis_icmp_TLAST,
        myIpAddress_0,
        m_axis_icmp_TDATA,
        m_axis_icmp_TVALID,
        m_axis_icmp_TREADY,
        m_axis_icmp_TKEEP,
        m_axis_icmp_TSTRB,
        m_axis_icmp_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [511:0] s_axis_icmp_TDATA;
input   s_axis_icmp_TVALID;
output   s_axis_icmp_TREADY;
input  [63:0] s_axis_icmp_TKEEP;
input  [63:0] s_axis_icmp_TSTRB;
input  [0:0] s_axis_icmp_TLAST;
input  [31:0] myIpAddress_0;
output  [511:0] m_axis_icmp_TDATA;
output   m_axis_icmp_TVALID;
input   m_axis_icmp_TREADY;
output  [63:0] m_axis_icmp_TKEEP;
output  [63:0] m_axis_icmp_TSTRB;
output  [0:0] m_axis_icmp_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] myIpAddress_0_0_data_reg;
reg    myIpAddress_0_0_vld_reg;
reg    myIpAddress_0_0_ack_out;
reg   [2:0] aiFSMState;
reg   [31:0] ipDestination;
reg   [7:0] icmpType;
reg   [7:0] icmpCode;
reg   [15:0] auxInchecksum_r;
reg   [0:0] prevWord_last;
reg   [16:0] icmpChecksum;
reg   [511:0] prevWord_data;
reg   [63:0] prevWord_keep;
reg   [63:0] prevWord_strb;
reg    s_axis_icmp_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
wire   [0:0] grp_nbreadreq_fu_220_p6;
reg    m_axis_icmp_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [2:0] aiFSMState_load_reg_1149;
reg    ap_enable_reg_pp0_iter2;
reg   [2:0] aiFSMState_load_reg_1149_pp0_iter1_reg;
reg   [0:0] tmp_7_reg_1179;
reg   [0:0] tmp_7_reg_1179_pp0_iter1_reg;
reg    ap_predicate_op12_read_state1;
reg    ap_predicate_op26_read_state1;
reg    ap_predicate_op38_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_predicate_op160_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_predicate_op183_write_state3;
wire    regslice_both_m_axis_icmp_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] ipDestination_load_reg_1153;
reg   [0:0] currWord_last_reg_1158;
wire   [0:0] icmp_ln170_1_fu_324_p2;
reg   [0:0] icmp_ln170_1_reg_1169;
wire   [0:0] icmp_ln170_2_fu_330_p2;
reg   [0:0] icmp_ln170_2_reg_1174;
reg   [511:0] currWord_data_9_reg_1183;
reg   [63:0] currWord_keep_2_reg_1188;
reg   [63:0] currWord_strb_2_reg_1193;
wire   [0:0] grp_fu_268_p1;
reg   [0:0] currWord_last_2_reg_1198;
reg   [0:0] tmp_reg_1203;
wire   [16:0] checksumL1_4_fu_772_p2;
reg   [16:0] checksumL1_4_reg_1207;
wire   [17:0] checksumL2_fu_786_p2;
reg   [17:0] checksumL2_reg_1212;
wire   [17:0] checksumL2_1_fu_800_p2;
reg   [17:0] checksumL2_1_reg_1217;
wire   [511:0] currWord_data_7_fu_994_p5;
reg    ap_block_pp0_stage0_subdone;
wire   [2:0] select_ln170_fu_1034_p3;
wire   [2:0] select_ln202_fu_310_p3;
reg   [2:0] ap_sig_allocacmp_aiFSMState_load;
wire   [15:0] checksum_fu_1137_p2;
wire   [16:0] add_ln160_fu_616_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_30_fu_594_p4;
wire   [7:0] tmp_29_fu_584_p4;
wire   [15:0] tmp_31_fu_604_p3;
wire   [16:0] zext_ln160_fu_612_p1;
wire   [7:0] tmp_24_fu_516_p4;
wire   [7:0] tmp_25_fu_526_p4;
wire   [7:0] tmp_22_fu_496_p4;
wire   [7:0] tmp_23_fu_506_p4;
wire   [7:0] tmp_20_fu_476_p4;
wire   [7:0] tmp_21_fu_486_p4;
wire   [7:0] tmp_18_fu_456_p4;
wire   [7:0] tmp_19_fu_466_p4;
wire   [7:0] tmp_16_fu_436_p4;
wire   [7:0] tmp_17_fu_446_p4;
wire   [7:0] tmp_14_fu_416_p4;
wire   [7:0] tmp_15_fu_426_p4;
wire   [7:0] tmp_12_fu_396_p4;
wire   [7:0] tmp_13_fu_406_p4;
wire   [7:0] tmp_10_fu_376_p4;
wire   [7:0] tmp_11_fu_386_p4;
wire   [7:0] tmp_8_fu_356_p4;
wire   [7:0] tmp_9_fu_366_p4;
wire   [7:0] trunc_ln154_fu_342_p1;
wire   [7:0] tmp_6_fu_346_p4;
wire   [15:0] checksumL0_fu_628_p3;
wire   [15:0] checksumL0_1_fu_636_p3;
wire   [16:0] zext_ln56_1_fu_712_p1;
wire   [16:0] zext_ln56_fu_708_p1;
wire   [15:0] checksumL0_2_fu_644_p3;
wire   [15:0] checksumL0_3_fu_652_p3;
wire   [16:0] zext_ln56_3_fu_726_p1;
wire   [16:0] zext_ln56_2_fu_722_p1;
wire   [15:0] checksumL0_4_fu_660_p3;
wire   [15:0] checksumL0_5_fu_668_p3;
wire   [16:0] zext_ln56_5_fu_740_p1;
wire   [16:0] zext_ln56_4_fu_736_p1;
wire   [15:0] checksumL0_6_fu_676_p3;
wire   [15:0] checksumL0_7_fu_684_p3;
wire   [16:0] zext_ln56_7_fu_754_p1;
wire   [16:0] zext_ln56_6_fu_750_p1;
wire   [15:0] checksumL0_8_fu_692_p3;
wire   [15:0] checksumL0_9_fu_700_p3;
wire   [16:0] zext_ln56_9_fu_768_p1;
wire   [16:0] zext_ln56_8_fu_764_p1;
wire   [16:0] checksumL1_fu_716_p2;
wire   [16:0] checksumL1_1_fu_730_p2;
wire   [17:0] zext_ln59_1_fu_782_p1;
wire   [17:0] zext_ln59_fu_778_p1;
wire   [16:0] checksumL1_2_fu_744_p2;
wire   [16:0] checksumL1_3_fu_758_p2;
wire   [17:0] zext_ln60_1_fu_796_p1;
wire   [17:0] zext_ln60_fu_792_p1;
wire   [511:0] currWord_data_1_fu_854_p5;
wire   [511:0] currWord_data_2_fu_866_p5;
wire   [511:0] currWord_data_3_fu_878_p5;
wire   [31:0] tmp_1_fu_890_p4;
wire   [511:0] currWord_data_4_fu_900_p5;
wire   [31:0] tmp_3_fu_912_p4;
wire   [0:0] tmp_4_fu_942_p3;
wire   [15:0] zext_ln197_fu_950_p1;
wire   [15:0] trunc_ln197_fu_938_p1;
wire   [511:0] currWord_data_5_fu_922_p5;
wire   [15:0] icmpChecksumTmp_fu_954_p2;
wire   [7:0] trunc_ln199_fu_982_p1;
wire   [7:0] tmp_s_fu_972_p4;
wire   [511:0] currWord_data_6_fu_960_p5;
wire   [15:0] tmp_2_fu_986_p3;
wire   [0:0] icmp_ln170_fu_1007_p2;
wire   [0:0] icmp_ln170_3_fu_1012_p2;
wire   [0:0] and_ln170_1_fu_1023_p2;
wire   [0:0] and_ln170_fu_1018_p2;
wire   [0:0] and_ln170_2_fu_1028_p2;
wire   [18:0] zext_ln61_1_fu_1051_p1;
wire   [18:0] zext_ln61_fu_1048_p1;
wire   [18:0] add_ln61_fu_1054_p2;
wire   [19:0] zext_ln61_2_fu_1060_p1;
wire   [19:0] zext_ln61_3_fu_1064_p1;
wire   [19:0] checksumL3_fu_1067_p2;
wire   [15:0] trunc_ln63_fu_1073_p1;
wire   [3:0] tmp_32_fu_1077_p4;
wire   [16:0] zext_ln63_fu_1087_p1;
wire   [16:0] zext_ln63_1_fu_1091_p1;
wire   [15:0] zext_ln63_2_fu_1095_p1;
wire   [15:0] add_ln45_fu_1105_p2;
wire   [16:0] checksumL4_r_fu_1099_p2;
wire   [0:0] tmp_33_fu_1117_p3;
wire   [15:0] checksumL4_o_fu_1111_p2;
wire   [15:0] trunc_ln69_fu_1125_p1;
wire   [15:0] select_ln66_fu_1129_p3;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_icmp_V_data_V_U_apdone_blk;
wire   [511:0] s_axis_icmp_TDATA_int_regslice;
wire    s_axis_icmp_TVALID_int_regslice;
reg    s_axis_icmp_TREADY_int_regslice;
wire    regslice_both_s_axis_icmp_V_data_V_U_ack_in;
wire    regslice_both_s_axis_icmp_V_keep_V_U_apdone_blk;
wire   [63:0] s_axis_icmp_TKEEP_int_regslice;
wire    regslice_both_s_axis_icmp_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_icmp_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_icmp_V_strb_V_U_apdone_blk;
wire   [63:0] s_axis_icmp_TSTRB_int_regslice;
wire    regslice_both_s_axis_icmp_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_icmp_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_icmp_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_icmp_TLAST_int_regslice;
wire    regslice_both_s_axis_icmp_V_last_V_U_vld_out;
wire    regslice_both_s_axis_icmp_V_last_V_U_ack_in;
reg   [511:0] m_axis_icmp_TDATA_int_regslice;
reg    m_axis_icmp_TVALID_int_regslice;
wire    m_axis_icmp_TREADY_int_regslice;
wire    regslice_both_m_axis_icmp_V_data_V_U_vld_out;
wire    regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk;
reg   [63:0] m_axis_icmp_TKEEP_int_regslice;
wire    regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_icmp_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_icmp_V_strb_V_U_apdone_blk;
reg   [63:0] m_axis_icmp_TSTRB_int_regslice;
wire    regslice_both_m_axis_icmp_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_icmp_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_icmp_V_last_V_U_apdone_blk;
reg   [0:0] m_axis_icmp_TLAST_int_regslice;
wire    regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_icmp_V_last_V_U_vld_out;
reg    ap_condition_900;
reg    ap_condition_905;
reg    ap_condition_910;
reg    ap_condition_292;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 myIpAddress_0_0_data_reg = 32'd0;
#0 myIpAddress_0_0_vld_reg = 1'b0;
#0 aiFSMState = 3'd0;
#0 ipDestination = 32'd0;
#0 icmpType = 8'd0;
#0 icmpCode = 8'd0;
#0 auxInchecksum_r = 16'd0;
#0 prevWord_last = 1'd0;
#0 icmpChecksum = 17'd0;
#0 prevWord_data = 512'd0;
#0 prevWord_keep = 64'd0;
#0 prevWord_strb = 64'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

icmp_server_regslice_both #(
    .DataWidth( 512 ))
regslice_both_s_axis_icmp_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_icmp_TDATA),
    .vld_in(s_axis_icmp_TVALID),
    .ack_in(regslice_both_s_axis_icmp_V_data_V_U_ack_in),
    .data_out(s_axis_icmp_TDATA_int_regslice),
    .vld_out(s_axis_icmp_TVALID_int_regslice),
    .ack_out(s_axis_icmp_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_icmp_V_data_V_U_apdone_blk)
);

icmp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_s_axis_icmp_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_icmp_TKEEP),
    .vld_in(s_axis_icmp_TVALID),
    .ack_in(regslice_both_s_axis_icmp_V_keep_V_U_ack_in),
    .data_out(s_axis_icmp_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_icmp_V_keep_V_U_vld_out),
    .ack_out(s_axis_icmp_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_icmp_V_keep_V_U_apdone_blk)
);

icmp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_s_axis_icmp_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_icmp_TSTRB),
    .vld_in(s_axis_icmp_TVALID),
    .ack_in(regslice_both_s_axis_icmp_V_strb_V_U_ack_in),
    .data_out(s_axis_icmp_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_icmp_V_strb_V_U_vld_out),
    .ack_out(s_axis_icmp_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_icmp_V_strb_V_U_apdone_blk)
);

icmp_server_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_icmp_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_icmp_TLAST),
    .vld_in(s_axis_icmp_TVALID),
    .ack_in(regslice_both_s_axis_icmp_V_last_V_U_ack_in),
    .data_out(s_axis_icmp_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_icmp_V_last_V_U_vld_out),
    .ack_out(s_axis_icmp_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_icmp_V_last_V_U_apdone_blk)
);

icmp_server_regslice_both #(
    .DataWidth( 512 ))
regslice_both_m_axis_icmp_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_icmp_TDATA_int_regslice),
    .vld_in(m_axis_icmp_TVALID_int_regslice),
    .ack_in(m_axis_icmp_TREADY_int_regslice),
    .data_out(m_axis_icmp_TDATA),
    .vld_out(regslice_both_m_axis_icmp_V_data_V_U_vld_out),
    .ack_out(m_axis_icmp_TREADY),
    .apdone_blk(regslice_both_m_axis_icmp_V_data_V_U_apdone_blk)
);

icmp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_m_axis_icmp_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_icmp_TKEEP_int_regslice),
    .vld_in(m_axis_icmp_TVALID_int_regslice),
    .ack_in(regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_icmp_TKEEP),
    .vld_out(regslice_both_m_axis_icmp_V_keep_V_U_vld_out),
    .ack_out(m_axis_icmp_TREADY),
    .apdone_blk(regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk)
);

icmp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_m_axis_icmp_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_icmp_TSTRB_int_regslice),
    .vld_in(m_axis_icmp_TVALID_int_regslice),
    .ack_in(regslice_both_m_axis_icmp_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_icmp_TSTRB),
    .vld_out(regslice_both_m_axis_icmp_V_strb_V_U_vld_out),
    .ack_out(m_axis_icmp_TREADY),
    .apdone_blk(regslice_both_m_axis_icmp_V_strb_V_U_apdone_blk)
);

icmp_server_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_icmp_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_icmp_TLAST_int_regslice),
    .vld_in(m_axis_icmp_TVALID_int_regslice),
    .ack_in(regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_icmp_TLAST),
    .vld_out(regslice_both_m_axis_icmp_V_last_V_U_vld_out),
    .ack_out(m_axis_icmp_TREADY),
    .apdone_blk(regslice_both_m_axis_icmp_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_910)) begin
            aiFSMState <= 3'd1;
        end else if ((1'b1 == ap_condition_905)) begin
            aiFSMState <= 3'd0;
        end else if (((ap_sig_allocacmp_aiFSMState_load == 3'd2) & (1'b1 == 1'b1))) begin
            aiFSMState <= select_ln202_fu_310_p3;
        end else if ((1'b1 == ap_condition_900)) begin
            aiFSMState <= 3'd0;
        end else if (((3'd1 == aiFSMState_load_reg_1149) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            aiFSMState <= select_ln170_fu_1034_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        aiFSMState_load_reg_1149 <= ap_sig_allocacmp_aiFSMState_load;
        aiFSMState_load_reg_1149_pp0_iter1_reg <= aiFSMState_load_reg_1149;
        currWord_last_reg_1158 <= prevWord_last;
        ipDestination_load_reg_1153 <= ipDestination;
        tmp_7_reg_1179_pp0_iter1_reg <= tmp_7_reg_1179;
    end
end

always @ (posedge ap_clk) begin
    if ((~(3'd4 == aiFSMState_load_reg_1149) & ~(3'd1 == aiFSMState_load_reg_1149) & ~(3'd3 == aiFSMState_load_reg_1149) & ~(3'd2 == aiFSMState_load_reg_1149) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_1203 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        auxInchecksum_r <= checksum_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_sig_allocacmp_aiFSMState_load == 3'd4) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd2) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd1) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd3) & (grp_nbreadreq_fu_220_p6 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        checksumL1_4_reg_1207 <= checksumL1_4_fu_772_p2;
        checksumL2_1_reg_1217 <= checksumL2_1_fu_800_p2;
        checksumL2_reg_1212 <= checksumL2_fu_786_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_220_p6 == 1'd1) & (ap_sig_allocacmp_aiFSMState_load == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        currWord_data_9_reg_1183 <= s_axis_icmp_TDATA_int_regslice;
        currWord_keep_2_reg_1188 <= s_axis_icmp_TKEEP_int_regslice;
        currWord_last_2_reg_1198 <= s_axis_icmp_TLAST_int_regslice;
        currWord_strb_2_reg_1193 <= s_axis_icmp_TSTRB_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_sig_allocacmp_aiFSMState_load == 3'd4) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd2) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd1) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd3) & (grp_nbreadreq_fu_220_p6 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmpChecksum <= add_ln160_fu_616_p2;
        icmpCode <= {{s_axis_icmp_TDATA_int_regslice[175:168]}};
        icmpType <= {{s_axis_icmp_TDATA_int_regslice[167:160]}};
        ipDestination <= {{s_axis_icmp_TDATA_int_regslice[159:128]}};
        prevWord_data <= s_axis_icmp_TDATA_int_regslice;
        prevWord_keep <= s_axis_icmp_TKEEP_int_regslice;
        prevWord_last <= s_axis_icmp_TLAST_int_regslice;
        prevWord_strb <= s_axis_icmp_TSTRB_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_allocacmp_aiFSMState_load == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln170_1_reg_1169 <= icmp_ln170_1_fu_324_p2;
        icmp_ln170_2_reg_1174 <= icmp_ln170_2_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((myIpAddress_0_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (myIpAddress_0_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (myIpAddress_0_0_vld_reg == 1'b0)))) begin
        myIpAddress_0_0_data_reg <= myIpAddress_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_allocacmp_aiFSMState_load == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_7_reg_1179 <= grp_nbreadreq_fu_220_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_sig_allocacmp_aiFSMState_load == 3'd4) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd2) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd1) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_1203 <= grp_nbreadreq_fu_220_p6;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((3'd1 == aiFSMState_load_reg_1149) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_sig_allocacmp_aiFSMState_load = select_ln170_fu_1034_p3;
    end else begin
        ap_sig_allocacmp_aiFSMState_load = aiFSMState;
    end
end

always @ (*) begin
    if ((((3'd3 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (tmp_7_reg_1179_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((3'd3 == aiFSMState_load_reg_1149) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1179 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        m_axis_icmp_TDATA_blk_n = m_axis_icmp_TREADY_int_regslice;
    end else begin
        m_axis_icmp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_292)) begin
        if ((ap_predicate_op160_write_state2 == 1'b1)) begin
            m_axis_icmp_TDATA_int_regslice = currWord_data_9_reg_1183;
        end else if ((3'd2 == aiFSMState_load_reg_1149)) begin
            m_axis_icmp_TDATA_int_regslice = currWord_data_7_fu_994_p5;
        end else begin
            m_axis_icmp_TDATA_int_regslice = 'bx;
        end
    end else begin
        m_axis_icmp_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_292)) begin
        if ((ap_predicate_op160_write_state2 == 1'b1)) begin
            m_axis_icmp_TKEEP_int_regslice = currWord_keep_2_reg_1188;
        end else if ((3'd2 == aiFSMState_load_reg_1149)) begin
            m_axis_icmp_TKEEP_int_regslice = prevWord_keep;
        end else begin
            m_axis_icmp_TKEEP_int_regslice = 'bx;
        end
    end else begin
        m_axis_icmp_TKEEP_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_292)) begin
        if ((ap_predicate_op160_write_state2 == 1'b1)) begin
            m_axis_icmp_TLAST_int_regslice = currWord_last_2_reg_1198;
        end else if ((3'd2 == aiFSMState_load_reg_1149)) begin
            m_axis_icmp_TLAST_int_regslice = currWord_last_reg_1158;
        end else begin
            m_axis_icmp_TLAST_int_regslice = 'bx;
        end
    end else begin
        m_axis_icmp_TLAST_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_292)) begin
        if ((ap_predicate_op160_write_state2 == 1'b1)) begin
            m_axis_icmp_TSTRB_int_regslice = currWord_strb_2_reg_1193;
        end else if ((3'd2 == aiFSMState_load_reg_1149)) begin
            m_axis_icmp_TSTRB_int_regslice = prevWord_strb;
        end else begin
            m_axis_icmp_TSTRB_int_regslice = 'bx;
        end
    end else begin
        m_axis_icmp_TSTRB_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op160_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        m_axis_icmp_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_icmp_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((3'd1 == aiFSMState_load_reg_1149) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        myIpAddress_0_0_ack_out = 1'b1;
    end else begin
        myIpAddress_0_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_nbreadreq_fu_220_p6 == 1'd1) & (ap_sig_allocacmp_aiFSMState_load == 3'd4) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((grp_nbreadreq_fu_220_p6 == 1'd1) & (ap_sig_allocacmp_aiFSMState_load == 3'd3) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(ap_sig_allocacmp_aiFSMState_load == 3'd4) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd2) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd1) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd3) & (grp_nbreadreq_fu_220_p6 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        s_axis_icmp_TDATA_blk_n = s_axis_icmp_TVALID_int_regslice;
    end else begin
        s_axis_icmp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op38_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op26_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)))) begin
        s_axis_icmp_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_icmp_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln160_fu_616_p2 = (zext_ln160_fu_612_p1 + 17'd2048);

assign add_ln45_fu_1105_p2 = (trunc_ln63_fu_1073_p1 + zext_ln63_2_fu_1095_p1);

assign add_ln61_fu_1054_p2 = (zext_ln61_1_fu_1051_p1 + zext_ln61_fu_1048_p1);

assign and_ln170_1_fu_1023_p2 = (icmp_ln170_3_fu_1012_p2 & icmp_ln170_2_reg_1174);

assign and_ln170_2_fu_1028_p2 = (and_ln170_fu_1018_p2 & and_ln170_1_fu_1023_p2);

assign and_ln170_fu_1018_p2 = (icmp_ln170_fu_1007_p2 & icmp_ln170_1_reg_1169);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == 1'b1) & (((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op38_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op26_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_icmp_V_data_V_U_apdone_blk == 1'b1) | ((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op183_write_state3 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (m_axis_icmp_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op160_write_state2 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149) & (m_axis_icmp_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == 1'b1) & (((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op38_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op26_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk == 1'b1) | ((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op183_write_state3 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (m_axis_icmp_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op160_write_state2 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149) & (m_axis_icmp_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == 1'b1) & (((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op38_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op26_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk == 1'b1) | ((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op183_write_state3 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (m_axis_icmp_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op160_write_state2 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149) & (m_axis_icmp_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op38_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op26_read_state1 == 1'b1)) | ((s_axis_icmp_TVALID_int_regslice == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op160_write_state2 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149) & (m_axis_icmp_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op160_write_state2 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149) & (m_axis_icmp_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op183_write_state3 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (m_axis_icmp_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_m_axis_icmp_V_data_V_U_apdone_blk == 1'b1) | ((m_axis_icmp_TREADY_int_regslice == 1'b0) & (ap_predicate_op183_write_state3 == 1'b1)) | ((3'd2 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (m_axis_icmp_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_292 = ((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_900 = ((grp_nbreadreq_fu_220_p6 == 1'd1) & (ap_sig_allocacmp_aiFSMState_load == 3'd4) & (1'b1 == 1'b1) & (grp_fu_268_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_905 = ((grp_nbreadreq_fu_220_p6 == 1'd1) & (ap_sig_allocacmp_aiFSMState_load == 3'd3) & (1'b1 == 1'b1) & (grp_fu_268_p1 == 1'd1));
end

always @ (*) begin
    ap_condition_910 = (~(ap_sig_allocacmp_aiFSMState_load == 3'd4) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd2) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd1) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd3) & (grp_nbreadreq_fu_220_p6 == 1'd1) & (1'b1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op12_read_state1 = ((grp_nbreadreq_fu_220_p6 == 1'd1) & (ap_sig_allocacmp_aiFSMState_load == 3'd4));
end

always @ (*) begin
    ap_predicate_op160_write_state2 = ((3'd3 == aiFSMState_load_reg_1149) & (tmp_7_reg_1179 == 1'd1));
end

always @ (*) begin
    ap_predicate_op183_write_state3 = ((3'd3 == aiFSMState_load_reg_1149_pp0_iter1_reg) & (tmp_7_reg_1179_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op26_read_state1 = ((grp_nbreadreq_fu_220_p6 == 1'd1) & (ap_sig_allocacmp_aiFSMState_load == 3'd3));
end

always @ (*) begin
    ap_predicate_op38_read_state1 = (~(ap_sig_allocacmp_aiFSMState_load == 3'd4) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd2) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd1) & ~(ap_sig_allocacmp_aiFSMState_load == 3'd3) & (grp_nbreadreq_fu_220_p6 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign checksumL0_1_fu_636_p3 = {{tmp_22_fu_496_p4}, {tmp_23_fu_506_p4}};

assign checksumL0_2_fu_644_p3 = {{tmp_20_fu_476_p4}, {tmp_21_fu_486_p4}};

assign checksumL0_3_fu_652_p3 = {{tmp_18_fu_456_p4}, {tmp_19_fu_466_p4}};

assign checksumL0_4_fu_660_p3 = {{tmp_16_fu_436_p4}, {tmp_17_fu_446_p4}};

assign checksumL0_5_fu_668_p3 = {{tmp_14_fu_416_p4}, {tmp_15_fu_426_p4}};

assign checksumL0_6_fu_676_p3 = {{tmp_12_fu_396_p4}, {tmp_13_fu_406_p4}};

assign checksumL0_7_fu_684_p3 = {{tmp_10_fu_376_p4}, {tmp_11_fu_386_p4}};

assign checksumL0_8_fu_692_p3 = {{tmp_8_fu_356_p4}, {tmp_9_fu_366_p4}};

assign checksumL0_9_fu_700_p3 = {{trunc_ln154_fu_342_p1}, {tmp_6_fu_346_p4}};

assign checksumL0_fu_628_p3 = {{tmp_24_fu_516_p4}, {tmp_25_fu_526_p4}};

assign checksumL1_1_fu_730_p2 = (zext_ln56_3_fu_726_p1 + zext_ln56_2_fu_722_p1);

assign checksumL1_2_fu_744_p2 = (zext_ln56_5_fu_740_p1 + zext_ln56_4_fu_736_p1);

assign checksumL1_3_fu_758_p2 = (zext_ln56_7_fu_754_p1 + zext_ln56_6_fu_750_p1);

assign checksumL1_4_fu_772_p2 = (zext_ln56_9_fu_768_p1 + zext_ln56_8_fu_764_p1);

assign checksumL1_fu_716_p2 = (zext_ln56_1_fu_712_p1 + zext_ln56_fu_708_p1);

assign checksumL2_1_fu_800_p2 = (zext_ln60_1_fu_796_p1 + zext_ln60_fu_792_p1);

assign checksumL2_fu_786_p2 = (zext_ln59_1_fu_782_p1 + zext_ln59_fu_778_p1);

assign checksumL3_fu_1067_p2 = (zext_ln61_2_fu_1060_p1 + zext_ln61_3_fu_1064_p1);

assign checksumL4_o_fu_1111_p2 = (add_ln45_fu_1105_p2 + 16'd1);

assign checksumL4_r_fu_1099_p2 = (zext_ln63_fu_1087_p1 + zext_ln63_1_fu_1091_p1);

assign checksum_fu_1137_p2 = (select_ln66_fu_1129_p3 ^ 16'd65535);

assign currWord_data_1_fu_854_p5 = {{prevWord_data[511:72]}, {8'd128}, {prevWord_data[63:0]}};

assign currWord_data_2_fu_866_p5 = {{currWord_data_1_fu_854_p5[511:96]}, {24'd1}, {currWord_data_1_fu_854_p5[71:0]}};

assign currWord_data_3_fu_878_p5 = {{currWord_data_2_fu_866_p5[511:96]}, {16'd0}, {currWord_data_2_fu_866_p5[79:0]}};

assign currWord_data_4_fu_900_p5 = {{currWord_data_3_fu_878_p5[511:128]}, {tmp_1_fu_890_p4}, {currWord_data_3_fu_878_p5[95:0]}};

assign currWord_data_5_fu_922_p5 = {{currWord_data_4_fu_900_p5[511:160]}, {tmp_3_fu_912_p4}, {currWord_data_4_fu_900_p5[127:0]}};

assign currWord_data_6_fu_960_p5 = {{currWord_data_5_fu_922_p5[511:168]}, {8'd0}, {currWord_data_5_fu_922_p5[159:0]}};

assign currWord_data_7_fu_994_p5 = {{currWord_data_6_fu_960_p5[511:192]}, {tmp_2_fu_986_p3}, {currWord_data_6_fu_960_p5[175:0]}};

assign grp_fu_268_p1 = s_axis_icmp_TLAST_int_regslice;

assign grp_nbreadreq_fu_220_p6 = s_axis_icmp_TVALID_int_regslice;

assign icmpChecksumTmp_fu_954_p2 = (zext_ln197_fu_950_p1 + trunc_ln197_fu_938_p1);

assign icmp_ln170_1_fu_324_p2 = ((icmpType == 8'd8) ? 1'b1 : 1'b0);

assign icmp_ln170_2_fu_330_p2 = ((icmpCode == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln170_3_fu_1012_p2 = ((auxInchecksum_r == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln170_fu_1007_p2 = ((ipDestination_load_reg_1153 == myIpAddress_0_0_data_reg) ? 1'b1 : 1'b0);

assign m_axis_icmp_TVALID = regslice_both_m_axis_icmp_V_data_V_U_vld_out;

assign s_axis_icmp_TREADY = regslice_both_s_axis_icmp_V_data_V_U_ack_in;

assign select_ln170_fu_1034_p3 = ((and_ln170_2_fu_1028_p2[0:0] == 1'b1) ? 3'd2 : 3'd4);

assign select_ln202_fu_310_p3 = ((prevWord_last[0:0] == 1'b1) ? 3'd0 : 3'd3);

assign select_ln66_fu_1129_p3 = ((tmp_33_fu_1117_p3[0:0] == 1'b1) ? checksumL4_o_fu_1111_p2 : trunc_ln69_fu_1125_p1);

assign tmp_10_fu_376_p4 = {{s_axis_icmp_TDATA_int_regslice[39:32]}};

assign tmp_11_fu_386_p4 = {{s_axis_icmp_TDATA_int_regslice[47:40]}};

assign tmp_12_fu_396_p4 = {{s_axis_icmp_TDATA_int_regslice[55:48]}};

assign tmp_13_fu_406_p4 = {{s_axis_icmp_TDATA_int_regslice[63:56]}};

assign tmp_14_fu_416_p4 = {{s_axis_icmp_TDATA_int_regslice[71:64]}};

assign tmp_15_fu_426_p4 = {{s_axis_icmp_TDATA_int_regslice[79:72]}};

assign tmp_16_fu_436_p4 = {{s_axis_icmp_TDATA_int_regslice[87:80]}};

assign tmp_17_fu_446_p4 = {{s_axis_icmp_TDATA_int_regslice[95:88]}};

assign tmp_18_fu_456_p4 = {{s_axis_icmp_TDATA_int_regslice[103:96]}};

assign tmp_19_fu_466_p4 = {{s_axis_icmp_TDATA_int_regslice[111:104]}};

assign tmp_1_fu_890_p4 = {{prevWord_data[159:128]}};

assign tmp_20_fu_476_p4 = {{s_axis_icmp_TDATA_int_regslice[119:112]}};

assign tmp_21_fu_486_p4 = {{s_axis_icmp_TDATA_int_regslice[127:120]}};

assign tmp_22_fu_496_p4 = {{s_axis_icmp_TDATA_int_regslice[135:128]}};

assign tmp_23_fu_506_p4 = {{s_axis_icmp_TDATA_int_regslice[143:136]}};

assign tmp_24_fu_516_p4 = {{s_axis_icmp_TDATA_int_regslice[151:144]}};

assign tmp_25_fu_526_p4 = {{s_axis_icmp_TDATA_int_regslice[159:152]}};

assign tmp_29_fu_584_p4 = {{s_axis_icmp_TDATA_int_regslice[191:184]}};

assign tmp_2_fu_986_p3 = {{trunc_ln199_fu_982_p1}, {tmp_s_fu_972_p4}};

assign tmp_30_fu_594_p4 = {{s_axis_icmp_TDATA_int_regslice[183:176]}};

assign tmp_31_fu_604_p3 = {{tmp_30_fu_594_p4}, {tmp_29_fu_584_p4}};

assign tmp_32_fu_1077_p4 = {{checksumL3_fu_1067_p2[19:16]}};

assign tmp_33_fu_1117_p3 = checksumL4_r_fu_1099_p2[32'd16];

assign tmp_3_fu_912_p4 = {{prevWord_data[127:96]}};

assign tmp_4_fu_942_p3 = icmpChecksum[32'd16];

assign tmp_6_fu_346_p4 = {{s_axis_icmp_TDATA_int_regslice[15:8]}};

assign tmp_8_fu_356_p4 = {{s_axis_icmp_TDATA_int_regslice[23:16]}};

assign tmp_9_fu_366_p4 = {{s_axis_icmp_TDATA_int_regslice[31:24]}};

assign tmp_s_fu_972_p4 = {{icmpChecksumTmp_fu_954_p2[15:8]}};

assign trunc_ln154_fu_342_p1 = s_axis_icmp_TDATA_int_regslice[7:0];

assign trunc_ln197_fu_938_p1 = icmpChecksum[15:0];

assign trunc_ln199_fu_982_p1 = icmpChecksumTmp_fu_954_p2[7:0];

assign trunc_ln63_fu_1073_p1 = checksumL3_fu_1067_p2[15:0];

assign trunc_ln69_fu_1125_p1 = checksumL4_r_fu_1099_p2[15:0];

assign zext_ln160_fu_612_p1 = tmp_31_fu_604_p3;

assign zext_ln197_fu_950_p1 = tmp_4_fu_942_p3;

assign zext_ln56_1_fu_712_p1 = checksumL0_1_fu_636_p3;

assign zext_ln56_2_fu_722_p1 = checksumL0_2_fu_644_p3;

assign zext_ln56_3_fu_726_p1 = checksumL0_3_fu_652_p3;

assign zext_ln56_4_fu_736_p1 = checksumL0_4_fu_660_p3;

assign zext_ln56_5_fu_740_p1 = checksumL0_5_fu_668_p3;

assign zext_ln56_6_fu_750_p1 = checksumL0_6_fu_676_p3;

assign zext_ln56_7_fu_754_p1 = checksumL0_7_fu_684_p3;

assign zext_ln56_8_fu_764_p1 = checksumL0_8_fu_692_p3;

assign zext_ln56_9_fu_768_p1 = checksumL0_9_fu_700_p3;

assign zext_ln56_fu_708_p1 = checksumL0_fu_628_p3;

assign zext_ln59_1_fu_782_p1 = checksumL1_1_fu_730_p2;

assign zext_ln59_fu_778_p1 = checksumL1_fu_716_p2;

assign zext_ln60_1_fu_796_p1 = checksumL1_3_fu_758_p2;

assign zext_ln60_fu_792_p1 = checksumL1_2_fu_744_p2;

assign zext_ln61_1_fu_1051_p1 = checksumL2_1_reg_1217;

assign zext_ln61_2_fu_1060_p1 = add_ln61_fu_1054_p2;

assign zext_ln61_3_fu_1064_p1 = checksumL1_4_reg_1207;

assign zext_ln61_fu_1048_p1 = checksumL2_reg_1212;

assign zext_ln63_1_fu_1091_p1 = tmp_32_fu_1077_p4;

assign zext_ln63_2_fu_1095_p1 = tmp_32_fu_1077_p4;

assign zext_ln63_fu_1087_p1 = trunc_ln63_fu_1073_p1;


reg find_kernel_block = 0;
// synthesis translate_off
`include "icmp_server_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //icmp_server

