-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity icmp_server is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_icmp_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_icmp_TVALID : IN STD_LOGIC;
    s_axis_icmp_TREADY : OUT STD_LOGIC;
    s_axis_icmp_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_icmp_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_icmp_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    myIpAddress_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_icmp_TVALID : OUT STD_LOGIC;
    m_axis_icmp_TREADY : IN STD_LOGIC;
    m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of icmp_server is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "icmp_server_icmp_server,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.100000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.677688,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1498,HLS_SYN_LUT=605,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0_1 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_0_2 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv17_800 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal myIpAddress_0_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal myIpAddress_0_0_vld_reg : STD_LOGIC := '0';
    signal myIpAddress_0_0_ack_out : STD_LOGIC;
    signal aiFSMState : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ipDestination : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal icmpType : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal icmpCode : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal auxInchecksum_r : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal prevWord_last : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmpChecksum : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal prevWord_data : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal prevWord_keep : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal prevWord_strb : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_axis_icmp_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_nbreadreq_fu_220_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_icmp_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal aiFSMState_load_reg_1149 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal aiFSMState_load_reg_1149_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1179_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op12_read_state1 : BOOLEAN;
    signal ap_predicate_op26_read_state1 : BOOLEAN;
    signal ap_predicate_op38_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op160_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_predicate_op183_write_state3 : BOOLEAN;
    signal regslice_both_m_axis_icmp_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ipDestination_load_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal currWord_last_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_1_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_2_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_2_reg_1174 : STD_LOGIC_VECTOR (0 downto 0);
    signal currWord_data_9_reg_1183 : STD_LOGIC_VECTOR (511 downto 0);
    signal currWord_keep_2_reg_1188 : STD_LOGIC_VECTOR (63 downto 0);
    signal currWord_strb_2_reg_1193 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal currWord_last_2_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal checksumL1_4_fu_772_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL1_4_reg_1207 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL2_fu_786_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal checksumL2_reg_1212 : STD_LOGIC_VECTOR (17 downto 0);
    signal checksumL2_1_fu_800_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal checksumL2_1_reg_1217 : STD_LOGIC_VECTOR (17 downto 0);
    signal currWord_data_7_fu_994_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal select_ln170_fu_1034_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln202_fu_310_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_aiFSMState_load : STD_LOGIC_VECTOR (2 downto 0);
    signal checksum_fu_1137_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln160_fu_616_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_30_fu_594_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_584_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_604_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln160_fu_612_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_fu_516_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_496_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_476_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_486_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_456_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_466_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_436_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_446_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_416_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_426_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_406_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_376_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_386_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_356_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln154_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal checksumL0_fu_628_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_1_fu_636_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln56_1_fu_712_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln56_fu_708_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_2_fu_644_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_3_fu_652_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln56_3_fu_726_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln56_2_fu_722_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_4_fu_660_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_5_fu_668_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln56_5_fu_740_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln56_4_fu_736_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_6_fu_676_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_7_fu_684_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln56_7_fu_754_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln56_6_fu_750_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_8_fu_692_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_9_fu_700_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln56_9_fu_768_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln56_8_fu_764_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL1_fu_716_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL1_1_fu_730_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln59_1_fu_782_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln59_fu_778_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal checksumL1_2_fu_744_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL1_3_fu_758_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln60_1_fu_796_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln60_fu_792_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal currWord_data_1_fu_854_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal currWord_data_2_fu_866_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal currWord_data_3_fu_878_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_1_fu_890_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal currWord_data_4_fu_900_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_3_fu_912_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_942_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln197_fu_950_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln197_fu_938_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal currWord_data_5_fu_922_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmpChecksumTmp_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln199_fu_982_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_972_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal currWord_data_6_fu_960_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_2_fu_986_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln170_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_3_fu_1012_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_1_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_2_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln61_1_fu_1051_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln61_fu_1048_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln61_fu_1054_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln61_2_fu_1060_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln61_3_fu_1064_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal checksumL3_fu_1067_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln63_fu_1073_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_1077_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln63_fu_1087_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln63_1_fu_1091_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln63_2_fu_1095_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_fu_1105_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL4_r_fu_1099_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_33_fu_1117_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal checksumL4_o_fu_1111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln69_fu_1125_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln66_fu_1129_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal s_axis_icmp_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_icmp_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_s_axis_icmp_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_s_axis_icmp_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_icmp_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_last_V_U_ack_in : STD_LOGIC;
    signal m_axis_icmp_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal m_axis_icmp_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_icmp_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_m_axis_icmp_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_last_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_900 : BOOLEAN;
    signal ap_condition_905 : BOOLEAN;
    signal ap_condition_910 : BOOLEAN;
    signal ap_condition_292 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component icmp_server_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_s_axis_icmp_V_data_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TDATA,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_data_V_U_ack_in,
        data_out => s_axis_icmp_TDATA_int_regslice,
        vld_out => s_axis_icmp_TVALID_int_regslice,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_data_V_U_apdone_blk);

    regslice_both_s_axis_icmp_V_keep_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TKEEP,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_keep_V_U_ack_in,
        data_out => s_axis_icmp_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_icmp_V_keep_V_U_vld_out,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_icmp_V_strb_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TSTRB,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_strb_V_U_ack_in,
        data_out => s_axis_icmp_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_icmp_V_strb_V_U_vld_out,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_icmp_V_last_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TLAST,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_last_V_U_ack_in,
        data_out => s_axis_icmp_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_icmp_V_last_V_U_vld_out,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_last_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_data_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TDATA_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => m_axis_icmp_TREADY_int_regslice,
        data_out => m_axis_icmp_TDATA,
        vld_out => regslice_both_m_axis_icmp_V_data_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_data_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_keep_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TKEEP_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TKEEP,
        vld_out => regslice_both_m_axis_icmp_V_keep_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_strb_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TSTRB_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_icmp_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TSTRB,
        vld_out => regslice_both_m_axis_icmp_V_strb_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_last_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TLAST_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TLAST,
        vld_out => regslice_both_m_axis_icmp_V_last_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    aiFSMState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_910)) then 
                    aiFSMState <= ap_const_lv3_1;
                elsif ((ap_const_boolean_1 = ap_condition_905)) then 
                    aiFSMState <= ap_const_lv3_0_2;
                elsif (((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_2) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    aiFSMState <= select_ln202_fu_310_p3;
                elsif ((ap_const_boolean_1 = ap_condition_900)) then 
                    aiFSMState <= ap_const_lv3_0_1;
                elsif (((ap_const_lv3_1 = aiFSMState_load_reg_1149) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    aiFSMState <= select_ln170_fu_1034_p3;
                end if;
            end if; 
        end if;
    end process;

    myIpAddress_0_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                aiFSMState_load_reg_1149 <= ap_sig_allocacmp_aiFSMState_load;
                aiFSMState_load_reg_1149_pp0_iter1_reg <= aiFSMState_load_reg_1149;
                currWord_last_reg_1158 <= prevWord_last;
                ipDestination_load_reg_1153 <= ipDestination;
                tmp_7_reg_1179_pp0_iter1_reg <= tmp_7_reg_1179;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_const_lv3_4 = aiFSMState_load_reg_1149)) and not((ap_const_lv3_1 = aiFSMState_load_reg_1149)) and not((ap_const_lv3_3 = aiFSMState_load_reg_1149)) and not((ap_const_lv3_2 = aiFSMState_load_reg_1149)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_1203 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                auxInchecksum_r <= checksum_fu_1137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_2)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_1)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3)) and (grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                checksumL1_4_reg_1207 <= checksumL1_4_fu_772_p2;
                checksumL2_1_reg_1217 <= checksumL2_1_fu_800_p2;
                checksumL2_reg_1212 <= checksumL2_fu_786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                currWord_data_9_reg_1183 <= s_axis_icmp_TDATA_int_regslice;
                currWord_keep_2_reg_1188 <= s_axis_icmp_TKEEP_int_regslice;
                currWord_last_2_reg_1198 <= s_axis_icmp_TLAST_int_regslice;
                currWord_strb_2_reg_1193 <= s_axis_icmp_TSTRB_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_2)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_1)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3)) and (grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmpChecksum <= add_ln160_fu_616_p2;
                icmpCode <= s_axis_icmp_TDATA_int_regslice(175 downto 168);
                icmpType <= s_axis_icmp_TDATA_int_regslice(167 downto 160);
                ipDestination <= s_axis_icmp_TDATA_int_regslice(159 downto 128);
                prevWord_data <= s_axis_icmp_TDATA_int_regslice;
                prevWord_keep <= s_axis_icmp_TKEEP_int_regslice;
                prevWord_last <= s_axis_icmp_TLAST_int_regslice;
                prevWord_strb <= s_axis_icmp_TSTRB_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln170_1_reg_1169 <= icmp_ln170_1_fu_324_p2;
                icmp_ln170_2_reg_1174 <= icmp_ln170_2_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((myIpAddress_0_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (myIpAddress_0_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (myIpAddress_0_0_vld_reg = ap_const_logic_0)))) then
                myIpAddress_0_0_data_reg <= myIpAddress_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_1179 <= grp_nbreadreq_fu_220_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_2)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_1)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_1203 <= grp_nbreadreq_fu_220_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln160_fu_616_p2 <= std_logic_vector(unsigned(zext_ln160_fu_612_p1) + unsigned(ap_const_lv17_800));
    add_ln45_fu_1105_p2 <= std_logic_vector(unsigned(trunc_ln63_fu_1073_p1) + unsigned(zext_ln63_2_fu_1095_p1));
    add_ln61_fu_1054_p2 <= std_logic_vector(unsigned(zext_ln61_1_fu_1051_p1) + unsigned(zext_ln61_fu_1048_p1));
    and_ln170_1_fu_1023_p2 <= (icmp_ln170_3_fu_1012_p2 and icmp_ln170_2_reg_1174);
    and_ln170_2_fu_1028_p2 <= (and_ln170_fu_1018_p2 and and_ln170_1_fu_1023_p2);
    and_ln170_fu_1018_p2 <= (icmp_ln170_fu_1007_p2 and icmp_ln170_1_reg_1169);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1149, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1149_pp0_iter1_reg, ap_predicate_op12_read_state1, ap_predicate_op26_read_state1, ap_predicate_op38_read_state1, ap_predicate_op160_write_state2, ap_predicate_op183_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, s_axis_icmp_TVALID_int_regslice, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_1 = ap_const_logic_1) and (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op26_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op183_write_state3 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op160_write_state2 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1149, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1149_pp0_iter1_reg, ap_predicate_op12_read_state1, ap_predicate_op26_read_state1, ap_predicate_op38_read_state1, ap_predicate_op160_write_state2, ap_block_state2_io, ap_predicate_op183_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, ap_block_state3_io, s_axis_icmp_TVALID_int_regslice, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_1 = ap_const_logic_1) and (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op26_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op183_write_state3 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op160_write_state2 = ap_const_boolean_1)) or ((ap_const_lv3_2 
    = aiFSMState_load_reg_1149) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1149, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1149_pp0_iter1_reg, ap_predicate_op12_read_state1, ap_predicate_op26_read_state1, ap_predicate_op38_read_state1, ap_predicate_op160_write_state2, ap_block_state2_io, ap_predicate_op183_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, ap_block_state3_io, s_axis_icmp_TVALID_int_regslice, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_1 = ap_const_logic_1) and (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op26_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op183_write_state3 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op160_write_state2 = ap_const_boolean_1)) or ((ap_const_lv3_2 
    = aiFSMState_load_reg_1149) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_predicate_op12_read_state1, ap_predicate_op26_read_state1, ap_predicate_op38_read_state1, s_axis_icmp_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op26_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(aiFSMState_load_reg_1149, ap_predicate_op160_write_state2, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state2_io <= (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op160_write_state2 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(aiFSMState_load_reg_1149, ap_predicate_op160_write_state2, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op160_write_state2 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(aiFSMState_load_reg_1149_pp0_iter1_reg, ap_predicate_op183_write_state3, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state3_io <= (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op183_write_state3 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(aiFSMState_load_reg_1149_pp0_iter1_reg, ap_predicate_op183_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op183_write_state3 = ap_const_boolean_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (m_axis_icmp_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_292_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_292 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_900_assign_proc : process(grp_nbreadreq_fu_220_p6, grp_fu_268_p1, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_condition_900 <= ((grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4) and (ap_const_logic_1 = ap_const_logic_1) and (grp_fu_268_p1 = ap_const_lv1_1));
    end process;


    ap_condition_905_assign_proc : process(grp_nbreadreq_fu_220_p6, grp_fu_268_p1, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_condition_905 <= ((grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (ap_const_logic_1 = ap_const_logic_1) and (grp_fu_268_p1 = ap_const_lv1_1));
    end process;


    ap_condition_910_assign_proc : process(grp_nbreadreq_fu_220_p6, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_condition_910 <= (not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_2)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_1)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3)) and (grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op12_read_state1_assign_proc : process(grp_nbreadreq_fu_220_p6, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_predicate_op12_read_state1 <= ((grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4));
    end process;


    ap_predicate_op160_write_state2_assign_proc : process(aiFSMState_load_reg_1149, tmp_7_reg_1179)
    begin
                ap_predicate_op160_write_state2 <= ((ap_const_lv3_3 = aiFSMState_load_reg_1149) and (tmp_7_reg_1179 = ap_const_lv1_1));
    end process;


    ap_predicate_op183_write_state3_assign_proc : process(aiFSMState_load_reg_1149_pp0_iter1_reg, tmp_7_reg_1179_pp0_iter1_reg)
    begin
                ap_predicate_op183_write_state3 <= ((ap_const_lv3_3 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (tmp_7_reg_1179_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op26_read_state1_assign_proc : process(grp_nbreadreq_fu_220_p6, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_predicate_op26_read_state1 <= ((grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3));
    end process;


    ap_predicate_op38_read_state1_assign_proc : process(grp_nbreadreq_fu_220_p6, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_predicate_op38_read_state1 <= (not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_2)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_1)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3)) and (grp_nbreadreq_fu_220_p6 = ap_const_lv1_1));
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_aiFSMState_load_assign_proc : process(aiFSMState, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1149, select_ln170_fu_1034_p3)
    begin
        if (((ap_const_lv3_1 = aiFSMState_load_reg_1149) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_sig_allocacmp_aiFSMState_load <= select_ln170_fu_1034_p3;
        else 
            ap_sig_allocacmp_aiFSMState_load <= aiFSMState;
        end if; 
    end process;

    checksumL0_1_fu_636_p3 <= (tmp_22_fu_496_p4 & tmp_23_fu_506_p4);
    checksumL0_2_fu_644_p3 <= (tmp_20_fu_476_p4 & tmp_21_fu_486_p4);
    checksumL0_3_fu_652_p3 <= (tmp_18_fu_456_p4 & tmp_19_fu_466_p4);
    checksumL0_4_fu_660_p3 <= (tmp_16_fu_436_p4 & tmp_17_fu_446_p4);
    checksumL0_5_fu_668_p3 <= (tmp_14_fu_416_p4 & tmp_15_fu_426_p4);
    checksumL0_6_fu_676_p3 <= (tmp_12_fu_396_p4 & tmp_13_fu_406_p4);
    checksumL0_7_fu_684_p3 <= (tmp_10_fu_376_p4 & tmp_11_fu_386_p4);
    checksumL0_8_fu_692_p3 <= (tmp_8_fu_356_p4 & tmp_9_fu_366_p4);
    checksumL0_9_fu_700_p3 <= (trunc_ln154_fu_342_p1 & tmp_6_fu_346_p4);
    checksumL0_fu_628_p3 <= (tmp_24_fu_516_p4 & tmp_25_fu_526_p4);
    checksumL1_1_fu_730_p2 <= std_logic_vector(unsigned(zext_ln56_3_fu_726_p1) + unsigned(zext_ln56_2_fu_722_p1));
    checksumL1_2_fu_744_p2 <= std_logic_vector(unsigned(zext_ln56_5_fu_740_p1) + unsigned(zext_ln56_4_fu_736_p1));
    checksumL1_3_fu_758_p2 <= std_logic_vector(unsigned(zext_ln56_7_fu_754_p1) + unsigned(zext_ln56_6_fu_750_p1));
    checksumL1_4_fu_772_p2 <= std_logic_vector(unsigned(zext_ln56_9_fu_768_p1) + unsigned(zext_ln56_8_fu_764_p1));
    checksumL1_fu_716_p2 <= std_logic_vector(unsigned(zext_ln56_1_fu_712_p1) + unsigned(zext_ln56_fu_708_p1));
    checksumL2_1_fu_800_p2 <= std_logic_vector(unsigned(zext_ln60_1_fu_796_p1) + unsigned(zext_ln60_fu_792_p1));
    checksumL2_fu_786_p2 <= std_logic_vector(unsigned(zext_ln59_1_fu_782_p1) + unsigned(zext_ln59_fu_778_p1));
    checksumL3_fu_1067_p2 <= std_logic_vector(unsigned(zext_ln61_2_fu_1060_p1) + unsigned(zext_ln61_3_fu_1064_p1));
    checksumL4_o_fu_1111_p2 <= std_logic_vector(unsigned(add_ln45_fu_1105_p2) + unsigned(ap_const_lv16_1));
    checksumL4_r_fu_1099_p2 <= std_logic_vector(unsigned(zext_ln63_fu_1087_p1) + unsigned(zext_ln63_1_fu_1091_p1));
    checksum_fu_1137_p2 <= (select_ln66_fu_1129_p3 xor ap_const_lv16_FFFF);
    currWord_data_1_fu_854_p5 <= (prevWord_data(511 downto 72) & ap_const_lv8_80 & prevWord_data(63 downto 0));
    currWord_data_2_fu_866_p5 <= (currWord_data_1_fu_854_p5(511 downto 96) & ap_const_lv24_1 & currWord_data_1_fu_854_p5(71 downto 0));
    currWord_data_3_fu_878_p5 <= (currWord_data_2_fu_866_p5(511 downto 96) & ap_const_lv16_0 & currWord_data_2_fu_866_p5(79 downto 0));
    currWord_data_4_fu_900_p5 <= (currWord_data_3_fu_878_p5(511 downto 128) & tmp_1_fu_890_p4 & currWord_data_3_fu_878_p5(95 downto 0));
    currWord_data_5_fu_922_p5 <= (currWord_data_4_fu_900_p5(511 downto 160) & tmp_3_fu_912_p4 & currWord_data_4_fu_900_p5(127 downto 0));
    currWord_data_6_fu_960_p5 <= (currWord_data_5_fu_922_p5(511 downto 168) & ap_const_lv8_0 & currWord_data_5_fu_922_p5(159 downto 0));
    currWord_data_7_fu_994_p5 <= (currWord_data_6_fu_960_p5(511 downto 192) & tmp_2_fu_986_p3 & currWord_data_6_fu_960_p5(175 downto 0));
    grp_fu_268_p1 <= s_axis_icmp_TLAST_int_regslice;
    grp_nbreadreq_fu_220_p6 <= (0=>(s_axis_icmp_TVALID_int_regslice), others=>'-');
    icmpChecksumTmp_fu_954_p2 <= std_logic_vector(unsigned(zext_ln197_fu_950_p1) + unsigned(trunc_ln197_fu_938_p1));
    icmp_ln170_1_fu_324_p2 <= "1" when (icmpType = ap_const_lv8_8) else "0";
    icmp_ln170_2_fu_330_p2 <= "1" when (icmpCode = ap_const_lv8_0) else "0";
    icmp_ln170_3_fu_1012_p2 <= "1" when (auxInchecksum_r = ap_const_lv16_0) else "0";
    icmp_ln170_fu_1007_p2 <= "1" when (ipDestination_load_reg_1153 = myIpAddress_0_0_data_reg) else "0";

    m_axis_icmp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1149, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1149_pp0_iter1_reg, tmp_7_reg_1179, tmp_7_reg_1179_pp0_iter1_reg, m_axis_icmp_TREADY_int_regslice)
    begin
        if ((((ap_const_lv3_3 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_7_reg_1179_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_lv3_3 = aiFSMState_load_reg_1149) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1179 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            m_axis_icmp_TDATA_blk_n <= m_axis_icmp_TREADY_int_regslice;
        else 
            m_axis_icmp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    m_axis_icmp_TDATA_int_regslice_assign_proc : process(aiFSMState_load_reg_1149, ap_predicate_op160_write_state2, currWord_data_9_reg_1183, currWord_data_7_fu_994_p5, ap_condition_292)
    begin
        if ((ap_const_boolean_1 = ap_condition_292)) then
            if ((ap_predicate_op160_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TDATA_int_regslice <= currWord_data_9_reg_1183;
            elsif ((ap_const_lv3_2 = aiFSMState_load_reg_1149)) then 
                m_axis_icmp_TDATA_int_regslice <= currWord_data_7_fu_994_p5;
            else 
                m_axis_icmp_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axis_icmp_TKEEP_int_regslice_assign_proc : process(prevWord_keep, aiFSMState_load_reg_1149, ap_predicate_op160_write_state2, currWord_keep_2_reg_1188, ap_condition_292)
    begin
        if ((ap_const_boolean_1 = ap_condition_292)) then
            if ((ap_predicate_op160_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TKEEP_int_regslice <= currWord_keep_2_reg_1188;
            elsif ((ap_const_lv3_2 = aiFSMState_load_reg_1149)) then 
                m_axis_icmp_TKEEP_int_regslice <= prevWord_keep;
            else 
                m_axis_icmp_TKEEP_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TKEEP_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axis_icmp_TLAST_int_regslice_assign_proc : process(aiFSMState_load_reg_1149, ap_predicate_op160_write_state2, currWord_last_reg_1158, currWord_last_2_reg_1198, ap_condition_292)
    begin
        if ((ap_const_boolean_1 = ap_condition_292)) then
            if ((ap_predicate_op160_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TLAST_int_regslice <= currWord_last_2_reg_1198;
            elsif ((ap_const_lv3_2 = aiFSMState_load_reg_1149)) then 
                m_axis_icmp_TLAST_int_regslice <= currWord_last_reg_1158;
            else 
                m_axis_icmp_TLAST_int_regslice <= "X";
            end if;
        else 
            m_axis_icmp_TLAST_int_regslice <= "X";
        end if; 
    end process;


    m_axis_icmp_TSTRB_int_regslice_assign_proc : process(prevWord_strb, aiFSMState_load_reg_1149, ap_predicate_op160_write_state2, currWord_strb_2_reg_1193, ap_condition_292)
    begin
        if ((ap_const_boolean_1 = ap_condition_292)) then
            if ((ap_predicate_op160_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TSTRB_int_regslice <= currWord_strb_2_reg_1193;
            elsif ((ap_const_lv3_2 = aiFSMState_load_reg_1149)) then 
                m_axis_icmp_TSTRB_int_regslice <= prevWord_strb;
            else 
                m_axis_icmp_TSTRB_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TSTRB_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axis_icmp_TVALID <= regslice_both_m_axis_icmp_V_data_V_U_vld_out;

    m_axis_icmp_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1149, ap_predicate_op160_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op160_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_lv3_2 = aiFSMState_load_reg_1149) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            m_axis_icmp_TVALID_int_regslice <= ap_const_logic_1;
        else 
            m_axis_icmp_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    myIpAddress_0_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1149, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_lv3_1 = aiFSMState_load_reg_1149) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            myIpAddress_0_0_ack_out <= ap_const_logic_1;
        else 
            myIpAddress_0_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_icmp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grp_nbreadreq_fu_220_p6, ap_sig_allocacmp_aiFSMState_load, s_axis_icmp_TVALID_int_regslice)
    begin
        if ((((grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_2)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_1)) and not((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3)) and (grp_nbreadreq_fu_220_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_axis_icmp_TDATA_blk_n <= s_axis_icmp_TVALID_int_regslice;
        else 
            s_axis_icmp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_icmp_TREADY <= regslice_both_s_axis_icmp_V_data_V_U_ack_in;

    s_axis_icmp_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op12_read_state1, ap_predicate_op26_read_state1, ap_predicate_op38_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op26_read_state1 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) then 
            s_axis_icmp_TREADY_int_regslice <= ap_const_logic_1;
        else 
            s_axis_icmp_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln170_fu_1034_p3 <= 
        ap_const_lv3_2 when (and_ln170_2_fu_1028_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln202_fu_310_p3 <= 
        ap_const_lv3_0 when (prevWord_last(0) = '1') else 
        ap_const_lv3_3;
    select_ln66_fu_1129_p3 <= 
        checksumL4_o_fu_1111_p2 when (tmp_33_fu_1117_p3(0) = '1') else 
        trunc_ln69_fu_1125_p1;
    tmp_10_fu_376_p4 <= s_axis_icmp_TDATA_int_regslice(39 downto 32);
    tmp_11_fu_386_p4 <= s_axis_icmp_TDATA_int_regslice(47 downto 40);
    tmp_12_fu_396_p4 <= s_axis_icmp_TDATA_int_regslice(55 downto 48);
    tmp_13_fu_406_p4 <= s_axis_icmp_TDATA_int_regslice(63 downto 56);
    tmp_14_fu_416_p4 <= s_axis_icmp_TDATA_int_regslice(71 downto 64);
    tmp_15_fu_426_p4 <= s_axis_icmp_TDATA_int_regslice(79 downto 72);
    tmp_16_fu_436_p4 <= s_axis_icmp_TDATA_int_regslice(87 downto 80);
    tmp_17_fu_446_p4 <= s_axis_icmp_TDATA_int_regslice(95 downto 88);
    tmp_18_fu_456_p4 <= s_axis_icmp_TDATA_int_regslice(103 downto 96);
    tmp_19_fu_466_p4 <= s_axis_icmp_TDATA_int_regslice(111 downto 104);
    tmp_1_fu_890_p4 <= prevWord_data(159 downto 128);
    tmp_20_fu_476_p4 <= s_axis_icmp_TDATA_int_regslice(119 downto 112);
    tmp_21_fu_486_p4 <= s_axis_icmp_TDATA_int_regslice(127 downto 120);
    tmp_22_fu_496_p4 <= s_axis_icmp_TDATA_int_regslice(135 downto 128);
    tmp_23_fu_506_p4 <= s_axis_icmp_TDATA_int_regslice(143 downto 136);
    tmp_24_fu_516_p4 <= s_axis_icmp_TDATA_int_regslice(151 downto 144);
    tmp_25_fu_526_p4 <= s_axis_icmp_TDATA_int_regslice(159 downto 152);
    tmp_29_fu_584_p4 <= s_axis_icmp_TDATA_int_regslice(191 downto 184);
    tmp_2_fu_986_p3 <= (trunc_ln199_fu_982_p1 & tmp_s_fu_972_p4);
    tmp_30_fu_594_p4 <= s_axis_icmp_TDATA_int_regslice(183 downto 176);
    tmp_31_fu_604_p3 <= (tmp_30_fu_594_p4 & tmp_29_fu_584_p4);
    tmp_32_fu_1077_p4 <= checksumL3_fu_1067_p2(19 downto 16);
    tmp_33_fu_1117_p3 <= checksumL4_r_fu_1099_p2(16 downto 16);
    tmp_3_fu_912_p4 <= prevWord_data(127 downto 96);
    tmp_4_fu_942_p3 <= icmpChecksum(16 downto 16);
    tmp_6_fu_346_p4 <= s_axis_icmp_TDATA_int_regslice(15 downto 8);
    tmp_8_fu_356_p4 <= s_axis_icmp_TDATA_int_regslice(23 downto 16);
    tmp_9_fu_366_p4 <= s_axis_icmp_TDATA_int_regslice(31 downto 24);
    tmp_s_fu_972_p4 <= icmpChecksumTmp_fu_954_p2(15 downto 8);
    trunc_ln154_fu_342_p1 <= s_axis_icmp_TDATA_int_regslice(8 - 1 downto 0);
    trunc_ln197_fu_938_p1 <= icmpChecksum(16 - 1 downto 0);
    trunc_ln199_fu_982_p1 <= icmpChecksumTmp_fu_954_p2(8 - 1 downto 0);
    trunc_ln63_fu_1073_p1 <= checksumL3_fu_1067_p2(16 - 1 downto 0);
    trunc_ln69_fu_1125_p1 <= checksumL4_r_fu_1099_p2(16 - 1 downto 0);
    zext_ln160_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_604_p3),17));
    zext_ln197_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_942_p3),16));
    zext_ln56_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_1_fu_636_p3),17));
    zext_ln56_2_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_2_fu_644_p3),17));
    zext_ln56_3_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_3_fu_652_p3),17));
    zext_ln56_4_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_4_fu_660_p3),17));
    zext_ln56_5_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_5_fu_668_p3),17));
    zext_ln56_6_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_6_fu_676_p3),17));
    zext_ln56_7_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_7_fu_684_p3),17));
    zext_ln56_8_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_8_fu_692_p3),17));
    zext_ln56_9_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_9_fu_700_p3),17));
    zext_ln56_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_fu_628_p3),17));
    zext_ln59_1_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL1_1_fu_730_p2),18));
    zext_ln59_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL1_fu_716_p2),18));
    zext_ln60_1_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL1_3_fu_758_p2),18));
    zext_ln60_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL1_2_fu_744_p2),18));
    zext_ln61_1_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL2_1_reg_1217),19));
    zext_ln61_2_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_fu_1054_p2),20));
    zext_ln61_3_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL1_4_reg_1207),20));
    zext_ln61_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL2_reg_1212),19));
    zext_ln63_1_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_1077_p4),17));
    zext_ln63_2_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_1077_p4),16));
    zext_ln63_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln63_fu_1073_p1),17));
end behav;
