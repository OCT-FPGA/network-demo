// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rxEngPacketDropper (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rthDropFifo_V_dout,
        rthDropFifo_V_empty_n,
        rthDropFifo_V_read,
        ureDataPayload_V_dout,
        ureDataPayload_V_empty_n,
        ureDataPayload_V_read,
        DataOutApp_TREADY,
        DataOutApp_TDATA,
        DataOutApp_TVALID,
        DataOutApp_TKEEP,
        DataOutApp_TDEST,
        DataOutApp_TLAST,
        DataOutApp_TUSER
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [112:0] rthDropFifo_V_dout;
input   rthDropFifo_V_empty_n;
output   rthDropFifo_V_read;
input  [576:0] ureDataPayload_V_dout;
input   ureDataPayload_V_empty_n;
output   ureDataPayload_V_read;
input   DataOutApp_TREADY;
output  [511:0] DataOutApp_TDATA;
output   DataOutApp_TVALID;
output  [63:0] DataOutApp_TKEEP;
output  [15:0] DataOutApp_TDEST;
output  [0:0] DataOutApp_TLAST;
output  [95:0] DataOutApp_TUSER;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rthDropFifo_V_read;
reg ureDataPayload_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_7_nbreadreq_fu_100_p3;
reg    ap_predicate_op9_read_state1;
wire   [0:0] tmp_nbreadreq_fu_114_p3;
reg    ap_predicate_op25_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] repd_state_load_reg_311;
reg   [0:0] tmp_reg_323;
reg   [0:0] response_drop_V_load_reg_315;
reg    ap_predicate_op37_write_state2;
reg    ap_block_state2_io;
wire    regslice_both_repdDataOut_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] repd_state_load_reg_311_pp0_iter1_reg;
reg   [0:0] tmp_reg_323_pp0_iter1_reg;
reg   [0:0] response_drop_V_load_reg_315_pp0_iter1_reg;
reg    ap_predicate_op45_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] repd_state;
reg   [0:0] response_drop_V;
reg   [15:0] response_id_V;
reg   [31:0] response_user_myIP_V;
reg   [31:0] response_user_theirI;
reg   [15:0] response_user_myPort;
reg   [15:0] response_user_theirP;
reg    DataOutApp_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    rthDropFifo_V_blk_n;
reg    ureDataPayload_V_blk_n;
wire   [511:0] tmp_data_V_fu_249_p1;
reg   [511:0] tmp_data_V_reg_327;
reg   [63:0] tmp_keep_V_reg_332;
wire   [0:0] tmp_last_V_fu_263_p3;
reg   [0:0] tmp_last_V_reg_337;
reg    ap_block_pp0_stage0_subdone;
wire   [15:0] trunc_ln321_1_fu_155_p1;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    DataOutApp_TVALID_int;
wire    DataOutApp_TREADY_int;
wire    regslice_both_repdDataOut_V_data_V_U_vld_out;
wire    regslice_both_repdDataOut_V_keep_V_U_apdone_blk;
wire    regslice_both_repdDataOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_repdDataOut_V_keep_V_U_vld_out;
wire    regslice_both_repdDataOut_V_dest_V_U_apdone_blk;
wire    regslice_both_repdDataOut_V_dest_V_U_ack_in_dummy;
wire    regslice_both_repdDataOut_V_dest_V_U_vld_out;
wire    regslice_both_repdDataOut_V_last_V_U_apdone_blk;
wire    regslice_both_repdDataOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_repdDataOut_V_last_V_U_vld_out;
wire    regslice_both_repdDataOut_V_user_U_apdone_blk;
wire   [95:0] DataOutApp_TUSER_int;
wire    regslice_both_repdDataOut_V_user_U_ack_in_dummy;
wire    regslice_both_repdDataOut_V_user_U_vld_out;
reg    ap_condition_181;
reg    ap_condition_113;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 repd_state = 1'd0;
#0 response_drop_V = 1'd0;
#0 response_id_V = 16'd0;
#0 response_user_myIP_V = 32'd0;
#0 response_user_theirI = 32'd0;
#0 response_user_myPort = 16'd0;
#0 response_user_theirP = 16'd0;
end

regslice_both #(
    .DataWidth( 512 ))
regslice_both_repdDataOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_data_V_reg_327),
    .vld_in(DataOutApp_TVALID_int),
    .ack_in(DataOutApp_TREADY_int),
    .data_out(DataOutApp_TDATA),
    .vld_out(regslice_both_repdDataOut_V_data_V_U_vld_out),
    .ack_out(DataOutApp_TREADY),
    .apdone_blk(regslice_both_repdDataOut_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_repdDataOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_keep_V_reg_332),
    .vld_in(DataOutApp_TVALID_int),
    .ack_in(regslice_both_repdDataOut_V_keep_V_U_ack_in_dummy),
    .data_out(DataOutApp_TKEEP),
    .vld_out(regslice_both_repdDataOut_V_keep_V_U_vld_out),
    .ack_out(DataOutApp_TREADY),
    .apdone_blk(regslice_both_repdDataOut_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_repdDataOut_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(response_id_V),
    .vld_in(DataOutApp_TVALID_int),
    .ack_in(regslice_both_repdDataOut_V_dest_V_U_ack_in_dummy),
    .data_out(DataOutApp_TDEST),
    .vld_out(regslice_both_repdDataOut_V_dest_V_U_vld_out),
    .ack_out(DataOutApp_TREADY),
    .apdone_blk(regslice_both_repdDataOut_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_repdDataOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_last_V_reg_337),
    .vld_in(DataOutApp_TVALID_int),
    .ack_in(regslice_both_repdDataOut_V_last_V_U_ack_in_dummy),
    .data_out(DataOutApp_TLAST),
    .vld_out(regslice_both_repdDataOut_V_last_V_U_vld_out),
    .ack_out(DataOutApp_TREADY),
    .apdone_blk(regslice_both_repdDataOut_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 96 ))
regslice_both_repdDataOut_V_user_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(DataOutApp_TUSER_int),
    .vld_in(DataOutApp_TVALID_int),
    .ack_in(regslice_both_repdDataOut_V_user_U_ack_in_dummy),
    .data_out(DataOutApp_TUSER),
    .vld_out(regslice_both_repdDataOut_V_user_U_vld_out),
    .ack_out(DataOutApp_TREADY),
    .apdone_blk(regslice_both_repdDataOut_V_user_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_113)) begin
        if ((1'b1 == ap_condition_181)) begin
            repd_state <= 1'd0;
        end else if (((tmp_7_nbreadreq_fu_100_p3 == 1'd1) & (repd_state == 1'd0))) begin
            repd_state <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        repd_state_load_reg_311 <= repd_state;
        repd_state_load_reg_311_pp0_iter1_reg <= repd_state_load_reg_311;
        response_drop_V_load_reg_315 <= response_drop_V;
        response_drop_V_load_reg_315_pp0_iter1_reg <= response_drop_V_load_reg_315;
        tmp_reg_323_pp0_iter1_reg <= tmp_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_nbreadreq_fu_100_p3 == 1'd1) & (repd_state == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        response_drop_V <= rthDropFifo_V_dout[32'd112];
        response_id_V <= trunc_ln321_1_fu_155_p1;
        response_user_myIP_V <= {{rthDropFifo_V_dout[47:16]}};
        response_user_myPort <= {{rthDropFifo_V_dout[95:80]}};
        response_user_theirI <= {{rthDropFifo_V_dout[79:48]}};
        response_user_theirP <= {{rthDropFifo_V_dout[111:96]}};
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_114_p3 == 1'd1) & (repd_state == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_reg_327 <= tmp_data_V_fu_249_p1;
        tmp_keep_V_reg_332 <= {{ureDataPayload_V_dout[575:512]}};
        tmp_last_V_reg_337 <= ureDataPayload_V_dout[32'd576];
    end
end

always @ (posedge ap_clk) begin
    if (((repd_state == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_323 <= tmp_nbreadreq_fu_114_p3;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op45_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        DataOutApp_TDATA_blk_n = DataOutApp_TREADY_int;
    end else begin
        DataOutApp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        DataOutApp_TVALID_int = 1'b1;
    end else begin
        DataOutApp_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        rthDropFifo_V_blk_n = rthDropFifo_V_empty_n;
    end else begin
        rthDropFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rthDropFifo_V_read = 1'b1;
    end else begin
        rthDropFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op25_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ureDataPayload_V_blk_n = ureDataPayload_V_empty_n;
    end else begin
        ureDataPayload_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op25_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ureDataPayload_V_read = 1'b1;
    end else begin
        ureDataPayload_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DataOutApp_TUSER_int = {{{{response_user_theirP}, {response_user_myPort}}, {response_user_theirI}}, {response_user_myIP_V}};

assign DataOutApp_TVALID = regslice_both_repdDataOut_V_data_V_U_vld_out;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((regslice_both_repdDataOut_V_data_V_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ureDataPayload_V_empty_n == 1'b0) & (ap_predicate_op25_read_state1 == 1'b1)) | ((rthDropFifo_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ureDataPayload_V_empty_n == 1'b0) & (ap_predicate_op25_read_state1 == 1'b1)) | ((rthDropFifo_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_repdDataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ureDataPayload_V_empty_n == 1'b0) & (ap_predicate_op25_read_state1 == 1'b1)) | ((rthDropFifo_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_repdDataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ureDataPayload_V_empty_n == 1'b0) & (ap_predicate_op25_read_state1 == 1'b1)) | ((rthDropFifo_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == DataOutApp_TREADY_int) & (ap_predicate_op37_write_state2 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'b0 == DataOutApp_TREADY_int) & (ap_predicate_op45_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (regslice_both_repdDataOut_V_data_V_U_apdone_blk == 1'b1);
end

always @ (*) begin
    ap_condition_113 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_181 = ((tmp_nbreadreq_fu_114_p3 == 1'd1) & (tmp_last_V_fu_263_p3 == 1'd1) & (repd_state == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op25_read_state1 = ((tmp_nbreadreq_fu_114_p3 == 1'd1) & (repd_state == 1'd1));
end

always @ (*) begin
    ap_predicate_op37_write_state2 = ((tmp_reg_323 == 1'd1) & (repd_state_load_reg_311 == 1'd1) & (response_drop_V_load_reg_315 == 1'd0));
end

always @ (*) begin
    ap_predicate_op45_write_state3 = ((tmp_reg_323_pp0_iter1_reg == 1'd1) & (repd_state_load_reg_311_pp0_iter1_reg == 1'd1) & (response_drop_V_load_reg_315_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op9_read_state1 = ((tmp_7_nbreadreq_fu_100_p3 == 1'd1) & (repd_state == 1'd0));
end

assign tmp_7_nbreadreq_fu_100_p3 = rthDropFifo_V_empty_n;

assign tmp_data_V_fu_249_p1 = ureDataPayload_V_dout[511:0];

assign tmp_last_V_fu_263_p3 = ureDataPayload_V_dout[32'd576];

assign tmp_nbreadreq_fu_114_p3 = ureDataPayload_V_empty_n;

assign trunc_ln321_1_fu_155_p1 = rthDropFifo_V_dout[15:0];

endmodule //rxEngPacketDropper
