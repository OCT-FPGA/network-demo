// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _appGetMetaData_HH_
#define _appGetMetaData_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "keep2len.h"

namespace ap_rtl {

struct appGetMetaData : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > DataInApp_TVALID;
    sc_out< sc_lv<16> > agmdIdOut_V_V_din;
    sc_in< sc_logic > agmdIdOut_V_V_full_n;
    sc_out< sc_logic > agmdIdOut_V_V_write;
    sc_out< sc_lv<577> > agmdDataOut_V_din;
    sc_in< sc_logic > agmdDataOut_V_full_n;
    sc_out< sc_logic > agmdDataOut_V_write;
    sc_out< sc_lv<16> > agmdpayloadLenOut_V_s_din;
    sc_in< sc_logic > agmdpayloadLenOut_V_s_full_n;
    sc_out< sc_logic > agmdpayloadLenOut_V_s_write;
    sc_in< sc_lv<512> > DataInApp_TDATA;
    sc_out< sc_logic > DataInApp_TREADY;
    sc_in< sc_lv<64> > DataInApp_TKEEP;
    sc_in< sc_lv<16> > DataInApp_TDEST;
    sc_in< sc_lv<1> > DataInApp_TLAST;
    sc_in< sc_lv<96> > DataInApp_TUSER;


    // Module declarations
    appGetMetaData(sc_module_name name);
    SC_HAS_PROCESS(appGetMetaData);

    ~appGetMetaData();

    sc_trace_file* mVcdFile;

    keep2len* grp_keep2len_fu_113;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_62_p7;
    sc_signal< bool > ap_predicate_op7_read_state1;
    sc_signal< bool > ap_predicate_op15_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > agmd_state_load_reg_221;
    sc_signal< sc_lv<1> > tmp_reg_225;
    sc_signal< bool > ap_predicate_op27_write_state2;
    sc_signal< bool > ap_predicate_op29_write_state2;
    sc_signal< sc_lv<1> > tmp_last_V_5_reg_234;
    sc_signal< bool > ap_predicate_op34_write_state2;
    sc_signal< bool > ap_predicate_op39_write_state2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_239;
    sc_signal< bool > ap_predicate_op46_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > agmd_state;
    sc_signal< sc_lv<16> > lenCount_V;
    sc_signal< sc_logic > DataInApp_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > agmdIdOut_V_V_blk_n;
    sc_signal< sc_logic > agmdDataOut_V_blk_n;
    sc_signal< sc_logic > agmdpayloadLenOut_V_s_blk_n;
    sc_signal< sc_lv<512> > reg_131;
    sc_signal< sc_lv<64> > reg_135;
    sc_signal< sc_lv<7> > grp_keep2len_fu_113_ap_return;
    sc_signal< sc_lv<7> > reg_139;
    sc_signal< sc_lv<1> > grp_fu_127_p1;
    sc_signal< sc_lv<16> > tmp_dest_V_reg_229;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > grp_keep2len_fu_113_ap_ready;
    sc_signal< sc_lv<16> > add_ln700_fu_198_p2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<577> > tmp12_fu_167_p4;
    sc_signal< sc_lv<577> > tmp_1_fu_188_p4;
    sc_signal< sc_lv<16> > tmp_V_2_fu_183_p1;
    sc_signal< sc_lv<16> > tmp_V_1_fu_214_p2;
    sc_signal< sc_lv<16> > zext_ln209_fu_210_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_202;
    sc_signal< bool > ap_condition_292;
    sc_signal< bool > ap_condition_299;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<16> ap_const_lv16_40;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_DataInApp_TDATA_blk_n();
    void thread_DataInApp_TREADY();
    void thread_add_ln700_fu_198_p2();
    void thread_agmdDataOut_V_blk_n();
    void thread_agmdDataOut_V_din();
    void thread_agmdDataOut_V_write();
    void thread_agmdIdOut_V_V_blk_n();
    void thread_agmdIdOut_V_V_din();
    void thread_agmdIdOut_V_V_write();
    void thread_agmdpayloadLenOut_V_s_blk_n();
    void thread_agmdpayloadLenOut_V_s_din();
    void thread_agmdpayloadLenOut_V_s_write();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_202();
    void thread_ap_condition_292();
    void thread_ap_condition_299();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op15_read_state1();
    void thread_ap_predicate_op27_write_state2();
    void thread_ap_predicate_op29_write_state2();
    void thread_ap_predicate_op34_write_state2();
    void thread_ap_predicate_op39_write_state2();
    void thread_ap_predicate_op46_write_state2();
    void thread_ap_predicate_op7_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_grp_fu_127_p1();
    void thread_tmp12_fu_167_p4();
    void thread_tmp_1_fu_188_p4();
    void thread_tmp_V_1_fu_214_p2();
    void thread_tmp_V_2_fu_183_p1();
    void thread_tmp_nbreadreq_fu_62_p7();
    void thread_zext_ln209_fu_210_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
