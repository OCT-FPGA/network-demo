// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rxEngPacketDropper.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rxEngPacketDropper::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rxEngPacketDropper::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> rxEngPacketDropper::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool rxEngPacketDropper::ap_const_boolean_1 = true;
const sc_lv<1> rxEngPacketDropper::ap_const_lv1_0 = "0";
const sc_lv<1> rxEngPacketDropper::ap_const_lv1_1 = "1";
const bool rxEngPacketDropper::ap_const_boolean_0 = false;
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_10 = "10000";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_2F = "101111";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_30 = "110000";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_4F = "1001111";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_50 = "1010000";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_5F = "1011111";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_60 = "1100000";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_6F = "1101111";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_70 = "1110000";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_200 = "1000000000";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_23F = "1000111111";
const sc_lv<32> rxEngPacketDropper::ap_const_lv32_240 = "1001000000";

rxEngPacketDropper::rxEngPacketDropper(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_repdDataOut_V_data_V_U = new regslice_both<512>("regslice_both_repdDataOut_V_data_V_U");
    regslice_both_repdDataOut_V_data_V_U->ap_clk(ap_clk);
    regslice_both_repdDataOut_V_data_V_U->ap_rst(ap_rst);
    regslice_both_repdDataOut_V_data_V_U->data_in(tmp_data_V_reg_327);
    regslice_both_repdDataOut_V_data_V_U->vld_in(DataOutApp_TVALID_int);
    regslice_both_repdDataOut_V_data_V_U->ack_in(DataOutApp_TREADY_int);
    regslice_both_repdDataOut_V_data_V_U->data_out(DataOutApp_TDATA);
    regslice_both_repdDataOut_V_data_V_U->vld_out(regslice_both_repdDataOut_V_data_V_U_vld_out);
    regslice_both_repdDataOut_V_data_V_U->ack_out(DataOutApp_TREADY);
    regslice_both_repdDataOut_V_data_V_U->apdone_blk(regslice_both_repdDataOut_V_data_V_U_apdone_blk);
    regslice_both_repdDataOut_V_keep_V_U = new regslice_both<64>("regslice_both_repdDataOut_V_keep_V_U");
    regslice_both_repdDataOut_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_repdDataOut_V_keep_V_U->ap_rst(ap_rst);
    regslice_both_repdDataOut_V_keep_V_U->data_in(tmp_keep_V_reg_332);
    regslice_both_repdDataOut_V_keep_V_U->vld_in(DataOutApp_TVALID_int);
    regslice_both_repdDataOut_V_keep_V_U->ack_in(regslice_both_repdDataOut_V_keep_V_U_ack_in_dummy);
    regslice_both_repdDataOut_V_keep_V_U->data_out(DataOutApp_TKEEP);
    regslice_both_repdDataOut_V_keep_V_U->vld_out(regslice_both_repdDataOut_V_keep_V_U_vld_out);
    regslice_both_repdDataOut_V_keep_V_U->ack_out(DataOutApp_TREADY);
    regslice_both_repdDataOut_V_keep_V_U->apdone_blk(regslice_both_repdDataOut_V_keep_V_U_apdone_blk);
    regslice_both_repdDataOut_V_dest_V_U = new regslice_both<16>("regslice_both_repdDataOut_V_dest_V_U");
    regslice_both_repdDataOut_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_repdDataOut_V_dest_V_U->ap_rst(ap_rst);
    regslice_both_repdDataOut_V_dest_V_U->data_in(response_id_V);
    regslice_both_repdDataOut_V_dest_V_U->vld_in(DataOutApp_TVALID_int);
    regslice_both_repdDataOut_V_dest_V_U->ack_in(regslice_both_repdDataOut_V_dest_V_U_ack_in_dummy);
    regslice_both_repdDataOut_V_dest_V_U->data_out(DataOutApp_TDEST);
    regslice_both_repdDataOut_V_dest_V_U->vld_out(regslice_both_repdDataOut_V_dest_V_U_vld_out);
    regslice_both_repdDataOut_V_dest_V_U->ack_out(DataOutApp_TREADY);
    regslice_both_repdDataOut_V_dest_V_U->apdone_blk(regslice_both_repdDataOut_V_dest_V_U_apdone_blk);
    regslice_both_repdDataOut_V_last_V_U = new regslice_both<1>("regslice_both_repdDataOut_V_last_V_U");
    regslice_both_repdDataOut_V_last_V_U->ap_clk(ap_clk);
    regslice_both_repdDataOut_V_last_V_U->ap_rst(ap_rst);
    regslice_both_repdDataOut_V_last_V_U->data_in(tmp_last_V_reg_337);
    regslice_both_repdDataOut_V_last_V_U->vld_in(DataOutApp_TVALID_int);
    regslice_both_repdDataOut_V_last_V_U->ack_in(regslice_both_repdDataOut_V_last_V_U_ack_in_dummy);
    regslice_both_repdDataOut_V_last_V_U->data_out(DataOutApp_TLAST);
    regslice_both_repdDataOut_V_last_V_U->vld_out(regslice_both_repdDataOut_V_last_V_U_vld_out);
    regslice_both_repdDataOut_V_last_V_U->ack_out(DataOutApp_TREADY);
    regslice_both_repdDataOut_V_last_V_U->apdone_blk(regslice_both_repdDataOut_V_last_V_U_apdone_blk);
    regslice_both_repdDataOut_V_user_U = new regslice_both<96>("regslice_both_repdDataOut_V_user_U");
    regslice_both_repdDataOut_V_user_U->ap_clk(ap_clk);
    regslice_both_repdDataOut_V_user_U->ap_rst(ap_rst);
    regslice_both_repdDataOut_V_user_U->data_in(DataOutApp_TUSER_int);
    regslice_both_repdDataOut_V_user_U->vld_in(DataOutApp_TVALID_int);
    regslice_both_repdDataOut_V_user_U->ack_in(regslice_both_repdDataOut_V_user_U_ack_in_dummy);
    regslice_both_repdDataOut_V_user_U->data_out(DataOutApp_TUSER);
    regslice_both_repdDataOut_V_user_U->vld_out(regslice_both_repdDataOut_V_user_U_vld_out);
    regslice_both_repdDataOut_V_user_U->ack_out(DataOutApp_TREADY);
    regslice_both_repdDataOut_V_user_U->apdone_blk(regslice_both_repdDataOut_V_user_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_DataOutApp_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( ap_predicate_op45_write_state3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( DataOutApp_TREADY_int );

    SC_METHOD(thread_DataOutApp_TUSER_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( response_user_myIP_V );
    sensitive << ( response_user_theirI );
    sensitive << ( response_user_myPort );
    sensitive << ( response_user_theirP );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_DataOutApp_TVALID);
    sensitive << ( regslice_both_repdDataOut_V_data_V_U_vld_out );

    SC_METHOD(thread_DataOutApp_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( rthDropFifo_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ureDataPayload_V_empty_n );
    sensitive << ( ap_predicate_op25_read_state1 );
    sensitive << ( regslice_both_repdDataOut_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( rthDropFifo_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ureDataPayload_V_empty_n );
    sensitive << ( ap_predicate_op25_read_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_repdDataOut_V_data_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( rthDropFifo_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ureDataPayload_V_empty_n );
    sensitive << ( ap_predicate_op25_read_state1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_repdDataOut_V_data_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( rthDropFifo_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ureDataPayload_V_empty_n );
    sensitive << ( ap_predicate_op25_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( DataOutApp_TREADY_int );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_predicate_op45_write_state3 );
    sensitive << ( DataOutApp_TREADY_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( regslice_both_repdDataOut_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_condition_113);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_181);
    sensitive << ( tmp_nbreadreq_fu_114_p3 );
    sensitive << ( repd_state );
    sensitive << ( tmp_last_V_fu_263_p3 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op25_read_state1);
    sensitive << ( tmp_nbreadreq_fu_114_p3 );
    sensitive << ( repd_state );

    SC_METHOD(thread_ap_predicate_op37_write_state2);
    sensitive << ( repd_state_load_reg_311 );
    sensitive << ( tmp_reg_323 );
    sensitive << ( response_drop_V_load_reg_315 );

    SC_METHOD(thread_ap_predicate_op45_write_state3);
    sensitive << ( repd_state_load_reg_311_pp0_iter1_reg );
    sensitive << ( tmp_reg_323_pp0_iter1_reg );
    sensitive << ( response_drop_V_load_reg_315_pp0_iter1_reg );

    SC_METHOD(thread_ap_predicate_op9_read_state1);
    sensitive << ( tmp_7_nbreadreq_fu_100_p3 );
    sensitive << ( repd_state );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_rthDropFifo_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( rthDropFifo_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_rthDropFifo_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_7_nbreadreq_fu_100_p3);
    sensitive << ( rthDropFifo_V_empty_n );

    SC_METHOD(thread_tmp_data_V_fu_249_p1);
    sensitive << ( ureDataPayload_V_dout );

    SC_METHOD(thread_tmp_last_V_fu_263_p3);
    sensitive << ( ureDataPayload_V_dout );

    SC_METHOD(thread_tmp_nbreadreq_fu_114_p3);
    sensitive << ( ureDataPayload_V_empty_n );

    SC_METHOD(thread_trunc_ln321_1_fu_155_p1);
    sensitive << ( rthDropFifo_V_dout );

    SC_METHOD(thread_ureDataPayload_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ureDataPayload_V_empty_n );
    sensitive << ( ap_predicate_op25_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ureDataPayload_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op25_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    repd_state = "0";
    response_drop_V = "0";
    response_id_V = "0000000000000000";
    response_user_myIP_V = "00000000000000000000000000000000";
    response_user_theirI = "00000000000000000000000000000000";
    response_user_myPort = "0000000000000000";
    response_user_theirP = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rxEngPacketDropper_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rthDropFifo_V_dout, "(port)rthDropFifo_V_dout");
    sc_trace(mVcdFile, rthDropFifo_V_empty_n, "(port)rthDropFifo_V_empty_n");
    sc_trace(mVcdFile, rthDropFifo_V_read, "(port)rthDropFifo_V_read");
    sc_trace(mVcdFile, ureDataPayload_V_dout, "(port)ureDataPayload_V_dout");
    sc_trace(mVcdFile, ureDataPayload_V_empty_n, "(port)ureDataPayload_V_empty_n");
    sc_trace(mVcdFile, ureDataPayload_V_read, "(port)ureDataPayload_V_read");
    sc_trace(mVcdFile, DataOutApp_TREADY, "(port)DataOutApp_TREADY");
    sc_trace(mVcdFile, DataOutApp_TDATA, "(port)DataOutApp_TDATA");
    sc_trace(mVcdFile, DataOutApp_TVALID, "(port)DataOutApp_TVALID");
    sc_trace(mVcdFile, DataOutApp_TKEEP, "(port)DataOutApp_TKEEP");
    sc_trace(mVcdFile, DataOutApp_TDEST, "(port)DataOutApp_TDEST");
    sc_trace(mVcdFile, DataOutApp_TLAST, "(port)DataOutApp_TLAST");
    sc_trace(mVcdFile, DataOutApp_TUSER, "(port)DataOutApp_TUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, tmp_7_nbreadreq_fu_100_p3, "tmp_7_nbreadreq_fu_100_p3");
    sc_trace(mVcdFile, ap_predicate_op9_read_state1, "ap_predicate_op9_read_state1");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_114_p3, "tmp_nbreadreq_fu_114_p3");
    sc_trace(mVcdFile, ap_predicate_op25_read_state1, "ap_predicate_op25_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, repd_state_load_reg_311, "repd_state_load_reg_311");
    sc_trace(mVcdFile, tmp_reg_323, "tmp_reg_323");
    sc_trace(mVcdFile, response_drop_V_load_reg_315, "response_drop_V_load_reg_315");
    sc_trace(mVcdFile, ap_predicate_op37_write_state2, "ap_predicate_op37_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_data_V_U_apdone_blk, "regslice_both_repdDataOut_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, repd_state_load_reg_311_pp0_iter1_reg, "repd_state_load_reg_311_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_reg_323_pp0_iter1_reg, "tmp_reg_323_pp0_iter1_reg");
    sc_trace(mVcdFile, response_drop_V_load_reg_315_pp0_iter1_reg, "response_drop_V_load_reg_315_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_predicate_op45_write_state3, "ap_predicate_op45_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, repd_state, "repd_state");
    sc_trace(mVcdFile, response_drop_V, "response_drop_V");
    sc_trace(mVcdFile, response_id_V, "response_id_V");
    sc_trace(mVcdFile, response_user_myIP_V, "response_user_myIP_V");
    sc_trace(mVcdFile, response_user_theirI, "response_user_theirI");
    sc_trace(mVcdFile, response_user_myPort, "response_user_myPort");
    sc_trace(mVcdFile, response_user_theirP, "response_user_theirP");
    sc_trace(mVcdFile, DataOutApp_TDATA_blk_n, "DataOutApp_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, rthDropFifo_V_blk_n, "rthDropFifo_V_blk_n");
    sc_trace(mVcdFile, ureDataPayload_V_blk_n, "ureDataPayload_V_blk_n");
    sc_trace(mVcdFile, tmp_data_V_fu_249_p1, "tmp_data_V_fu_249_p1");
    sc_trace(mVcdFile, tmp_data_V_reg_327, "tmp_data_V_reg_327");
    sc_trace(mVcdFile, tmp_keep_V_reg_332, "tmp_keep_V_reg_332");
    sc_trace(mVcdFile, tmp_last_V_fu_263_p3, "tmp_last_V_fu_263_p3");
    sc_trace(mVcdFile, tmp_last_V_reg_337, "tmp_last_V_reg_337");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, trunc_ln321_1_fu_155_p1, "trunc_ln321_1_fu_155_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, DataOutApp_TVALID_int, "DataOutApp_TVALID_int");
    sc_trace(mVcdFile, DataOutApp_TREADY_int, "DataOutApp_TREADY_int");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_data_V_U_vld_out, "regslice_both_repdDataOut_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_keep_V_U_apdone_blk, "regslice_both_repdDataOut_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_keep_V_U_ack_in_dummy, "regslice_both_repdDataOut_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_keep_V_U_vld_out, "regslice_both_repdDataOut_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_dest_V_U_apdone_blk, "regslice_both_repdDataOut_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_dest_V_U_ack_in_dummy, "regslice_both_repdDataOut_V_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_dest_V_U_vld_out, "regslice_both_repdDataOut_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_last_V_U_apdone_blk, "regslice_both_repdDataOut_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_last_V_U_ack_in_dummy, "regslice_both_repdDataOut_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_last_V_U_vld_out, "regslice_both_repdDataOut_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_user_U_apdone_blk, "regslice_both_repdDataOut_V_user_U_apdone_blk");
    sc_trace(mVcdFile, DataOutApp_TUSER_int, "DataOutApp_TUSER_int");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_user_U_ack_in_dummy, "regslice_both_repdDataOut_V_user_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_repdDataOut_V_user_U_vld_out, "regslice_both_repdDataOut_V_user_U_vld_out");
    sc_trace(mVcdFile, ap_condition_181, "ap_condition_181");
    sc_trace(mVcdFile, ap_condition_113, "ap_condition_113");
#endif

    }
}

rxEngPacketDropper::~rxEngPacketDropper() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_repdDataOut_V_data_V_U;
    delete regslice_both_repdDataOut_V_keep_V_U;
    delete regslice_both_repdDataOut_V_dest_V_U;
    delete regslice_both_repdDataOut_V_last_V_U;
    delete regslice_both_repdDataOut_V_user_U;
}

void rxEngPacketDropper::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_113.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_condition_181.read(), ap_const_boolean_1)) {
            repd_state = ap_const_lv1_0;
        } else if ((esl_seteq<1,1,1>(repd_state.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(tmp_7_nbreadreq_fu_100_p3.read(), ap_const_lv1_1))) {
            repd_state = ap_const_lv1_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        repd_state_load_reg_311 = repd_state.read();
        repd_state_load_reg_311_pp0_iter1_reg = repd_state_load_reg_311.read();
        response_drop_V_load_reg_315 = response_drop_V.read();
        response_drop_V_load_reg_315_pp0_iter1_reg = response_drop_V_load_reg_315.read();
        tmp_reg_323_pp0_iter1_reg = tmp_reg_323.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(repd_state.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_7_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        response_drop_V = rthDropFifo_V_dout.read().range(112, 112);
        response_id_V = trunc_ln321_1_fu_155_p1.read();
        response_user_myIP_V = rthDropFifo_V_dout.read().range(47, 16);
        response_user_myPort = rthDropFifo_V_dout.read().range(95, 80);
        response_user_theirI = rthDropFifo_V_dout.read().range(79, 48);
        response_user_theirP = rthDropFifo_V_dout.read().range(111, 96);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(repd_state.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_114_p3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_data_V_reg_327 = tmp_data_V_fu_249_p1.read();
        tmp_keep_V_reg_332 = ureDataPayload_V_dout.read().range(575, 512);
        tmp_last_V_reg_337 = ureDataPayload_V_dout.read().range(576, 576);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(repd_state.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_323 = tmp_nbreadreq_fu_114_p3.read();
    }
}

void rxEngPacketDropper::thread_DataOutApp_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        DataOutApp_TDATA_blk_n = DataOutApp_TREADY_int.read();
    } else {
        DataOutApp_TDATA_blk_n = ap_const_logic_1;
    }
}

void rxEngPacketDropper::thread_DataOutApp_TUSER_int() {
    DataOutApp_TUSER_int = esl_concat<64,32>(esl_concat<32,32>(esl_concat<16,16>(response_user_theirP.read(), response_user_myPort.read()), response_user_theirI.read()), response_user_myIP_V.read());
}

void rxEngPacketDropper::thread_DataOutApp_TVALID() {
    DataOutApp_TVALID = regslice_both_repdDataOut_V_data_V_U_vld_out.read();
}

void rxEngPacketDropper::thread_DataOutApp_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        DataOutApp_TVALID_int = ap_const_logic_1;
    } else {
        DataOutApp_TVALID_int = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void rxEngPacketDropper::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rxEngPacketDropper::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, rthDropFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ureDataPayload_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_repdDataOut_V_data_V_U_apdone_blk.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void rxEngPacketDropper::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, rthDropFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ureDataPayload_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_repdDataOut_V_data_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void rxEngPacketDropper::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, rthDropFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, ureDataPayload_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_repdDataOut_V_data_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void rxEngPacketDropper::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, rthDropFifo_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ureDataPayload_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void rxEngPacketDropper::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, DataOutApp_TREADY_int.read()));
}

void rxEngPacketDropper::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rxEngPacketDropper::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op45_write_state3.read()) && esl_seteq<1,1,1>(ap_const_logic_0, DataOutApp_TREADY_int.read()));
}

void rxEngPacketDropper::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_repdDataOut_V_data_V_U_apdone_blk.read());
}

void rxEngPacketDropper::thread_ap_condition_113() {
    ap_condition_113 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void rxEngPacketDropper::thread_ap_condition_181() {
    ap_condition_181 = (esl_seteq<1,1,1>(repd_state.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_114_p3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_263_p3.read()));
}

void rxEngPacketDropper::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void rxEngPacketDropper::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void rxEngPacketDropper::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void rxEngPacketDropper::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_ap_predicate_op25_read_state1() {
    ap_predicate_op25_read_state1 = (esl_seteq<1,1,1>(repd_state.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_nbreadreq_fu_114_p3.read()));
}

void rxEngPacketDropper::thread_ap_predicate_op37_write_state2() {
    ap_predicate_op37_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, repd_state_load_reg_311.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_323.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, response_drop_V_load_reg_315.read()));
}

void rxEngPacketDropper::thread_ap_predicate_op45_write_state3() {
    ap_predicate_op45_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_1, repd_state_load_reg_311_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_323_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, response_drop_V_load_reg_315_pp0_iter1_reg.read()));
}

void rxEngPacketDropper::thread_ap_predicate_op9_read_state1() {
    ap_predicate_op9_read_state1 = (esl_seteq<1,1,1>(repd_state.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_7_nbreadreq_fu_100_p3.read(), ap_const_lv1_1));
}

void rxEngPacketDropper::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_rthDropFifo_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        rthDropFifo_V_blk_n = rthDropFifo_V_empty_n.read();
    } else {
        rthDropFifo_V_blk_n = ap_const_logic_1;
    }
}

void rxEngPacketDropper::thread_rthDropFifo_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        rthDropFifo_V_read = ap_const_logic_1;
    } else {
        rthDropFifo_V_read = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_tmp_7_nbreadreq_fu_100_p3() {
    tmp_7_nbreadreq_fu_100_p3 =  (sc_lv<1>) ((rthDropFifo_V_empty_n.read()));
}

void rxEngPacketDropper::thread_tmp_data_V_fu_249_p1() {
    tmp_data_V_fu_249_p1 = ureDataPayload_V_dout.read().range(512-1, 0);
}

void rxEngPacketDropper::thread_tmp_last_V_fu_263_p3() {
    tmp_last_V_fu_263_p3 = ureDataPayload_V_dout.read().range(576, 576);
}

void rxEngPacketDropper::thread_tmp_nbreadreq_fu_114_p3() {
    tmp_nbreadreq_fu_114_p3 =  (sc_lv<1>) ((ureDataPayload_V_empty_n.read()));
}

void rxEngPacketDropper::thread_trunc_ln321_1_fu_155_p1() {
    trunc_ln321_1_fu_155_p1 = rthDropFifo_V_dout.read().range(16-1, 0);
}

void rxEngPacketDropper::thread_ureDataPayload_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ureDataPayload_V_blk_n = ureDataPayload_V_empty_n.read();
    } else {
        ureDataPayload_V_blk_n = ap_const_logic_1;
    }
}

void rxEngPacketDropper::thread_ureDataPayload_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op25_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ureDataPayload_V_read = ap_const_logic_1;
    } else {
        ureDataPayload_V_read = ap_const_logic_0;
    }
}

void rxEngPacketDropper::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

