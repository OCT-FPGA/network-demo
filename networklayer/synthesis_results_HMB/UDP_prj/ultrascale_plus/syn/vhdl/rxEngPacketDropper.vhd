-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rxEngPacketDropper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rthDropFifo_V_dout : IN STD_LOGIC_VECTOR (112 downto 0);
    rthDropFifo_V_empty_n : IN STD_LOGIC;
    rthDropFifo_V_read : OUT STD_LOGIC;
    ureDataPayload_V_dout : IN STD_LOGIC_VECTOR (576 downto 0);
    ureDataPayload_V_empty_n : IN STD_LOGIC;
    ureDataPayload_V_read : OUT STD_LOGIC;
    DataOutApp_TREADY : IN STD_LOGIC;
    DataOutApp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    DataOutApp_TVALID : OUT STD_LOGIC;
    DataOutApp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    DataOutApp_TDEST : OUT STD_LOGIC_VECTOR (15 downto 0);
    DataOutApp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    DataOutApp_TUSER : OUT STD_LOGIC_VECTOR (95 downto 0) );
end;


architecture behav of rxEngPacketDropper is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_7_nbreadreq_fu_100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op9_read_state1 : BOOLEAN;
    signal tmp_nbreadreq_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op25_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal repd_state_load_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal response_drop_V_load_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op37_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_repdDataOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal repd_state_load_reg_311_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_323_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal response_drop_V_load_reg_315_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op45_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal repd_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal response_drop_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal response_id_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal response_user_myIP_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal response_user_theirI : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal response_user_myPort : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal response_user_theirP : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal DataOutApp_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal rthDropFifo_V_blk_n : STD_LOGIC;
    signal ureDataPayload_V_blk_n : STD_LOGIC;
    signal tmp_data_V_fu_249_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_reg_327 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_keep_V_reg_332 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_last_V_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal trunc_ln321_1_fu_155_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal DataOutApp_TVALID_int : STD_LOGIC;
    signal DataOutApp_TREADY_int : STD_LOGIC;
    signal regslice_both_repdDataOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_repdDataOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_repdDataOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_repdDataOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_repdDataOut_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_repdDataOut_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_repdDataOut_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_repdDataOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_repdDataOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_repdDataOut_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_repdDataOut_V_user_U_apdone_blk : STD_LOGIC;
    signal DataOutApp_TUSER_int : STD_LOGIC_VECTOR (95 downto 0);
    signal regslice_both_repdDataOut_V_user_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_repdDataOut_V_user_U_vld_out : STD_LOGIC;
    signal ap_condition_181 : BOOLEAN;
    signal ap_condition_113 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_repdDataOut_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_data_V_reg_327,
        vld_in => DataOutApp_TVALID_int,
        ack_in => DataOutApp_TREADY_int,
        data_out => DataOutApp_TDATA,
        vld_out => regslice_both_repdDataOut_V_data_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_repdDataOut_V_data_V_U_apdone_blk);

    regslice_both_repdDataOut_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_keep_V_reg_332,
        vld_in => DataOutApp_TVALID_int,
        ack_in => regslice_both_repdDataOut_V_keep_V_U_ack_in_dummy,
        data_out => DataOutApp_TKEEP,
        vld_out => regslice_both_repdDataOut_V_keep_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_repdDataOut_V_keep_V_U_apdone_blk);

    regslice_both_repdDataOut_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => response_id_V,
        vld_in => DataOutApp_TVALID_int,
        ack_in => regslice_both_repdDataOut_V_dest_V_U_ack_in_dummy,
        data_out => DataOutApp_TDEST,
        vld_out => regslice_both_repdDataOut_V_dest_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_repdDataOut_V_dest_V_U_apdone_blk);

    regslice_both_repdDataOut_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_last_V_reg_337,
        vld_in => DataOutApp_TVALID_int,
        ack_in => regslice_both_repdDataOut_V_last_V_U_ack_in_dummy,
        data_out => DataOutApp_TLAST,
        vld_out => regslice_both_repdDataOut_V_last_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_repdDataOut_V_last_V_U_apdone_blk);

    regslice_both_repdDataOut_V_user_U : component regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => DataOutApp_TUSER_int,
        vld_in => DataOutApp_TVALID_int,
        ack_in => regslice_both_repdDataOut_V_user_U_ack_in_dummy,
        data_out => DataOutApp_TUSER,
        vld_out => regslice_both_repdDataOut_V_user_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_repdDataOut_V_user_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    repd_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_113)) then
                if ((ap_const_boolean_1 = ap_condition_181)) then 
                    repd_state <= ap_const_lv1_0;
                elsif (((tmp_7_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_0))) then 
                    repd_state <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                repd_state_load_reg_311 <= repd_state;
                repd_state_load_reg_311_pp0_iter1_reg <= repd_state_load_reg_311;
                response_drop_V_load_reg_315 <= response_drop_V;
                response_drop_V_load_reg_315_pp0_iter1_reg <= response_drop_V_load_reg_315;
                tmp_reg_323_pp0_iter1_reg <= tmp_reg_323;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                response_drop_V <= rthDropFifo_V_dout(112 downto 112);
                response_id_V <= trunc_ln321_1_fu_155_p1;
                response_user_myIP_V <= rthDropFifo_V_dout(47 downto 16);
                response_user_myPort <= rthDropFifo_V_dout(95 downto 80);
                response_user_theirI <= rthDropFifo_V_dout(79 downto 48);
                response_user_theirP <= rthDropFifo_V_dout(111 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_114_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_V_reg_327 <= tmp_data_V_fu_249_p1;
                tmp_keep_V_reg_332 <= ureDataPayload_V_dout(575 downto 512);
                tmp_last_V_reg_337 <= ureDataPayload_V_dout(576 downto 576);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((repd_state = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_323 <= tmp_nbreadreq_fu_114_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    DataOutApp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op37_write_state2, ap_predicate_op45_write_state3, ap_block_pp0_stage0, DataOutApp_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op37_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op45_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            DataOutApp_TDATA_blk_n <= DataOutApp_TREADY_int;
        else 
            DataOutApp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    DataOutApp_TUSER_int <= (((response_user_theirP & response_user_myPort) & response_user_theirI) & response_user_myIP_V);
    DataOutApp_TVALID <= regslice_both_repdDataOut_V_data_V_U_vld_out;

    DataOutApp_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op37_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op37_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            DataOutApp_TVALID_int <= ap_const_logic_1;
        else 
            DataOutApp_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter2, rthDropFifo_V_empty_n, ap_predicate_op9_read_state1, ureDataPayload_V_empty_n, ap_predicate_op25_read_state1, regslice_both_repdDataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((regslice_both_repdDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ureDataPayload_V_empty_n = ap_const_logic_0) and (ap_predicate_op25_read_state1 = ap_const_boolean_1)) or ((rthDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, rthDropFifo_V_empty_n, ap_predicate_op9_read_state1, ureDataPayload_V_empty_n, ap_predicate_op25_read_state1, ap_block_state2_io, regslice_both_repdDataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ureDataPayload_V_empty_n = ap_const_logic_0) and (ap_predicate_op25_read_state1 = ap_const_boolean_1)) or ((rthDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_repdDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, rthDropFifo_V_empty_n, ap_predicate_op9_read_state1, ureDataPayload_V_empty_n, ap_predicate_op25_read_state1, ap_block_state2_io, regslice_both_repdDataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ureDataPayload_V_empty_n = ap_const_logic_0) and (ap_predicate_op25_read_state1 = ap_const_boolean_1)) or ((rthDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_repdDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, rthDropFifo_V_empty_n, ap_predicate_op9_read_state1, ureDataPayload_V_empty_n, ap_predicate_op25_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ureDataPayload_V_empty_n = ap_const_logic_0) and (ap_predicate_op25_read_state1 = ap_const_boolean_1)) or ((rthDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(ap_predicate_op37_write_state2, DataOutApp_TREADY_int)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = DataOutApp_TREADY_int) and (ap_predicate_op37_write_state2 = ap_const_boolean_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(ap_predicate_op45_write_state3, DataOutApp_TREADY_int)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = DataOutApp_TREADY_int) and (ap_predicate_op45_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(regslice_both_repdDataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (regslice_both_repdDataOut_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_condition_113_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_113 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_181_assign_proc : process(tmp_nbreadreq_fu_114_p3, repd_state, tmp_last_V_fu_263_p3)
    begin
                ap_condition_181 <= ((tmp_nbreadreq_fu_114_p3 = ap_const_lv1_1) and (tmp_last_V_fu_263_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op25_read_state1_assign_proc : process(tmp_nbreadreq_fu_114_p3, repd_state)
    begin
                ap_predicate_op25_read_state1 <= ((tmp_nbreadreq_fu_114_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_1));
    end process;


    ap_predicate_op37_write_state2_assign_proc : process(repd_state_load_reg_311, tmp_reg_323, response_drop_V_load_reg_315)
    begin
                ap_predicate_op37_write_state2 <= ((tmp_reg_323 = ap_const_lv1_1) and (repd_state_load_reg_311 = ap_const_lv1_1) and (response_drop_V_load_reg_315 = ap_const_lv1_0));
    end process;


    ap_predicate_op45_write_state3_assign_proc : process(repd_state_load_reg_311_pp0_iter1_reg, tmp_reg_323_pp0_iter1_reg, response_drop_V_load_reg_315_pp0_iter1_reg)
    begin
                ap_predicate_op45_write_state3 <= ((tmp_reg_323_pp0_iter1_reg = ap_const_lv1_1) and (repd_state_load_reg_311_pp0_iter1_reg = ap_const_lv1_1) and (response_drop_V_load_reg_315_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op9_read_state1_assign_proc : process(tmp_7_nbreadreq_fu_100_p3, repd_state)
    begin
                ap_predicate_op9_read_state1 <= ((tmp_7_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    rthDropFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, rthDropFifo_V_empty_n, ap_predicate_op9_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            rthDropFifo_V_blk_n <= rthDropFifo_V_empty_n;
        else 
            rthDropFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rthDropFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op9_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rthDropFifo_V_read <= ap_const_logic_1;
        else 
            rthDropFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_7_nbreadreq_fu_100_p3 <= (0=>(rthDropFifo_V_empty_n), others=>'-');
    tmp_data_V_fu_249_p1 <= ureDataPayload_V_dout(512 - 1 downto 0);
    tmp_last_V_fu_263_p3 <= ureDataPayload_V_dout(576 downto 576);
    tmp_nbreadreq_fu_114_p3 <= (0=>(ureDataPayload_V_empty_n), others=>'-');
    trunc_ln321_1_fu_155_p1 <= rthDropFifo_V_dout(16 - 1 downto 0);

    ureDataPayload_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ureDataPayload_V_empty_n, ap_predicate_op25_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op25_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ureDataPayload_V_blk_n <= ureDataPayload_V_empty_n;
        else 
            ureDataPayload_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ureDataPayload_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op25_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op25_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ureDataPayload_V_read <= ap_const_logic_1;
        else 
            ureDataPayload_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
