// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _packet_identificatio_HH_
#define _packet_identificatio_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct packet_identificatio : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > s_axis_TVALID;
    sc_out< sc_lv<580> > eth_level_pkt_V_din;
    sc_in< sc_logic > eth_level_pkt_V_full_n;
    sc_out< sc_logic > eth_level_pkt_V_write;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<512> > s_axis_TDATA;
    sc_out< sc_logic > s_axis_TREADY;
    sc_in< sc_lv<64> > s_axis_TKEEP;
    sc_in< sc_lv<1> > s_axis_TLAST;


    // Module declarations
    packet_identificatio(sc_module_name name);
    SC_HAS_PROCESS(packet_identificatio);

    ~packet_identificatio();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > grp_nbreadreq_fu_86_p5;
    sc_signal< bool > ap_predicate_op6_read_state1;
    sc_signal< bool > ap_predicate_op11_read_state1;
    sc_signal< bool > ap_predicate_op17_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<2> > pi_fsm_state_load_reg_387;
    sc_signal< sc_lv<1> > tmp_1_reg_399;
    sc_signal< bool > ap_predicate_op63_write_state2;
    sc_signal< sc_lv<1> > tmp_reg_408;
    sc_signal< sc_lv<1> > or_ln879_3_reg_422;
    sc_signal< bool > ap_predicate_op71_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > pi_fsm_state;
    sc_signal< sc_lv<2> > tdest_r_V;
    sc_signal< sc_logic > s_axis_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > eth_level_pkt_V_blk_n;
    sc_signal< sc_lv<512> > reg_144;
    sc_signal< sc_lv<64> > reg_148;
    sc_signal< sc_lv<1> > grp_fu_126_p1;
    sc_signal< sc_lv<1> > tmp_last_V_reg_403;
    sc_signal< sc_lv<1> > tmp_last_V_2_reg_412;
    sc_signal< sc_lv<2> > sendWord_dest_V_fu_288_p3;
    sc_signal< sc_lv<2> > sendWord_dest_V_reg_417;
    sc_signal< sc_lv<1> > or_ln879_3_fu_326_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<2> > ap_phi_mux_storemerge_i_phi_fu_118_p4;
    sc_signal< sc_lv<2> > ap_phi_reg_pp0_iter0_storemerge_i_reg_115;
    sc_signal< sc_lv<2> > select_ln228_fu_338_p3;
    sc_signal< sc_lv<580> > tmp_111_fu_367_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<580> > tmp3_fu_382_p1;
    sc_signal< sc_lv<8> > p_Result_i_i_9_fu_166_p4;
    sc_signal< sc_lv<8> > p_Result_i_i_fu_156_p4;
    sc_signal< sc_lv<16> > ethernetType_V_fu_176_p3;
    sc_signal< sc_lv<4> > ipVersion_V_fu_184_p4;
    sc_signal< sc_lv<8> > ipProtocol_V_fu_194_p4;
    sc_signal< sc_lv<1> > icmp_ln879_4_fu_228_p2;
    sc_signal< sc_lv<1> > icmp_ln879_5_fu_234_p2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_204_p2;
    sc_signal< sc_lv<1> > icmp_ln879_1_fu_210_p2;
    sc_signal< sc_lv<1> > xor_ln879_fu_254_p2;
    sc_signal< sc_lv<1> > icmp_ln879_2_fu_216_p2;
    sc_signal< sc_lv<1> > icmp_ln879_3_fu_222_p2;
    sc_signal< sc_lv<1> > and_ln879_1_fu_266_p2;
    sc_signal< sc_lv<1> > and_ln879_fu_260_p2;
    sc_signal< sc_lv<1> > and_ln879_2_fu_272_p2;
    sc_signal< sc_lv<1> > or_ln879_fu_282_p2;
    sc_signal< sc_lv<2> > zext_ln879_fu_278_p1;
    sc_signal< sc_lv<2> > select_ln198_fu_240_p3;
    sc_signal< sc_lv<1> > or_ln198_fu_248_p2;
    sc_signal< sc_lv<1> > xor_ln879_1_fu_302_p2;
    sc_signal< sc_lv<1> > and_ln879_3_fu_296_p2;
    sc_signal< sc_lv<1> > and_ln879_4_fu_308_p2;
    sc_signal< sc_lv<1> > or_ln879_2_fu_320_p2;
    sc_signal< sc_lv<1> > or_ln879_1_fu_314_p2;
    sc_signal< sc_lv<579> > tmp_3_fu_356_p5;
    sc_signal< sc_lv<579> > tmp_4_fu_372_p5;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_199;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_68;
    static const sc_lv<32> ap_const_lv32_6F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_67;
    static const sc_lv<32> ap_const_lv32_74;
    static const sc_lv<32> ap_const_lv32_77;
    static const sc_lv<32> ap_const_lv32_B8;
    static const sc_lv<32> ap_const_lv32_BF;
    static const sc_lv<16> ap_const_lv16_806;
    static const sc_lv<16> ap_const_lv16_800;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<8> ap_const_lv8_11;
    static const sc_lv<2> ap_const_lv2_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln879_1_fu_266_p2();
    void thread_and_ln879_2_fu_272_p2();
    void thread_and_ln879_3_fu_296_p2();
    void thread_and_ln879_4_fu_308_p2();
    void thread_and_ln879_fu_260_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_condition_199();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_storemerge_i_phi_fu_118_p4();
    void thread_ap_phi_reg_pp0_iter0_storemerge_i_reg_115();
    void thread_ap_predicate_op11_read_state1();
    void thread_ap_predicate_op17_read_state1();
    void thread_ap_predicate_op63_write_state2();
    void thread_ap_predicate_op6_read_state1();
    void thread_ap_predicate_op71_write_state2();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_eth_level_pkt_V_blk_n();
    void thread_eth_level_pkt_V_din();
    void thread_eth_level_pkt_V_write();
    void thread_ethernetType_V_fu_176_p3();
    void thread_grp_fu_126_p1();
    void thread_grp_nbreadreq_fu_86_p5();
    void thread_icmp_ln879_1_fu_210_p2();
    void thread_icmp_ln879_2_fu_216_p2();
    void thread_icmp_ln879_3_fu_222_p2();
    void thread_icmp_ln879_4_fu_228_p2();
    void thread_icmp_ln879_5_fu_234_p2();
    void thread_icmp_ln879_fu_204_p2();
    void thread_internal_ap_ready();
    void thread_ipProtocol_V_fu_194_p4();
    void thread_ipVersion_V_fu_184_p4();
    void thread_or_ln198_fu_248_p2();
    void thread_or_ln879_1_fu_314_p2();
    void thread_or_ln879_2_fu_320_p2();
    void thread_or_ln879_3_fu_326_p2();
    void thread_or_ln879_fu_282_p2();
    void thread_p_Result_i_i_9_fu_166_p4();
    void thread_p_Result_i_i_fu_156_p4();
    void thread_real_start();
    void thread_s_axis_TDATA_blk_n();
    void thread_s_axis_TREADY();
    void thread_select_ln198_fu_240_p3();
    void thread_select_ln228_fu_338_p3();
    void thread_sendWord_dest_V_fu_288_p3();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp3_fu_382_p1();
    void thread_tmp_111_fu_367_p1();
    void thread_tmp_3_fu_356_p5();
    void thread_tmp_4_fu_372_p5();
    void thread_xor_ln879_1_fu_302_p2();
    void thread_xor_ln879_fu_254_p2();
    void thread_zext_ln879_fu_278_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
