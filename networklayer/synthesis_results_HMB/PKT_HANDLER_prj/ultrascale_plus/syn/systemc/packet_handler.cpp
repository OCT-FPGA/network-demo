// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "packet_handler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<512> packet_handler::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> packet_handler::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> packet_handler::ap_const_lv1_0 = "0";
const sc_lv<3> packet_handler::ap_const_lv3_0 = "000";
const sc_logic packet_handler::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic packet_handler::ap_const_logic_0 = sc_dt::Log_0;

packet_handler::packet_handler(sc_module_name name) : sc_module(name), mVcdFile(0) {
    packet_identificatio_U0 = new packet_identificatio("packet_identificatio_U0");
    packet_identificatio_U0->ap_clk(ap_clk);
    packet_identificatio_U0->ap_rst(ap_rst_n_inv);
    packet_identificatio_U0->ap_start(packet_identificatio_U0_ap_start);
    packet_identificatio_U0->start_full_n(start_for_ethernet_remover_U0_full_n);
    packet_identificatio_U0->ap_done(packet_identificatio_U0_ap_done);
    packet_identificatio_U0->ap_continue(packet_identificatio_U0_ap_continue);
    packet_identificatio_U0->ap_idle(packet_identificatio_U0_ap_idle);
    packet_identificatio_U0->ap_ready(packet_identificatio_U0_ap_ready);
    packet_identificatio_U0->s_axis_TVALID(s_axis_TVALID);
    packet_identificatio_U0->eth_level_pkt_V_din(packet_identificatio_U0_eth_level_pkt_V_din);
    packet_identificatio_U0->eth_level_pkt_V_full_n(eth_level_pkt_V_full_n);
    packet_identificatio_U0->eth_level_pkt_V_write(packet_identificatio_U0_eth_level_pkt_V_write);
    packet_identificatio_U0->start_out(packet_identificatio_U0_start_out);
    packet_identificatio_U0->start_write(packet_identificatio_U0_start_write);
    packet_identificatio_U0->s_axis_TDATA(s_axis_TDATA);
    packet_identificatio_U0->s_axis_TREADY(packet_identificatio_U0_s_axis_TREADY);
    packet_identificatio_U0->s_axis_TKEEP(s_axis_TKEEP);
    packet_identificatio_U0->s_axis_TLAST(s_axis_TLAST);
    ethernet_remover_U0 = new ethernet_remover("ethernet_remover_U0");
    ethernet_remover_U0->ap_clk(ap_clk);
    ethernet_remover_U0->ap_rst(ap_rst_n_inv);
    ethernet_remover_U0->ap_start(ethernet_remover_U0_ap_start);
    ethernet_remover_U0->ap_done(ethernet_remover_U0_ap_done);
    ethernet_remover_U0->ap_continue(ethernet_remover_U0_ap_continue);
    ethernet_remover_U0->ap_idle(ethernet_remover_U0_ap_idle);
    ethernet_remover_U0->ap_ready(ethernet_remover_U0_ap_ready);
    ethernet_remover_U0->eth_level_pkt_V_dout(eth_level_pkt_V_dout);
    ethernet_remover_U0->eth_level_pkt_V_empty_n(eth_level_pkt_V_empty_n);
    ethernet_remover_U0->eth_level_pkt_V_read(ethernet_remover_U0_eth_level_pkt_V_read);
    ethernet_remover_U0->m_axis_TREADY(m_axis_TREADY);
    ethernet_remover_U0->m_axis_TDATA(ethernet_remover_U0_m_axis_TDATA);
    ethernet_remover_U0->m_axis_TVALID(ethernet_remover_U0_m_axis_TVALID);
    ethernet_remover_U0->m_axis_TKEEP(ethernet_remover_U0_m_axis_TKEEP);
    ethernet_remover_U0->m_axis_TLAST(ethernet_remover_U0_m_axis_TLAST);
    ethernet_remover_U0->m_axis_TDEST(ethernet_remover_U0_m_axis_TDEST);
    eth_level_pkt_V_U = new fifo_w580_d16_A("eth_level_pkt_V_U");
    eth_level_pkt_V_U->clk(ap_clk);
    eth_level_pkt_V_U->reset(ap_rst_n_inv);
    eth_level_pkt_V_U->if_read_ce(ap_var_for_const0);
    eth_level_pkt_V_U->if_write_ce(ap_var_for_const0);
    eth_level_pkt_V_U->if_din(packet_identificatio_U0_eth_level_pkt_V_din);
    eth_level_pkt_V_U->if_full_n(eth_level_pkt_V_full_n);
    eth_level_pkt_V_U->if_write(packet_identificatio_U0_eth_level_pkt_V_write);
    eth_level_pkt_V_U->if_dout(eth_level_pkt_V_dout);
    eth_level_pkt_V_U->if_empty_n(eth_level_pkt_V_empty_n);
    eth_level_pkt_V_U->if_read(ethernet_remover_U0_eth_level_pkt_V_read);
    start_for_ethernebkb_U = new start_for_ethernebkb("start_for_ethernebkb_U");
    start_for_ethernebkb_U->clk(ap_clk);
    start_for_ethernebkb_U->reset(ap_rst_n_inv);
    start_for_ethernebkb_U->if_read_ce(ap_var_for_const0);
    start_for_ethernebkb_U->if_write_ce(ap_var_for_const0);
    start_for_ethernebkb_U->if_din(start_for_ethernet_remover_U0_din);
    start_for_ethernebkb_U->if_full_n(start_for_ethernet_remover_U0_full_n);
    start_for_ethernebkb_U->if_write(packet_identificatio_U0_start_write);
    start_for_ethernebkb_U->if_dout(start_for_ethernet_remover_U0_dout);
    start_for_ethernebkb_U->if_empty_n(start_for_ethernet_remover_U0_empty_n);
    start_for_ethernebkb_U->if_read(ethernet_remover_U0_ap_ready);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ethernet_remover_U0_ap_continue);

    SC_METHOD(thread_ethernet_remover_U0_ap_start);
    sensitive << ( start_for_ethernet_remover_U0_empty_n );

    SC_METHOD(thread_ethernet_remover_U0_start_full_n);

    SC_METHOD(thread_ethernet_remover_U0_start_write);

    SC_METHOD(thread_m_axis_TDATA);
    sensitive << ( ethernet_remover_U0_m_axis_TDATA );

    SC_METHOD(thread_m_axis_TDEST);
    sensitive << ( ethernet_remover_U0_m_axis_TDEST );

    SC_METHOD(thread_m_axis_TKEEP);
    sensitive << ( ethernet_remover_U0_m_axis_TKEEP );

    SC_METHOD(thread_m_axis_TLAST);
    sensitive << ( ethernet_remover_U0_m_axis_TLAST );

    SC_METHOD(thread_m_axis_TVALID);
    sensitive << ( ethernet_remover_U0_m_axis_TVALID );

    SC_METHOD(thread_packet_identificatio_U0_ap_continue);

    SC_METHOD(thread_packet_identificatio_U0_ap_start);

    SC_METHOD(thread_s_axis_TREADY);
    sensitive << ( packet_identificatio_U0_s_axis_TREADY );

    SC_METHOD(thread_start_for_ethernet_remover_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "packet_handler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axis_TDATA, "(port)s_axis_TDATA");
    sc_trace(mVcdFile, s_axis_TKEEP, "(port)s_axis_TKEEP");
    sc_trace(mVcdFile, s_axis_TLAST, "(port)s_axis_TLAST");
    sc_trace(mVcdFile, m_axis_TDATA, "(port)m_axis_TDATA");
    sc_trace(mVcdFile, m_axis_TKEEP, "(port)m_axis_TKEEP");
    sc_trace(mVcdFile, m_axis_TLAST, "(port)m_axis_TLAST");
    sc_trace(mVcdFile, m_axis_TDEST, "(port)m_axis_TDEST");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axis_TVALID, "(port)s_axis_TVALID");
    sc_trace(mVcdFile, s_axis_TREADY, "(port)s_axis_TREADY");
    sc_trace(mVcdFile, m_axis_TVALID, "(port)m_axis_TVALID");
    sc_trace(mVcdFile, m_axis_TREADY, "(port)m_axis_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, packet_identificatio_U0_ap_start, "packet_identificatio_U0_ap_start");
    sc_trace(mVcdFile, packet_identificatio_U0_ap_done, "packet_identificatio_U0_ap_done");
    sc_trace(mVcdFile, packet_identificatio_U0_ap_continue, "packet_identificatio_U0_ap_continue");
    sc_trace(mVcdFile, packet_identificatio_U0_ap_idle, "packet_identificatio_U0_ap_idle");
    sc_trace(mVcdFile, packet_identificatio_U0_ap_ready, "packet_identificatio_U0_ap_ready");
    sc_trace(mVcdFile, packet_identificatio_U0_eth_level_pkt_V_din, "packet_identificatio_U0_eth_level_pkt_V_din");
    sc_trace(mVcdFile, packet_identificatio_U0_eth_level_pkt_V_write, "packet_identificatio_U0_eth_level_pkt_V_write");
    sc_trace(mVcdFile, packet_identificatio_U0_start_out, "packet_identificatio_U0_start_out");
    sc_trace(mVcdFile, packet_identificatio_U0_start_write, "packet_identificatio_U0_start_write");
    sc_trace(mVcdFile, packet_identificatio_U0_s_axis_TREADY, "packet_identificatio_U0_s_axis_TREADY");
    sc_trace(mVcdFile, ethernet_remover_U0_ap_start, "ethernet_remover_U0_ap_start");
    sc_trace(mVcdFile, ethernet_remover_U0_ap_done, "ethernet_remover_U0_ap_done");
    sc_trace(mVcdFile, ethernet_remover_U0_ap_continue, "ethernet_remover_U0_ap_continue");
    sc_trace(mVcdFile, ethernet_remover_U0_ap_idle, "ethernet_remover_U0_ap_idle");
    sc_trace(mVcdFile, ethernet_remover_U0_ap_ready, "ethernet_remover_U0_ap_ready");
    sc_trace(mVcdFile, ethernet_remover_U0_eth_level_pkt_V_read, "ethernet_remover_U0_eth_level_pkt_V_read");
    sc_trace(mVcdFile, ethernet_remover_U0_m_axis_TDATA, "ethernet_remover_U0_m_axis_TDATA");
    sc_trace(mVcdFile, ethernet_remover_U0_m_axis_TVALID, "ethernet_remover_U0_m_axis_TVALID");
    sc_trace(mVcdFile, ethernet_remover_U0_m_axis_TKEEP, "ethernet_remover_U0_m_axis_TKEEP");
    sc_trace(mVcdFile, ethernet_remover_U0_m_axis_TLAST, "ethernet_remover_U0_m_axis_TLAST");
    sc_trace(mVcdFile, ethernet_remover_U0_m_axis_TDEST, "ethernet_remover_U0_m_axis_TDEST");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, eth_level_pkt_V_full_n, "eth_level_pkt_V_full_n");
    sc_trace(mVcdFile, eth_level_pkt_V_dout, "eth_level_pkt_V_dout");
    sc_trace(mVcdFile, eth_level_pkt_V_empty_n, "eth_level_pkt_V_empty_n");
    sc_trace(mVcdFile, start_for_ethernet_remover_U0_din, "start_for_ethernet_remover_U0_din");
    sc_trace(mVcdFile, start_for_ethernet_remover_U0_full_n, "start_for_ethernet_remover_U0_full_n");
    sc_trace(mVcdFile, start_for_ethernet_remover_U0_dout, "start_for_ethernet_remover_U0_dout");
    sc_trace(mVcdFile, start_for_ethernet_remover_U0_empty_n, "start_for_ethernet_remover_U0_empty_n");
    sc_trace(mVcdFile, ethernet_remover_U0_start_full_n, "ethernet_remover_U0_start_full_n");
    sc_trace(mVcdFile, ethernet_remover_U0_start_write, "ethernet_remover_U0_start_write");
#endif

    }
    mHdltvinHandle.open("packet_handler.hdltvin.dat");
    mHdltvoutHandle.open("packet_handler.hdltvout.dat");
}

packet_handler::~packet_handler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete packet_identificatio_U0;
    delete ethernet_remover_U0;
    delete eth_level_pkt_V_U;
    delete start_for_ethernebkb_U;
}

void packet_handler::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void packet_handler::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void packet_handler::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void packet_handler::thread_ethernet_remover_U0_ap_continue() {
    ethernet_remover_U0_ap_continue = ap_const_logic_1;
}

void packet_handler::thread_ethernet_remover_U0_ap_start() {
    ethernet_remover_U0_ap_start = start_for_ethernet_remover_U0_empty_n.read();
}

void packet_handler::thread_ethernet_remover_U0_start_full_n() {
    ethernet_remover_U0_start_full_n = ap_const_logic_1;
}

void packet_handler::thread_ethernet_remover_U0_start_write() {
    ethernet_remover_U0_start_write = ap_const_logic_0;
}

void packet_handler::thread_m_axis_TDATA() {
    m_axis_TDATA = ethernet_remover_U0_m_axis_TDATA.read();
}

void packet_handler::thread_m_axis_TDEST() {
    m_axis_TDEST = ethernet_remover_U0_m_axis_TDEST.read();
}

void packet_handler::thread_m_axis_TKEEP() {
    m_axis_TKEEP = ethernet_remover_U0_m_axis_TKEEP.read();
}

void packet_handler::thread_m_axis_TLAST() {
    m_axis_TLAST = ethernet_remover_U0_m_axis_TLAST.read();
}

void packet_handler::thread_m_axis_TVALID() {
    m_axis_TVALID = ethernet_remover_U0_m_axis_TVALID.read();
}

void packet_handler::thread_packet_identificatio_U0_ap_continue() {
    packet_identificatio_U0_ap_continue = ap_const_logic_1;
}

void packet_handler::thread_packet_identificatio_U0_ap_start() {
    packet_identificatio_U0_ap_start = ap_const_logic_1;
}

void packet_handler::thread_s_axis_TREADY() {
    s_axis_TREADY = packet_identificatio_U0_s_axis_TREADY.read();
}

void packet_handler::thread_start_for_ethernet_remover_U0_din() {
    start_for_ethernet_remover_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void packet_handler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axis_TDATA\" :  \"" << s_axis_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_TKEEP\" :  \"" << s_axis_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_TLAST\" :  \"" << s_axis_TLAST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axis_TDATA\" :  \"" << m_axis_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_TKEEP\" :  \"" << m_axis_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_TLAST\" :  \"" << m_axis_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_TDEST\" :  \"" << m_axis_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_TVALID\" :  \"" << s_axis_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axis_TREADY\" :  \"" << s_axis_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_TVALID\" :  \"" << m_axis_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_TREADY\" :  \"" << m_axis_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

