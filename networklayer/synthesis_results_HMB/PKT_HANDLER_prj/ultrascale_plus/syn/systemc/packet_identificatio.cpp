// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "packet_identificatio.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic packet_identificatio::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic packet_identificatio::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> packet_identificatio::ap_ST_fsm_pp0_stage0 = "1";
const bool packet_identificatio::ap_const_boolean_1 = true;
const sc_lv<32> packet_identificatio::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<2> packet_identificatio::ap_const_lv2_2 = "10";
const sc_lv<1> packet_identificatio::ap_const_lv1_1 = "1";
const sc_lv<2> packet_identificatio::ap_const_lv2_1 = "1";
const sc_lv<2> packet_identificatio::ap_const_lv2_0 = "00";
const bool packet_identificatio::ap_const_boolean_0 = false;
const sc_lv<1> packet_identificatio::ap_const_lv1_0 = "0";
const sc_lv<32> packet_identificatio::ap_const_lv32_68 = "1101000";
const sc_lv<32> packet_identificatio::ap_const_lv32_6F = "1101111";
const sc_lv<32> packet_identificatio::ap_const_lv32_60 = "1100000";
const sc_lv<32> packet_identificatio::ap_const_lv32_67 = "1100111";
const sc_lv<32> packet_identificatio::ap_const_lv32_74 = "1110100";
const sc_lv<32> packet_identificatio::ap_const_lv32_77 = "1110111";
const sc_lv<32> packet_identificatio::ap_const_lv32_B8 = "10111000";
const sc_lv<32> packet_identificatio::ap_const_lv32_BF = "10111111";
const sc_lv<16> packet_identificatio::ap_const_lv16_806 = "100000000110";
const sc_lv<16> packet_identificatio::ap_const_lv16_800 = "100000000000";
const sc_lv<4> packet_identificatio::ap_const_lv4_4 = "100";
const sc_lv<8> packet_identificatio::ap_const_lv8_1 = "1";
const sc_lv<8> packet_identificatio::ap_const_lv8_6 = "110";
const sc_lv<8> packet_identificatio::ap_const_lv8_11 = "10001";
const sc_lv<2> packet_identificatio::ap_const_lv2_3 = "11";

packet_identificatio::packet_identificatio(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln879_1_fu_266_p2);
    sensitive << ( icmp_ln879_2_fu_216_p2 );
    sensitive << ( icmp_ln879_3_fu_222_p2 );

    SC_METHOD(thread_and_ln879_2_fu_272_p2);
    sensitive << ( and_ln879_1_fu_266_p2 );
    sensitive << ( and_ln879_fu_260_p2 );

    SC_METHOD(thread_and_ln879_3_fu_296_p2);
    sensitive << ( icmp_ln879_1_fu_210_p2 );
    sensitive << ( or_ln198_fu_248_p2 );

    SC_METHOD(thread_and_ln879_4_fu_308_p2);
    sensitive << ( and_ln879_fu_260_p2 );
    sensitive << ( xor_ln879_1_fu_302_p2 );

    SC_METHOD(thread_and_ln879_fu_260_p2);
    sensitive << ( icmp_ln879_1_fu_210_p2 );
    sensitive << ( xor_ln879_fu_254_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( s_axis_TVALID );
    sensitive << ( ap_predicate_op6_read_state1 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( eth_level_pkt_V_full_n );
    sensitive << ( ap_predicate_op63_write_state2 );
    sensitive << ( ap_predicate_op71_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( s_axis_TVALID );
    sensitive << ( ap_predicate_op6_read_state1 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( eth_level_pkt_V_full_n );
    sensitive << ( ap_predicate_op63_write_state2 );
    sensitive << ( ap_predicate_op71_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( s_axis_TVALID );
    sensitive << ( ap_predicate_op6_read_state1 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( eth_level_pkt_V_full_n );
    sensitive << ( ap_predicate_op63_write_state2 );
    sensitive << ( ap_predicate_op71_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( s_axis_TVALID );
    sensitive << ( ap_predicate_op6_read_state1 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op17_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( eth_level_pkt_V_full_n );
    sensitive << ( ap_predicate_op63_write_state2 );
    sensitive << ( ap_predicate_op71_write_state2 );

    SC_METHOD(thread_ap_condition_199);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_storemerge_i_phi_fu_118_p4);
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( pi_fsm_state );
    sensitive << ( or_ln879_3_fu_326_p2 );
    sensitive << ( ap_phi_reg_pp0_iter0_storemerge_i_reg_115 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_storemerge_i_reg_115);

    SC_METHOD(thread_ap_predicate_op11_read_state1);
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( pi_fsm_state );

    SC_METHOD(thread_ap_predicate_op17_read_state1);
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( pi_fsm_state );

    SC_METHOD(thread_ap_predicate_op63_write_state2);
    sensitive << ( pi_fsm_state_load_reg_387 );
    sensitive << ( tmp_1_reg_399 );

    SC_METHOD(thread_ap_predicate_op6_read_state1);
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( pi_fsm_state );

    SC_METHOD(thread_ap_predicate_op71_write_state2);
    sensitive << ( pi_fsm_state_load_reg_387 );
    sensitive << ( tmp_reg_408 );
    sensitive << ( or_ln879_3_reg_422 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_eth_level_pkt_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( eth_level_pkt_V_full_n );
    sensitive << ( ap_predicate_op63_write_state2 );
    sensitive << ( ap_predicate_op71_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_eth_level_pkt_V_din);
    sensitive << ( ap_predicate_op63_write_state2 );
    sensitive << ( ap_predicate_op71_write_state2 );
    sensitive << ( tmp_111_fu_367_p1 );
    sensitive << ( tmp3_fu_382_p1 );
    sensitive << ( ap_condition_199 );

    SC_METHOD(thread_eth_level_pkt_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op63_write_state2 );
    sensitive << ( ap_predicate_op71_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ethernetType_V_fu_176_p3);
    sensitive << ( p_Result_i_i_9_fu_166_p4 );
    sensitive << ( p_Result_i_i_fu_156_p4 );

    SC_METHOD(thread_grp_fu_126_p1);
    sensitive << ( s_axis_TLAST );

    SC_METHOD(thread_grp_nbreadreq_fu_86_p5);
    sensitive << ( s_axis_TVALID );

    SC_METHOD(thread_icmp_ln879_1_fu_210_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( pi_fsm_state );
    sensitive << ( ethernetType_V_fu_176_p3 );

    SC_METHOD(thread_icmp_ln879_2_fu_216_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( pi_fsm_state );
    sensitive << ( ipVersion_V_fu_184_p4 );

    SC_METHOD(thread_icmp_ln879_3_fu_222_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( pi_fsm_state );
    sensitive << ( ipProtocol_V_fu_194_p4 );

    SC_METHOD(thread_icmp_ln879_4_fu_228_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( pi_fsm_state );
    sensitive << ( ipProtocol_V_fu_194_p4 );

    SC_METHOD(thread_icmp_ln879_5_fu_234_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( pi_fsm_state );
    sensitive << ( ipProtocol_V_fu_194_p4 );

    SC_METHOD(thread_icmp_ln879_fu_204_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_86_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( pi_fsm_state );
    sensitive << ( ethernetType_V_fu_176_p3 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ipProtocol_V_fu_194_p4);
    sensitive << ( s_axis_TDATA );

    SC_METHOD(thread_ipVersion_V_fu_184_p4);
    sensitive << ( s_axis_TDATA );

    SC_METHOD(thread_or_ln198_fu_248_p2);
    sensitive << ( icmp_ln879_4_fu_228_p2 );
    sensitive << ( icmp_ln879_5_fu_234_p2 );

    SC_METHOD(thread_or_ln879_1_fu_314_p2);
    sensitive << ( icmp_ln879_fu_204_p2 );
    sensitive << ( and_ln879_3_fu_296_p2 );

    SC_METHOD(thread_or_ln879_2_fu_320_p2);
    sensitive << ( and_ln879_2_fu_272_p2 );
    sensitive << ( and_ln879_4_fu_308_p2 );

    SC_METHOD(thread_or_ln879_3_fu_326_p2);
    sensitive << ( or_ln879_2_fu_320_p2 );
    sensitive << ( or_ln879_1_fu_314_p2 );

    SC_METHOD(thread_or_ln879_fu_282_p2);
    sensitive << ( icmp_ln879_fu_204_p2 );
    sensitive << ( and_ln879_2_fu_272_p2 );

    SC_METHOD(thread_p_Result_i_i_9_fu_166_p4);
    sensitive << ( s_axis_TDATA );

    SC_METHOD(thread_p_Result_i_i_fu_156_p4);
    sensitive << ( s_axis_TDATA );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_s_axis_TDATA_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( s_axis_TVALID );
    sensitive << ( ap_predicate_op6_read_state1 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_s_axis_TREADY);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op6_read_state1 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_select_ln198_fu_240_p3);
    sensitive << ( icmp_ln879_4_fu_228_p2 );

    SC_METHOD(thread_select_ln228_fu_338_p3);
    sensitive << ( s_axis_TLAST );
    sensitive << ( ap_phi_mux_storemerge_i_phi_fu_118_p4 );

    SC_METHOD(thread_sendWord_dest_V_fu_288_p3);
    sensitive << ( or_ln879_fu_282_p2 );
    sensitive << ( zext_ln879_fu_278_p1 );
    sensitive << ( select_ln198_fu_240_p3 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp3_fu_382_p1);
    sensitive << ( tmp_4_fu_372_p5 );

    SC_METHOD(thread_tmp_111_fu_367_p1);
    sensitive << ( tmp_3_fu_356_p5 );

    SC_METHOD(thread_tmp_3_fu_356_p5);
    sensitive << ( tdest_r_V );
    sensitive << ( reg_144 );
    sensitive << ( reg_148 );
    sensitive << ( tmp_last_V_reg_403 );

    SC_METHOD(thread_tmp_4_fu_372_p5);
    sensitive << ( reg_144 );
    sensitive << ( reg_148 );
    sensitive << ( tmp_last_V_2_reg_412 );
    sensitive << ( sendWord_dest_V_reg_417 );

    SC_METHOD(thread_xor_ln879_1_fu_302_p2);
    sensitive << ( icmp_ln879_2_fu_216_p2 );

    SC_METHOD(thread_xor_ln879_fu_254_p2);
    sensitive << ( icmp_ln879_fu_204_p2 );

    SC_METHOD(thread_zext_ln879_fu_278_p1);
    sensitive << ( and_ln879_2_fu_272_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    pi_fsm_state = "00";
    tdest_r_V = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "packet_identificatio_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_axis_TVALID, "(port)s_axis_TVALID");
    sc_trace(mVcdFile, eth_level_pkt_V_din, "(port)eth_level_pkt_V_din");
    sc_trace(mVcdFile, eth_level_pkt_V_full_n, "(port)eth_level_pkt_V_full_n");
    sc_trace(mVcdFile, eth_level_pkt_V_write, "(port)eth_level_pkt_V_write");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, s_axis_TDATA, "(port)s_axis_TDATA");
    sc_trace(mVcdFile, s_axis_TREADY, "(port)s_axis_TREADY");
    sc_trace(mVcdFile, s_axis_TKEEP, "(port)s_axis_TKEEP");
    sc_trace(mVcdFile, s_axis_TLAST, "(port)s_axis_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, grp_nbreadreq_fu_86_p5, "grp_nbreadreq_fu_86_p5");
    sc_trace(mVcdFile, ap_predicate_op6_read_state1, "ap_predicate_op6_read_state1");
    sc_trace(mVcdFile, ap_predicate_op11_read_state1, "ap_predicate_op11_read_state1");
    sc_trace(mVcdFile, ap_predicate_op17_read_state1, "ap_predicate_op17_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, pi_fsm_state_load_reg_387, "pi_fsm_state_load_reg_387");
    sc_trace(mVcdFile, tmp_1_reg_399, "tmp_1_reg_399");
    sc_trace(mVcdFile, ap_predicate_op63_write_state2, "ap_predicate_op63_write_state2");
    sc_trace(mVcdFile, tmp_reg_408, "tmp_reg_408");
    sc_trace(mVcdFile, or_ln879_3_reg_422, "or_ln879_3_reg_422");
    sc_trace(mVcdFile, ap_predicate_op71_write_state2, "ap_predicate_op71_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, pi_fsm_state, "pi_fsm_state");
    sc_trace(mVcdFile, tdest_r_V, "tdest_r_V");
    sc_trace(mVcdFile, s_axis_TDATA_blk_n, "s_axis_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, eth_level_pkt_V_blk_n, "eth_level_pkt_V_blk_n");
    sc_trace(mVcdFile, reg_144, "reg_144");
    sc_trace(mVcdFile, reg_148, "reg_148");
    sc_trace(mVcdFile, grp_fu_126_p1, "grp_fu_126_p1");
    sc_trace(mVcdFile, tmp_last_V_reg_403, "tmp_last_V_reg_403");
    sc_trace(mVcdFile, tmp_last_V_2_reg_412, "tmp_last_V_2_reg_412");
    sc_trace(mVcdFile, sendWord_dest_V_fu_288_p3, "sendWord_dest_V_fu_288_p3");
    sc_trace(mVcdFile, sendWord_dest_V_reg_417, "sendWord_dest_V_reg_417");
    sc_trace(mVcdFile, or_ln879_3_fu_326_p2, "or_ln879_3_fu_326_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_storemerge_i_phi_fu_118_p4, "ap_phi_mux_storemerge_i_phi_fu_118_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_storemerge_i_reg_115, "ap_phi_reg_pp0_iter0_storemerge_i_reg_115");
    sc_trace(mVcdFile, select_ln228_fu_338_p3, "select_ln228_fu_338_p3");
    sc_trace(mVcdFile, tmp_111_fu_367_p1, "tmp_111_fu_367_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp3_fu_382_p1, "tmp3_fu_382_p1");
    sc_trace(mVcdFile, p_Result_i_i_9_fu_166_p4, "p_Result_i_i_9_fu_166_p4");
    sc_trace(mVcdFile, p_Result_i_i_fu_156_p4, "p_Result_i_i_fu_156_p4");
    sc_trace(mVcdFile, ethernetType_V_fu_176_p3, "ethernetType_V_fu_176_p3");
    sc_trace(mVcdFile, ipVersion_V_fu_184_p4, "ipVersion_V_fu_184_p4");
    sc_trace(mVcdFile, ipProtocol_V_fu_194_p4, "ipProtocol_V_fu_194_p4");
    sc_trace(mVcdFile, icmp_ln879_4_fu_228_p2, "icmp_ln879_4_fu_228_p2");
    sc_trace(mVcdFile, icmp_ln879_5_fu_234_p2, "icmp_ln879_5_fu_234_p2");
    sc_trace(mVcdFile, icmp_ln879_fu_204_p2, "icmp_ln879_fu_204_p2");
    sc_trace(mVcdFile, icmp_ln879_1_fu_210_p2, "icmp_ln879_1_fu_210_p2");
    sc_trace(mVcdFile, xor_ln879_fu_254_p2, "xor_ln879_fu_254_p2");
    sc_trace(mVcdFile, icmp_ln879_2_fu_216_p2, "icmp_ln879_2_fu_216_p2");
    sc_trace(mVcdFile, icmp_ln879_3_fu_222_p2, "icmp_ln879_3_fu_222_p2");
    sc_trace(mVcdFile, and_ln879_1_fu_266_p2, "and_ln879_1_fu_266_p2");
    sc_trace(mVcdFile, and_ln879_fu_260_p2, "and_ln879_fu_260_p2");
    sc_trace(mVcdFile, and_ln879_2_fu_272_p2, "and_ln879_2_fu_272_p2");
    sc_trace(mVcdFile, or_ln879_fu_282_p2, "or_ln879_fu_282_p2");
    sc_trace(mVcdFile, zext_ln879_fu_278_p1, "zext_ln879_fu_278_p1");
    sc_trace(mVcdFile, select_ln198_fu_240_p3, "select_ln198_fu_240_p3");
    sc_trace(mVcdFile, or_ln198_fu_248_p2, "or_ln198_fu_248_p2");
    sc_trace(mVcdFile, xor_ln879_1_fu_302_p2, "xor_ln879_1_fu_302_p2");
    sc_trace(mVcdFile, and_ln879_3_fu_296_p2, "and_ln879_3_fu_296_p2");
    sc_trace(mVcdFile, and_ln879_4_fu_308_p2, "and_ln879_4_fu_308_p2");
    sc_trace(mVcdFile, or_ln879_2_fu_320_p2, "or_ln879_2_fu_320_p2");
    sc_trace(mVcdFile, or_ln879_1_fu_314_p2, "or_ln879_1_fu_314_p2");
    sc_trace(mVcdFile, tmp_3_fu_356_p5, "tmp_3_fu_356_p5");
    sc_trace(mVcdFile, tmp_4_fu_372_p5, "tmp_4_fu_372_p5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_199, "ap_condition_199");
#endif

    }
}

packet_identificatio::~packet_identificatio() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void packet_identificatio::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = real_start.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        pi_fsm_state = select_ln228_fu_338_p3.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
                 esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_2) && 
                 esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_126_p1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
                 esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && 
                 esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_1) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_126_p1.read())))) {
        pi_fsm_state = ap_const_lv2_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        or_ln879_3_reg_422 = or_ln879_3_fu_326_p2.read();
        sendWord_dest_V_reg_417 = sendWord_dest_V_fu_288_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        pi_fsm_state_load_reg_387 = pi_fsm_state.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_1) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_0) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_144 = s_axis_TDATA.read();
        reg_148 = s_axis_TKEEP.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tdest_r_V = sendWord_dest_V_fu_288_p3.read();
        tmp_last_V_2_reg_412 = s_axis_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_399 = grp_nbreadreq_fu_86_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_reg_403 = s_axis_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_408 = grp_nbreadreq_fu_86_p5.read();
    }
}

void packet_identificatio::thread_and_ln879_1_fu_266_p2() {
    and_ln879_1_fu_266_p2 = (icmp_ln879_2_fu_216_p2.read() & icmp_ln879_3_fu_222_p2.read());
}

void packet_identificatio::thread_and_ln879_2_fu_272_p2() {
    and_ln879_2_fu_272_p2 = (and_ln879_1_fu_266_p2.read() & and_ln879_fu_260_p2.read());
}

void packet_identificatio::thread_and_ln879_3_fu_296_p2() {
    and_ln879_3_fu_296_p2 = (or_ln198_fu_248_p2.read() & icmp_ln879_1_fu_210_p2.read());
}

void packet_identificatio::thread_and_ln879_4_fu_308_p2() {
    and_ln879_4_fu_308_p2 = (and_ln879_fu_260_p2.read() & xor_ln879_1_fu_302_p2.read());
}

void packet_identificatio::thread_and_ln879_fu_260_p2() {
    and_ln879_fu_260_p2 = (icmp_ln879_1_fu_210_p2.read() & xor_ln879_fu_254_p2.read());
}

void packet_identificatio::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void packet_identificatio::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void packet_identificatio::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op6_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op71_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void packet_identificatio::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op6_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op71_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void packet_identificatio::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op6_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op71_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void packet_identificatio::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op6_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, s_axis_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void packet_identificatio::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, eth_level_pkt_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op71_write_state2.read())));
}

void packet_identificatio::thread_ap_condition_199() {
    ap_condition_199 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void packet_identificatio::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void packet_identificatio::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void packet_identificatio::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = real_start.read();
}

void packet_identificatio::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void packet_identificatio::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void packet_identificatio::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void packet_identificatio::thread_ap_phi_mux_storemerge_i_phi_fu_118_p4() {
    if ((esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_0))) {
        if (esl_seteq<1,1,1>(or_ln879_3_fu_326_p2.read(), ap_const_lv1_0)) {
            ap_phi_mux_storemerge_i_phi_fu_118_p4 = ap_const_lv2_2;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, or_ln879_3_fu_326_p2.read())) {
            ap_phi_mux_storemerge_i_phi_fu_118_p4 = ap_const_lv2_1;
        } else {
            ap_phi_mux_storemerge_i_phi_fu_118_p4 = ap_phi_reg_pp0_iter0_storemerge_i_reg_115.read();
        }
    } else {
        ap_phi_mux_storemerge_i_phi_fu_118_p4 = ap_phi_reg_pp0_iter0_storemerge_i_reg_115.read();
    }
}

void packet_identificatio::thread_ap_phi_reg_pp0_iter0_storemerge_i_reg_115() {
    ap_phi_reg_pp0_iter0_storemerge_i_reg_115 =  (sc_lv<2>) ("XX");
}

void packet_identificatio::thread_ap_predicate_op11_read_state1() {
    ap_predicate_op11_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_1));
}

void packet_identificatio::thread_ap_predicate_op17_read_state1() {
    ap_predicate_op17_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1) && esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_0));
}

void packet_identificatio::thread_ap_predicate_op63_write_state2() {
    ap_predicate_op63_write_state2 = (esl_seteq<1,2,2>(ap_const_lv2_1, pi_fsm_state_load_reg_387.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_399.read()));
}

void packet_identificatio::thread_ap_predicate_op6_read_state1() {
    ap_predicate_op6_read_state1 = (esl_seteq<1,2,2>(pi_fsm_state.read(), ap_const_lv2_2) && esl_seteq<1,1,1>(grp_nbreadreq_fu_86_p5.read(), ap_const_lv1_1));
}

void packet_identificatio::thread_ap_predicate_op71_write_state2() {
    ap_predicate_op71_write_state2 = (esl_seteq<1,2,2>(ap_const_lv2_0, pi_fsm_state_load_reg_387.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_408.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_ln879_3_reg_422.read()));
}

void packet_identificatio::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void packet_identificatio::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void packet_identificatio::thread_eth_level_pkt_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op71_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        eth_level_pkt_V_blk_n = eth_level_pkt_V_full_n.read();
    } else {
        eth_level_pkt_V_blk_n = ap_const_logic_1;
    }
}

void packet_identificatio::thread_eth_level_pkt_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_199.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op71_write_state2.read())) {
            eth_level_pkt_V_din = tmp3_fu_382_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state2.read())) {
            eth_level_pkt_V_din = tmp_111_fu_367_p1.read();
        } else {
            eth_level_pkt_V_din
        }
    } else {
        eth_level_pkt_V_din
    }
}

void packet_identificatio::thread_eth_level_pkt_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op63_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op71_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        eth_level_pkt_V_write = ap_const_logic_1;
    } else {
        eth_level_pkt_V_write = ap_const_logic_0;
    }
}

void packet_identificatio::thread_ethernetType_V_fu_176_p3() {
    ethernetType_V_fu_176_p3 = esl_concat<8,8>(p_Result_i_i_9_fu_166_p4.read(), p_Result_i_i_fu_156_p4.read());
}

void packet_identificatio::thread_grp_fu_126_p1() {
    grp_fu_126_p1 = s_axis_TLAST.read();
}

void packet_identificatio::thread_grp_nbreadreq_fu_86_p5() {
    grp_nbreadreq_fu_86_p5 =  (sc_lv<1>) ((s_axis_TVALID.read()));
}

void packet_identificatio::thread_icmp_ln879_1_fu_210_p2() {
    icmp_ln879_1_fu_210_p2 = (!ethernetType_V_fu_176_p3.read().is_01() || !ap_const_lv16_800.is_01())? sc_lv<1>(): sc_lv<1>(ethernetType_V_fu_176_p3.read() == ap_const_lv16_800);
}

void packet_identificatio::thread_icmp_ln879_2_fu_216_p2() {
    icmp_ln879_2_fu_216_p2 = (!ipVersion_V_fu_184_p4.read().is_01() || !ap_const_lv4_4.is_01())? sc_lv<1>(): sc_lv<1>(ipVersion_V_fu_184_p4.read() == ap_const_lv4_4);
}

void packet_identificatio::thread_icmp_ln879_3_fu_222_p2() {
    icmp_ln879_3_fu_222_p2 = (!ipProtocol_V_fu_194_p4.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(ipProtocol_V_fu_194_p4.read() == ap_const_lv8_1);
}

void packet_identificatio::thread_icmp_ln879_4_fu_228_p2() {
    icmp_ln879_4_fu_228_p2 = (!ipProtocol_V_fu_194_p4.read().is_01() || !ap_const_lv8_6.is_01())? sc_lv<1>(): sc_lv<1>(ipProtocol_V_fu_194_p4.read() == ap_const_lv8_6);
}

void packet_identificatio::thread_icmp_ln879_5_fu_234_p2() {
    icmp_ln879_5_fu_234_p2 = (!ipProtocol_V_fu_194_p4.read().is_01() || !ap_const_lv8_11.is_01())? sc_lv<1>(): sc_lv<1>(ipProtocol_V_fu_194_p4.read() == ap_const_lv8_11);
}

void packet_identificatio::thread_icmp_ln879_fu_204_p2() {
    icmp_ln879_fu_204_p2 = (!ethernetType_V_fu_176_p3.read().is_01() || !ap_const_lv16_806.is_01())? sc_lv<1>(): sc_lv<1>(ethernetType_V_fu_176_p3.read() == ap_const_lv16_806);
}

void packet_identificatio::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void packet_identificatio::thread_ipProtocol_V_fu_194_p4() {
    ipProtocol_V_fu_194_p4 = s_axis_TDATA.read().range(191, 184);
}

void packet_identificatio::thread_ipVersion_V_fu_184_p4() {
    ipVersion_V_fu_184_p4 = s_axis_TDATA.read().range(119, 116);
}

void packet_identificatio::thread_or_ln198_fu_248_p2() {
    or_ln198_fu_248_p2 = (icmp_ln879_4_fu_228_p2.read() | icmp_ln879_5_fu_234_p2.read());
}

void packet_identificatio::thread_or_ln879_1_fu_314_p2() {
    or_ln879_1_fu_314_p2 = (icmp_ln879_fu_204_p2.read() | and_ln879_3_fu_296_p2.read());
}

void packet_identificatio::thread_or_ln879_2_fu_320_p2() {
    or_ln879_2_fu_320_p2 = (and_ln879_4_fu_308_p2.read() | and_ln879_2_fu_272_p2.read());
}

void packet_identificatio::thread_or_ln879_3_fu_326_p2() {
    or_ln879_3_fu_326_p2 = (or_ln879_2_fu_320_p2.read() | or_ln879_1_fu_314_p2.read());
}

void packet_identificatio::thread_or_ln879_fu_282_p2() {
    or_ln879_fu_282_p2 = (and_ln879_2_fu_272_p2.read() | icmp_ln879_fu_204_p2.read());
}

void packet_identificatio::thread_p_Result_i_i_9_fu_166_p4() {
    p_Result_i_i_9_fu_166_p4 = s_axis_TDATA.read().range(103, 96);
}

void packet_identificatio::thread_p_Result_i_i_fu_156_p4() {
    p_Result_i_i_fu_156_p4 = s_axis_TDATA.read().range(111, 104);
}

void packet_identificatio::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void packet_identificatio::thread_s_axis_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op6_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        s_axis_TDATA_blk_n = s_axis_TVALID.read();
    } else {
        s_axis_TDATA_blk_n = ap_const_logic_1;
    }
}

void packet_identificatio::thread_s_axis_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op6_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        s_axis_TREADY = ap_const_logic_1;
    } else {
        s_axis_TREADY = ap_const_logic_0;
    }
}

void packet_identificatio::thread_select_ln198_fu_240_p3() {
    select_ln198_fu_240_p3 = (!icmp_ln879_4_fu_228_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln879_4_fu_228_p2.read()[0].to_bool())? ap_const_lv2_2: ap_const_lv2_3);
}

void packet_identificatio::thread_select_ln228_fu_338_p3() {
    select_ln228_fu_338_p3 = (!s_axis_TLAST.read()[0].is_01())? sc_lv<2>(): ((s_axis_TLAST.read()[0].to_bool())? ap_const_lv2_0: ap_phi_mux_storemerge_i_phi_fu_118_p4.read());
}

void packet_identificatio::thread_sendWord_dest_V_fu_288_p3() {
    sendWord_dest_V_fu_288_p3 = (!or_ln879_fu_282_p2.read()[0].is_01())? sc_lv<2>(): ((or_ln879_fu_282_p2.read()[0].to_bool())? zext_ln879_fu_278_p1.read(): select_ln198_fu_240_p3.read());
}

void packet_identificatio::thread_start_out() {
    start_out = real_start.read();
}

void packet_identificatio::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void packet_identificatio::thread_tmp3_fu_382_p1() {
    tmp3_fu_382_p1 = esl_zext<580,579>(tmp_4_fu_372_p5.read());
}

void packet_identificatio::thread_tmp_111_fu_367_p1() {
    tmp_111_fu_367_p1 = esl_zext<580,579>(tmp_3_fu_356_p5.read());
}

void packet_identificatio::thread_tmp_3_fu_356_p5() {
    tmp_3_fu_356_p5 = esl_concat<67,512>(esl_concat<3,64>(esl_concat<2,1>(tdest_r_V.read(), tmp_last_V_reg_403.read()), reg_148.read()), reg_144.read());
}

void packet_identificatio::thread_tmp_4_fu_372_p5() {
    tmp_4_fu_372_p5 = esl_concat<67,512>(esl_concat<3,64>(esl_concat<2,1>(sendWord_dest_V_reg_417.read(), tmp_last_V_2_reg_412.read()), reg_148.read()), reg_144.read());
}

void packet_identificatio::thread_xor_ln879_1_fu_302_p2() {
    xor_ln879_1_fu_302_p2 = (icmp_ln879_2_fu_216_p2.read() ^ ap_const_lv1_1);
}

void packet_identificatio::thread_xor_ln879_fu_254_p2() {
    xor_ln879_fu_254_p2 = (icmp_ln879_fu_204_p2.read() ^ ap_const_lv1_1);
}

void packet_identificatio::thread_zext_ln879_fu_278_p1() {
    zext_ln879_fu_278_p1 = esl_zext<2,1>(and_ln879_2_fu_272_p2.read());
}

void packet_identificatio::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

