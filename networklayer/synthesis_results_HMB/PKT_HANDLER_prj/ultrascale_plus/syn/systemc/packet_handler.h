// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _packet_handler_HH_
#define _packet_handler_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "packet_identificatio.h"
#include "ethernet_remover.h"
#include "fifo_w580_d16_A.h"
#include "start_for_ethernebkb.h"

namespace ap_rtl {

struct packet_handler : public sc_module {
    // Port declarations 13
    sc_in< sc_lv<512> > s_axis_TDATA;
    sc_in< sc_lv<64> > s_axis_TKEEP;
    sc_in< sc_lv<1> > s_axis_TLAST;
    sc_out< sc_lv<512> > m_axis_TDATA;
    sc_out< sc_lv<64> > m_axis_TKEEP;
    sc_out< sc_lv<1> > m_axis_TLAST;
    sc_out< sc_lv<3> > m_axis_TDEST;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axis_TVALID;
    sc_out< sc_logic > s_axis_TREADY;
    sc_out< sc_logic > m_axis_TVALID;
    sc_in< sc_logic > m_axis_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    packet_handler(sc_module_name name);
    SC_HAS_PROCESS(packet_handler);

    ~packet_handler();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    packet_identificatio* packet_identificatio_U0;
    ethernet_remover* ethernet_remover_U0;
    fifo_w580_d16_A* eth_level_pkt_V_U;
    start_for_ethernebkb* start_for_ethernebkb_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > packet_identificatio_U0_ap_start;
    sc_signal< sc_logic > packet_identificatio_U0_ap_done;
    sc_signal< sc_logic > packet_identificatio_U0_ap_continue;
    sc_signal< sc_logic > packet_identificatio_U0_ap_idle;
    sc_signal< sc_logic > packet_identificatio_U0_ap_ready;
    sc_signal< sc_lv<580> > packet_identificatio_U0_eth_level_pkt_V_din;
    sc_signal< sc_logic > packet_identificatio_U0_eth_level_pkt_V_write;
    sc_signal< sc_logic > packet_identificatio_U0_start_out;
    sc_signal< sc_logic > packet_identificatio_U0_start_write;
    sc_signal< sc_logic > packet_identificatio_U0_s_axis_TREADY;
    sc_signal< sc_logic > ethernet_remover_U0_ap_start;
    sc_signal< sc_logic > ethernet_remover_U0_ap_done;
    sc_signal< sc_logic > ethernet_remover_U0_ap_continue;
    sc_signal< sc_logic > ethernet_remover_U0_ap_idle;
    sc_signal< sc_logic > ethernet_remover_U0_ap_ready;
    sc_signal< sc_logic > ethernet_remover_U0_eth_level_pkt_V_read;
    sc_signal< sc_lv<512> > ethernet_remover_U0_m_axis_TDATA;
    sc_signal< sc_logic > ethernet_remover_U0_m_axis_TVALID;
    sc_signal< sc_lv<64> > ethernet_remover_U0_m_axis_TKEEP;
    sc_signal< sc_lv<1> > ethernet_remover_U0_m_axis_TLAST;
    sc_signal< sc_lv<3> > ethernet_remover_U0_m_axis_TDEST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > eth_level_pkt_V_full_n;
    sc_signal< sc_lv<580> > eth_level_pkt_V_dout;
    sc_signal< sc_logic > eth_level_pkt_V_empty_n;
    sc_signal< sc_lv<1> > start_for_ethernet_remover_U0_din;
    sc_signal< sc_logic > start_for_ethernet_remover_U0_full_n;
    sc_signal< sc_lv<1> > start_for_ethernet_remover_U0_dout;
    sc_signal< sc_logic > start_for_ethernet_remover_U0_empty_n;
    sc_signal< sc_logic > ethernet_remover_U0_start_full_n;
    sc_signal< sc_logic > ethernet_remover_U0_start_write;
    static const sc_lv<512> ap_const_lv512_lc_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ethernet_remover_U0_ap_continue();
    void thread_ethernet_remover_U0_ap_start();
    void thread_ethernet_remover_U0_start_full_n();
    void thread_ethernet_remover_U0_start_write();
    void thread_m_axis_TDATA();
    void thread_m_axis_TDEST();
    void thread_m_axis_TKEEP();
    void thread_m_axis_TLAST();
    void thread_m_axis_TVALID();
    void thread_packet_identificatio_U0_ap_continue();
    void thread_packet_identificatio_U0_ap_start();
    void thread_s_axis_TREADY();
    void thread_start_for_ethernet_remover_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
