// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module packet_identificatio (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_TVALID,
        eth_level_pkt_V_din,
        eth_level_pkt_V_full_n,
        eth_level_pkt_V_write,
        start_out,
        start_write,
        s_axis_TDATA,
        s_axis_TREADY,
        s_axis_TKEEP,
        s_axis_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_TVALID;
output  [579:0] eth_level_pkt_V_din;
input   eth_level_pkt_V_full_n;
output   eth_level_pkt_V_write;
output   start_out;
output   start_write;
input  [511:0] s_axis_TDATA;
output   s_axis_TREADY;
input  [63:0] s_axis_TKEEP;
input  [0:0] s_axis_TLAST;

reg ap_done;
reg ap_idle;
reg[579:0] eth_level_pkt_V_din;
reg eth_level_pkt_V_write;
reg start_write;
reg s_axis_TREADY;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    internal_ap_ready;
wire   [0:0] grp_nbreadreq_fu_86_p5;
reg    ap_predicate_op6_read_state1;
reg    ap_predicate_op11_read_state1;
reg    ap_predicate_op17_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] pi_fsm_state_load_reg_387;
reg   [0:0] tmp_1_reg_399;
reg    ap_predicate_op63_write_state2;
reg   [0:0] tmp_reg_408;
reg   [0:0] or_ln879_3_reg_422;
reg    ap_predicate_op71_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [1:0] pi_fsm_state;
reg   [1:0] tdest_r_V;
reg    s_axis_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    eth_level_pkt_V_blk_n;
reg   [511:0] reg_144;
reg   [63:0] reg_148;
wire   [0:0] grp_fu_126_p1;
reg   [0:0] tmp_last_V_reg_403;
reg   [0:0] tmp_last_V_2_reg_412;
wire   [1:0] sendWord_dest_V_fu_288_p3;
reg   [1:0] sendWord_dest_V_reg_417;
wire   [0:0] or_ln879_3_fu_326_p2;
reg    ap_block_pp0_stage0_subdone;
reg   [1:0] ap_phi_mux_storemerge_i_phi_fu_118_p4;
wire   [1:0] ap_phi_reg_pp0_iter0_storemerge_i_reg_115;
wire   [1:0] select_ln228_fu_338_p3;
wire   [579:0] tmp_111_fu_367_p1;
reg    ap_block_pp0_stage0_01001;
wire   [579:0] tmp3_fu_382_p1;
wire   [7:0] p_Result_i_i_9_fu_166_p4;
wire   [7:0] p_Result_i_i_fu_156_p4;
wire   [15:0] ethernetType_V_fu_176_p3;
wire   [3:0] ipVersion_V_fu_184_p4;
wire   [7:0] ipProtocol_V_fu_194_p4;
wire   [0:0] icmp_ln879_4_fu_228_p2;
wire   [0:0] icmp_ln879_5_fu_234_p2;
wire   [0:0] icmp_ln879_fu_204_p2;
wire   [0:0] icmp_ln879_1_fu_210_p2;
wire   [0:0] xor_ln879_fu_254_p2;
wire   [0:0] icmp_ln879_2_fu_216_p2;
wire   [0:0] icmp_ln879_3_fu_222_p2;
wire   [0:0] and_ln879_1_fu_266_p2;
wire   [0:0] and_ln879_fu_260_p2;
wire   [0:0] and_ln879_2_fu_272_p2;
wire   [0:0] or_ln879_fu_282_p2;
wire   [1:0] zext_ln879_fu_278_p1;
wire   [1:0] select_ln198_fu_240_p3;
wire   [0:0] or_ln198_fu_248_p2;
wire   [0:0] xor_ln879_1_fu_302_p2;
wire   [0:0] and_ln879_3_fu_296_p2;
wire   [0:0] and_ln879_4_fu_308_p2;
wire   [0:0] or_ln879_2_fu_320_p2;
wire   [0:0] or_ln879_1_fu_314_p2;
wire   [578:0] tmp_3_fu_356_p5;
wire   [578:0] tmp_4_fu_372_p5;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_199;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 pi_fsm_state = 2'd0;
#0 tdest_r_V = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pi_fsm_state <= select_ln228_fu_338_p3;
    end else if ((((grp_fu_126_p1 == 1'd1) & (grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((grp_fu_126_p1 == 1'd1) & (grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd2) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        pi_fsm_state <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln879_3_reg_422 <= or_ln879_3_fu_326_p2;
        sendWord_dest_V_reg_417 <= sendWord_dest_V_fu_288_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pi_fsm_state_load_reg_387 <= pi_fsm_state;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_144 <= s_axis_TDATA;
        reg_148 <= s_axis_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tdest_r_V <= sendWord_dest_V_fu_288_p3;
        tmp_last_V_2_reg_412 <= s_axis_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((pi_fsm_state == 2'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_399 <= grp_nbreadreq_fu_86_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_403 <= s_axis_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((pi_fsm_state == 2'd0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_408 <= grp_nbreadreq_fu_86_p5;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd0))) begin
        if ((or_ln879_3_fu_326_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_i_phi_fu_118_p4 = 2'd2;
        end else if ((or_ln879_3_fu_326_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_i_phi_fu_118_p4 = 2'd1;
        end else begin
            ap_phi_mux_storemerge_i_phi_fu_118_p4 = ap_phi_reg_pp0_iter0_storemerge_i_reg_115;
        end
    end else begin
        ap_phi_mux_storemerge_i_phi_fu_118_p4 = ap_phi_reg_pp0_iter0_storemerge_i_reg_115;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op71_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op63_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        eth_level_pkt_V_blk_n = eth_level_pkt_V_full_n;
    end else begin
        eth_level_pkt_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_199)) begin
        if ((ap_predicate_op71_write_state2 == 1'b1)) begin
            eth_level_pkt_V_din = tmp3_fu_382_p1;
        end else if ((ap_predicate_op63_write_state2 == 1'b1)) begin
            eth_level_pkt_V_din = tmp_111_fu_367_p1;
        end else begin
            eth_level_pkt_V_din = 'bx;
        end
    end else begin
        eth_level_pkt_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op71_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op63_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        eth_level_pkt_V_write = 1'b1;
    end else begin
        eth_level_pkt_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op11_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op6_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        s_axis_TDATA_blk_n = s_axis_TVALID;
    end else begin
        s_axis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op11_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op6_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        s_axis_TREADY = 1'b1;
    end else begin
        s_axis_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln879_1_fu_266_p2 = (icmp_ln879_3_fu_222_p2 & icmp_ln879_2_fu_216_p2);

assign and_ln879_2_fu_272_p2 = (and_ln879_fu_260_p2 & and_ln879_1_fu_266_p2);

assign and_ln879_3_fu_296_p2 = (or_ln198_fu_248_p2 & icmp_ln879_1_fu_210_p2);

assign and_ln879_4_fu_308_p2 = (xor_ln879_1_fu_302_p2 & and_ln879_fu_260_p2);

assign and_ln879_fu_260_p2 = (xor_ln879_fu_254_p2 & icmp_ln879_1_fu_210_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op71_write_state2 == 1'b1)) | ((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)))) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op71_write_state2 == 1'b1)) | ((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)))) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op71_write_state2 == 1'b1)) | ((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)))) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)) | ((s_axis_TVALID == 1'b0) & (ap_predicate_op6_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op71_write_state2 == 1'b1)) | ((eth_level_pkt_V_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_condition_199 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

assign ap_phi_reg_pp0_iter0_storemerge_i_reg_115 = 'bx;

always @ (*) begin
    ap_predicate_op11_read_state1 = ((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd1));
end

always @ (*) begin
    ap_predicate_op17_read_state1 = ((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd0));
end

always @ (*) begin
    ap_predicate_op63_write_state2 = ((pi_fsm_state_load_reg_387 == 2'd1) & (tmp_1_reg_399 == 1'd1));
end

always @ (*) begin
    ap_predicate_op6_read_state1 = ((grp_nbreadreq_fu_86_p5 == 1'd1) & (pi_fsm_state == 2'd2));
end

always @ (*) begin
    ap_predicate_op71_write_state2 = ((pi_fsm_state_load_reg_387 == 2'd0) & (or_ln879_3_reg_422 == 1'd1) & (tmp_reg_408 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign ethernetType_V_fu_176_p3 = {{p_Result_i_i_9_fu_166_p4}, {p_Result_i_i_fu_156_p4}};

assign grp_fu_126_p1 = s_axis_TLAST;

assign grp_nbreadreq_fu_86_p5 = s_axis_TVALID;

assign icmp_ln879_1_fu_210_p2 = ((ethernetType_V_fu_176_p3 == 16'd2048) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_216_p2 = ((ipVersion_V_fu_184_p4 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_222_p2 = ((ipProtocol_V_fu_194_p4 == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_228_p2 = ((ipProtocol_V_fu_194_p4 == 8'd6) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_234_p2 = ((ipProtocol_V_fu_194_p4 == 8'd17) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_204_p2 = ((ethernetType_V_fu_176_p3 == 16'd2054) ? 1'b1 : 1'b0);

assign ipProtocol_V_fu_194_p4 = {{s_axis_TDATA[191:184]}};

assign ipVersion_V_fu_184_p4 = {{s_axis_TDATA[119:116]}};

assign or_ln198_fu_248_p2 = (icmp_ln879_5_fu_234_p2 | icmp_ln879_4_fu_228_p2);

assign or_ln879_1_fu_314_p2 = (icmp_ln879_fu_204_p2 | and_ln879_3_fu_296_p2);

assign or_ln879_2_fu_320_p2 = (and_ln879_4_fu_308_p2 | and_ln879_2_fu_272_p2);

assign or_ln879_3_fu_326_p2 = (or_ln879_2_fu_320_p2 | or_ln879_1_fu_314_p2);

assign or_ln879_fu_282_p2 = (icmp_ln879_fu_204_p2 | and_ln879_2_fu_272_p2);

assign p_Result_i_i_9_fu_166_p4 = {{s_axis_TDATA[103:96]}};

assign p_Result_i_i_fu_156_p4 = {{s_axis_TDATA[111:104]}};

assign select_ln198_fu_240_p3 = ((icmp_ln879_4_fu_228_p2[0:0] === 1'b1) ? 2'd2 : 2'd3);

assign select_ln228_fu_338_p3 = ((s_axis_TLAST[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_storemerge_i_phi_fu_118_p4);

assign sendWord_dest_V_fu_288_p3 = ((or_ln879_fu_282_p2[0:0] === 1'b1) ? zext_ln879_fu_278_p1 : select_ln198_fu_240_p3);

assign start_out = real_start;

assign tmp3_fu_382_p1 = tmp_4_fu_372_p5;

assign tmp_111_fu_367_p1 = tmp_3_fu_356_p5;

assign tmp_3_fu_356_p5 = {{{{tdest_r_V}, {tmp_last_V_reg_403}}, {reg_148}}, {reg_144}};

assign tmp_4_fu_372_p5 = {{{{sendWord_dest_V_reg_417}, {tmp_last_V_2_reg_412}}, {reg_148}}, {reg_144}};

assign xor_ln879_1_fu_302_p2 = (icmp_ln879_2_fu_216_p2 ^ 1'd1);

assign xor_ln879_fu_254_p2 = (icmp_ln879_fu_204_p2 ^ 1'd1);

assign zext_ln879_fu_278_p1 = and_ln879_2_fu_272_p2;

endmodule //packet_identificatio
