// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module broadcaster_and_mac_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dataIn_TVALID,
        ip_header_out_V_din,
        ip_header_out_V_full_n,
        ip_header_out_V_write,
        no_ip_header_out_V_din,
        no_ip_header_out_V_full_n,
        no_ip_header_out_V_write,
        arpTableRequest_V_V_TREADY,
        start_out,
        start_write,
        dataIn_TDATA,
        dataIn_TREADY,
        dataIn_TKEEP,
        dataIn_TLAST,
        arpTableRequest_V_V_TDATA,
        arpTableRequest_V_V_TVALID,
        regSubNetMask_V,
        regDefaultGateway_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   dataIn_TVALID;
output  [576:0] ip_header_out_V_din;
input   ip_header_out_V_full_n;
output   ip_header_out_V_write;
output  [576:0] no_ip_header_out_V_din;
input   no_ip_header_out_V_full_n;
output   no_ip_header_out_V_write;
input   arpTableRequest_V_V_TREADY;
output   start_out;
output   start_write;
input  [511:0] dataIn_TDATA;
output   dataIn_TREADY;
input  [63:0] dataIn_TKEEP;
input  [0:0] dataIn_TLAST;
output  [31:0] arpTableRequest_V_V_TDATA;
output   arpTableRequest_V_V_TVALID;
input  [31:0] regSubNetMask_V;
input  [31:0] regDefaultGateway_V;

reg ap_done;
reg ap_idle;
reg ip_header_out_V_write;
reg no_ip_header_out_V_write;
reg start_write;
reg dataIn_TREADY;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    internal_ap_ready;
wire   [0:0] tmp_nbreadreq_fu_60_p5;
reg    ap_predicate_op8_read_state1;
reg    ap_predicate_op21_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] bmr_fsm_state_load_reg_199;
reg   [0:0] tmp_reg_203;
reg    ap_predicate_op29_write_state2;
reg    ap_predicate_op32_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln879_reg_222;
reg    ap_predicate_op26_write_state2;
reg    ap_predicate_op27_write_state2;
reg    ap_block_state2_io;
wire    regslice_both_arpTableRequest_V_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] bmr_fsm_state_load_reg_199_pp0_iter1_reg;
reg   [0:0] tmp_reg_203_pp0_iter1_reg;
reg   [0:0] icmp_ln879_reg_222_pp0_iter1_reg;
reg    ap_predicate_op39_write_state3;
reg    ap_predicate_op41_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] bmr_fsm_state;
reg    dataIn_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    arpTableRequest_V_V_TDATA_blk_n;
reg    ip_header_out_V_blk_n;
reg    no_ip_header_out_V_blk_n;
reg   [511:0] reg_127;
reg   [63:0] reg_131;
wire   [0:0] grp_fu_123_p1;
reg   [0:0] tmp_last_V_2_reg_207;
wire   [31:0] dst_ip_addr_V_fu_139_p4;
reg   [31:0] dst_ip_addr_V_reg_212;
wire   [0:0] icmp_ln879_fu_161_p2;
reg   [0:0] tmp_last_V_reg_226;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] xor_ln879_fu_149_p2;
wire   [31:0] and_ln879_fu_155_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg   [31:0] arpTableRequest_V_V_TDATA_int;
reg    arpTableRequest_V_V_TVALID_int;
wire    arpTableRequest_V_V_TREADY_int;
wire    regslice_both_arpTableRequest_V_V_U_vld_out;
reg    ap_condition_241;
reg    ap_condition_338;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 bmr_fsm_state = 1'd0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_arpTableRequest_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(arpTableRequest_V_V_TDATA_int),
    .vld_in(arpTableRequest_V_V_TVALID_int),
    .ack_in(arpTableRequest_V_V_TREADY_int),
    .data_out(arpTableRequest_V_V_TDATA),
    .vld_out(regslice_both_arpTableRequest_V_V_U_vld_out),
    .ack_out(arpTableRequest_V_V_TREADY),
    .apdone_blk(regslice_both_arpTableRequest_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= real_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_338)) begin
        if (((grp_fu_123_p1 == 1'd1) & (bmr_fsm_state == 1'd1))) begin
            bmr_fsm_state <= 1'd0;
        end else if (((grp_fu_123_p1 == 1'd0) & (bmr_fsm_state == 1'd0))) begin
            bmr_fsm_state <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bmr_fsm_state_load_reg_199 <= bmr_fsm_state;
        bmr_fsm_state_load_reg_199_pp0_iter1_reg <= bmr_fsm_state_load_reg_199;
        icmp_ln879_reg_222_pp0_iter1_reg <= icmp_ln879_reg_222;
        tmp_reg_203 <= tmp_nbreadreq_fu_60_p5;
        tmp_reg_203_pp0_iter1_reg <= tmp_reg_203;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_60_p5 == 1'd1) & (bmr_fsm_state == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_ip_addr_V_reg_212 <= {{dataIn_TDATA[159:128]}};
        icmp_ln879_reg_222 <= icmp_ln879_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_nbreadreq_fu_60_p5 == 1'd1) & (bmr_fsm_state == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_nbreadreq_fu_60_p5 == 1'd1) & (bmr_fsm_state == 1'd0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_127 <= dataIn_TDATA;
        reg_131 <= dataIn_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_60_p5 == 1'd1) & (bmr_fsm_state == 1'd0) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_2_reg_207 <= dataIn_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_60_p5 == 1'd1) & (bmr_fsm_state == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_226 <= dataIn_TLAST;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op26_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op27_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op41_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op39_write_state3 == 1'b1)))) begin
        arpTableRequest_V_V_TDATA_blk_n = arpTableRequest_V_V_TREADY_int;
    end else begin
        arpTableRequest_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_241)) begin
        if ((ap_predicate_op27_write_state2 == 1'b1)) begin
            arpTableRequest_V_V_TDATA_int = dst_ip_addr_V_reg_212;
        end else if ((ap_predicate_op26_write_state2 == 1'b1)) begin
            arpTableRequest_V_V_TDATA_int = regDefaultGateway_V;
        end else begin
            arpTableRequest_V_V_TDATA_int = 'bx;
        end
    end else begin
        arpTableRequest_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op26_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op27_write_state2 == 1'b1)))) begin
        arpTableRequest_V_V_TVALID_int = 1'b1;
    end else begin
        arpTableRequest_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1)))) begin
        dataIn_TDATA_blk_n = dataIn_TVALID;
    end else begin
        dataIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op21_read_state1 == 1'b1)) | ((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op8_read_state1 == 1'b1)))) begin
        dataIn_TREADY = 1'b1;
    end else begin
        dataIn_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op29_write_state2 == 1'b1))) begin
        ip_header_out_V_blk_n = ip_header_out_V_full_n;
    end else begin
        ip_header_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op29_write_state2 == 1'b1))) begin
        ip_header_out_V_write = 1'b1;
    end else begin
        ip_header_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op32_write_state2 == 1'b1))) begin
        no_ip_header_out_V_blk_n = no_ip_header_out_V_full_n;
    end else begin
        no_ip_header_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op32_write_state2 == 1'b1))) begin
        no_ip_header_out_V_write = 1'b1;
    end else begin
        no_ip_header_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln879_fu_155_p2 = (xor_ln879_fu_149_p2 & regSubNetMask_V);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((no_ip_header_out_V_full_n == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((ip_header_out_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)))) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (regslice_both_arpTableRequest_V_V_U_apdone_blk == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_arpTableRequest_V_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((no_ip_header_out_V_full_n == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((ip_header_out_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((real_start == 1'b1) & ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_arpTableRequest_V_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((no_ip_header_out_V_full_n == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((ip_header_out_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((real_start == 1'b0) | (ap_done_reg == 1'b1) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((dataIn_TVALID == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((arpTableRequest_V_V_TREADY_int == 1'b0) & (ap_predicate_op26_write_state2 == 1'b1)) | ((arpTableRequest_V_V_TREADY_int == 1'b0) & (ap_predicate_op27_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((no_ip_header_out_V_full_n == 1'b0) & (ap_predicate_op32_write_state2 == 1'b1)) | ((ip_header_out_V_full_n == 1'b0) & (ap_predicate_op29_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = (((arpTableRequest_V_V_TREADY_int == 1'b0) & (ap_predicate_op41_write_state3 == 1'b1)) | ((arpTableRequest_V_V_TREADY_int == 1'b0) & (ap_predicate_op39_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (regslice_both_arpTableRequest_V_V_U_apdone_blk == 1'b1);
end

always @ (*) begin
    ap_condition_241 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_338 = ((tmp_nbreadreq_fu_60_p5 == 1'd1) & (real_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = real_start;

always @ (*) begin
    ap_predicate_op21_read_state1 = ((tmp_nbreadreq_fu_60_p5 == 1'd1) & (bmr_fsm_state == 1'd1));
end

always @ (*) begin
    ap_predicate_op26_write_state2 = ((tmp_reg_203 == 1'd1) & (icmp_ln879_reg_222 == 1'd0) & (bmr_fsm_state_load_reg_199 == 1'd0));
end

always @ (*) begin
    ap_predicate_op27_write_state2 = ((icmp_ln879_reg_222 == 1'd1) & (tmp_reg_203 == 1'd1) & (bmr_fsm_state_load_reg_199 == 1'd0));
end

always @ (*) begin
    ap_predicate_op29_write_state2 = ((tmp_reg_203 == 1'd1) & (bmr_fsm_state_load_reg_199 == 1'd0));
end

always @ (*) begin
    ap_predicate_op32_write_state2 = ((tmp_reg_203 == 1'd1) & (bmr_fsm_state_load_reg_199 == 1'd1));
end

always @ (*) begin
    ap_predicate_op39_write_state3 = ((tmp_reg_203_pp0_iter1_reg == 1'd1) & (icmp_ln879_reg_222_pp0_iter1_reg == 1'd0) & (bmr_fsm_state_load_reg_199_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op41_write_state3 = ((icmp_ln879_reg_222_pp0_iter1_reg == 1'd1) & (tmp_reg_203_pp0_iter1_reg == 1'd1) & (bmr_fsm_state_load_reg_199_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op8_read_state1 = ((tmp_nbreadreq_fu_60_p5 == 1'd1) & (bmr_fsm_state == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign arpTableRequest_V_V_TVALID = regslice_both_arpTableRequest_V_V_U_vld_out;

assign dst_ip_addr_V_fu_139_p4 = {{dataIn_TDATA[159:128]}};

assign grp_fu_123_p1 = dataIn_TLAST;

assign icmp_ln879_fu_161_p2 = ((and_ln879_fu_155_p2 == 32'd0) ? 1'b1 : 1'b0);

assign ip_header_out_V_din = {{{tmp_last_V_2_reg_207}, {reg_131}}, {reg_127}};

assign no_ip_header_out_V_din = {{{tmp_last_V_reg_226}, {reg_131}}, {reg_127}};

assign start_out = real_start;

assign tmp_nbreadreq_fu_60_p5 = dataIn_TVALID;

assign xor_ln879_fu_149_p2 = (regDefaultGateway_V ^ dst_ip_addr_V_fu_139_p4);

endmodule //broadcaster_and_mac_s
