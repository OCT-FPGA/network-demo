// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _broadcaster_and_mac_s_HH_
#define _broadcaster_and_mac_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct broadcaster_and_mac_s : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > dataIn_TVALID;
    sc_out< sc_lv<577> > ip_header_out_V_din;
    sc_in< sc_logic > ip_header_out_V_full_n;
    sc_out< sc_logic > ip_header_out_V_write;
    sc_out< sc_lv<577> > no_ip_header_out_V_din;
    sc_in< sc_logic > no_ip_header_out_V_full_n;
    sc_out< sc_logic > no_ip_header_out_V_write;
    sc_in< sc_logic > arpTableRequest_V_V_TREADY;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<512> > dataIn_TDATA;
    sc_out< sc_logic > dataIn_TREADY;
    sc_in< sc_lv<64> > dataIn_TKEEP;
    sc_in< sc_lv<1> > dataIn_TLAST;
    sc_out< sc_lv<32> > arpTableRequest_V_V_TDATA;
    sc_out< sc_logic > arpTableRequest_V_V_TVALID;
    sc_in< sc_lv<32> > regSubNetMask_V;
    sc_in< sc_lv<32> > regDefaultGateway_V;


    // Module declarations
    broadcaster_and_mac_s(sc_module_name name);
    SC_HAS_PROCESS(broadcaster_and_mac_s);

    ~broadcaster_and_mac_s();

    sc_trace_file* mVcdFile;

    regslice_both<32>* regslice_both_arpTableRequest_V_V_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_60_p5;
    sc_signal< bool > ap_predicate_op8_read_state1;
    sc_signal< bool > ap_predicate_op21_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > bmr_fsm_state_load_reg_199;
    sc_signal< sc_lv<1> > tmp_reg_203;
    sc_signal< bool > ap_predicate_op29_write_state2;
    sc_signal< bool > ap_predicate_op32_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_lv<1> > icmp_ln879_reg_222;
    sc_signal< bool > ap_predicate_op26_write_state2;
    sc_signal< bool > ap_predicate_op27_write_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_logic > regslice_both_arpTableRequest_V_V_U_apdone_blk;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< sc_lv<1> > bmr_fsm_state_load_reg_199_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_reg_203_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln879_reg_222_pp0_iter1_reg;
    sc_signal< bool > ap_predicate_op39_write_state3;
    sc_signal< bool > ap_predicate_op41_write_state3;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > bmr_fsm_state;
    sc_signal< sc_logic > dataIn_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > arpTableRequest_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ip_header_out_V_blk_n;
    sc_signal< sc_logic > no_ip_header_out_V_blk_n;
    sc_signal< sc_lv<512> > reg_127;
    sc_signal< sc_lv<64> > reg_131;
    sc_signal< sc_lv<1> > grp_fu_123_p1;
    sc_signal< sc_lv<1> > tmp_last_V_2_reg_207;
    sc_signal< sc_lv<32> > dst_ip_addr_V_fu_139_p4;
    sc_signal< sc_lv<32> > dst_ip_addr_V_reg_212;
    sc_signal< sc_lv<1> > icmp_ln879_fu_161_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_226;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > xor_ln879_fu_149_p2;
    sc_signal< sc_lv<32> > and_ln879_fu_155_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > arpTableRequest_V_V_TDATA_int;
    sc_signal< sc_logic > arpTableRequest_V_V_TVALID_int;
    sc_signal< sc_logic > arpTableRequest_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_arpTableRequest_V_V_U_vld_out;
    sc_signal< bool > ap_condition_241;
    sc_signal< bool > ap_condition_338;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<32> ap_const_lv32_9F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln879_fu_155_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_241();
    void thread_ap_condition_338();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_predicate_op21_read_state1();
    void thread_ap_predicate_op26_write_state2();
    void thread_ap_predicate_op27_write_state2();
    void thread_ap_predicate_op29_write_state2();
    void thread_ap_predicate_op32_write_state2();
    void thread_ap_predicate_op39_write_state3();
    void thread_ap_predicate_op41_write_state3();
    void thread_ap_predicate_op8_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_arpTableRequest_V_V_TDATA_blk_n();
    void thread_arpTableRequest_V_V_TDATA_int();
    void thread_arpTableRequest_V_V_TVALID();
    void thread_arpTableRequest_V_V_TVALID_int();
    void thread_dataIn_TDATA_blk_n();
    void thread_dataIn_TREADY();
    void thread_dst_ip_addr_V_fu_139_p4();
    void thread_grp_fu_123_p1();
    void thread_icmp_ln879_fu_161_p2();
    void thread_internal_ap_ready();
    void thread_ip_header_out_V_blk_n();
    void thread_ip_header_out_V_din();
    void thread_ip_header_out_V_write();
    void thread_no_ip_header_out_V_blk_n();
    void thread_no_ip_header_out_V_din();
    void thread_no_ip_header_out_V_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_nbreadreq_fu_60_p5();
    void thread_xor_ln879_fu_149_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
