// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "broadcaster_and_mac_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic broadcaster_and_mac_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic broadcaster_and_mac_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> broadcaster_and_mac_s::ap_ST_fsm_pp0_stage0 = "1";
const bool broadcaster_and_mac_s::ap_const_boolean_1 = true;
const sc_lv<32> broadcaster_and_mac_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> broadcaster_and_mac_s::ap_const_lv1_0 = "0";
const sc_lv<1> broadcaster_and_mac_s::ap_const_lv1_1 = "1";
const bool broadcaster_and_mac_s::ap_const_boolean_0 = false;
const sc_lv<32> broadcaster_and_mac_s::ap_const_lv32_80 = "10000000";
const sc_lv<32> broadcaster_and_mac_s::ap_const_lv32_9F = "10011111";

broadcaster_and_mac_s::broadcaster_and_mac_s(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_arpTableRequest_V_V_U = new regslice_both<32>("regslice_both_arpTableRequest_V_V_U");
    regslice_both_arpTableRequest_V_V_U->ap_clk(ap_clk);
    regslice_both_arpTableRequest_V_V_U->ap_rst(ap_rst);
    regslice_both_arpTableRequest_V_V_U->data_in(arpTableRequest_V_V_TDATA_int);
    regslice_both_arpTableRequest_V_V_U->vld_in(arpTableRequest_V_V_TVALID_int);
    regslice_both_arpTableRequest_V_V_U->ack_in(arpTableRequest_V_V_TREADY_int);
    regslice_both_arpTableRequest_V_V_U->data_out(arpTableRequest_V_V_TDATA);
    regslice_both_arpTableRequest_V_V_U->vld_out(regslice_both_arpTableRequest_V_V_U_vld_out);
    regslice_both_arpTableRequest_V_V_U->ack_out(arpTableRequest_V_V_TREADY);
    regslice_both_arpTableRequest_V_V_U->apdone_blk(regslice_both_arpTableRequest_V_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln879_fu_155_p2);
    sensitive << ( regSubNetMask_V );
    sensitive << ( xor_ln879_fu_149_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op29_write_state2 );
    sensitive << ( no_ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( regslice_both_arpTableRequest_V_V_U_apdone_blk );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op29_write_state2 );
    sensitive << ( no_ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_arpTableRequest_V_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op29_write_state2 );
    sensitive << ( no_ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_arpTableRequest_V_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_predicate_op26_write_state2 );
    sensitive << ( ap_predicate_op27_write_state2 );
    sensitive << ( arpTableRequest_V_V_TREADY_int );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op29_write_state2 );
    sensitive << ( no_ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_predicate_op39_write_state3 );
    sensitive << ( ap_predicate_op41_write_state3 );
    sensitive << ( arpTableRequest_V_V_TREADY_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( regslice_both_arpTableRequest_V_V_U_apdone_blk );

    SC_METHOD(thread_ap_condition_241);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_condition_338);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_60_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( real_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op21_read_state1);
    sensitive << ( tmp_nbreadreq_fu_60_p5 );
    sensitive << ( bmr_fsm_state );

    SC_METHOD(thread_ap_predicate_op26_write_state2);
    sensitive << ( bmr_fsm_state_load_reg_199 );
    sensitive << ( tmp_reg_203 );
    sensitive << ( icmp_ln879_reg_222 );

    SC_METHOD(thread_ap_predicate_op27_write_state2);
    sensitive << ( bmr_fsm_state_load_reg_199 );
    sensitive << ( tmp_reg_203 );
    sensitive << ( icmp_ln879_reg_222 );

    SC_METHOD(thread_ap_predicate_op29_write_state2);
    sensitive << ( bmr_fsm_state_load_reg_199 );
    sensitive << ( tmp_reg_203 );

    SC_METHOD(thread_ap_predicate_op32_write_state2);
    sensitive << ( bmr_fsm_state_load_reg_199 );
    sensitive << ( tmp_reg_203 );

    SC_METHOD(thread_ap_predicate_op39_write_state3);
    sensitive << ( bmr_fsm_state_load_reg_199_pp0_iter1_reg );
    sensitive << ( tmp_reg_203_pp0_iter1_reg );
    sensitive << ( icmp_ln879_reg_222_pp0_iter1_reg );

    SC_METHOD(thread_ap_predicate_op41_write_state3);
    sensitive << ( bmr_fsm_state_load_reg_199_pp0_iter1_reg );
    sensitive << ( tmp_reg_203_pp0_iter1_reg );
    sensitive << ( icmp_ln879_reg_222_pp0_iter1_reg );

    SC_METHOD(thread_ap_predicate_op8_read_state1);
    sensitive << ( tmp_nbreadreq_fu_60_p5 );
    sensitive << ( bmr_fsm_state );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( real_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_arpTableRequest_V_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op26_write_state2 );
    sensitive << ( ap_predicate_op27_write_state2 );
    sensitive << ( ap_predicate_op39_write_state3 );
    sensitive << ( ap_predicate_op41_write_state3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( arpTableRequest_V_V_TREADY_int );

    SC_METHOD(thread_arpTableRequest_V_V_TDATA_int);
    sensitive << ( ap_predicate_op26_write_state2 );
    sensitive << ( ap_predicate_op27_write_state2 );
    sensitive << ( regDefaultGateway_V );
    sensitive << ( dst_ip_addr_V_reg_212 );
    sensitive << ( ap_condition_241 );

    SC_METHOD(thread_arpTableRequest_V_V_TVALID);
    sensitive << ( regslice_both_arpTableRequest_V_V_U_vld_out );

    SC_METHOD(thread_arpTableRequest_V_V_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op26_write_state2 );
    sensitive << ( ap_predicate_op27_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dataIn_TDATA_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( dataIn_TVALID );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_dataIn_TREADY);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op8_read_state1 );
    sensitive << ( ap_predicate_op21_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_ip_addr_V_fu_139_p4);
    sensitive << ( dataIn_TDATA );

    SC_METHOD(thread_grp_fu_123_p1);
    sensitive << ( dataIn_TLAST );

    SC_METHOD(thread_icmp_ln879_fu_161_p2);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_60_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( bmr_fsm_state );
    sensitive << ( and_ln879_fu_155_p2 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ip_header_out_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op29_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ip_header_out_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op29_write_state2 );
    sensitive << ( reg_127 );
    sensitive << ( reg_131 );
    sensitive << ( tmp_last_V_2_reg_207 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ip_header_out_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op29_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_no_ip_header_out_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( no_ip_header_out_V_full_n );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_no_ip_header_out_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( reg_127 );
    sensitive << ( reg_131 );
    sensitive << ( tmp_last_V_reg_226 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_no_ip_header_out_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op32_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_nbreadreq_fu_60_p5);
    sensitive << ( dataIn_TVALID );

    SC_METHOD(thread_xor_ln879_fu_149_p2);
    sensitive << ( regDefaultGateway_V );
    sensitive << ( dst_ip_addr_V_fu_139_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    bmr_fsm_state = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "broadcaster_and_mac_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dataIn_TVALID, "(port)dataIn_TVALID");
    sc_trace(mVcdFile, ip_header_out_V_din, "(port)ip_header_out_V_din");
    sc_trace(mVcdFile, ip_header_out_V_full_n, "(port)ip_header_out_V_full_n");
    sc_trace(mVcdFile, ip_header_out_V_write, "(port)ip_header_out_V_write");
    sc_trace(mVcdFile, no_ip_header_out_V_din, "(port)no_ip_header_out_V_din");
    sc_trace(mVcdFile, no_ip_header_out_V_full_n, "(port)no_ip_header_out_V_full_n");
    sc_trace(mVcdFile, no_ip_header_out_V_write, "(port)no_ip_header_out_V_write");
    sc_trace(mVcdFile, arpTableRequest_V_V_TREADY, "(port)arpTableRequest_V_V_TREADY");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, dataIn_TDATA, "(port)dataIn_TDATA");
    sc_trace(mVcdFile, dataIn_TREADY, "(port)dataIn_TREADY");
    sc_trace(mVcdFile, dataIn_TKEEP, "(port)dataIn_TKEEP");
    sc_trace(mVcdFile, dataIn_TLAST, "(port)dataIn_TLAST");
    sc_trace(mVcdFile, arpTableRequest_V_V_TDATA, "(port)arpTableRequest_V_V_TDATA");
    sc_trace(mVcdFile, arpTableRequest_V_V_TVALID, "(port)arpTableRequest_V_V_TVALID");
    sc_trace(mVcdFile, regSubNetMask_V, "(port)regSubNetMask_V");
    sc_trace(mVcdFile, regDefaultGateway_V, "(port)regDefaultGateway_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_60_p5, "tmp_nbreadreq_fu_60_p5");
    sc_trace(mVcdFile, ap_predicate_op8_read_state1, "ap_predicate_op8_read_state1");
    sc_trace(mVcdFile, ap_predicate_op21_read_state1, "ap_predicate_op21_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, bmr_fsm_state_load_reg_199, "bmr_fsm_state_load_reg_199");
    sc_trace(mVcdFile, tmp_reg_203, "tmp_reg_203");
    sc_trace(mVcdFile, ap_predicate_op29_write_state2, "ap_predicate_op29_write_state2");
    sc_trace(mVcdFile, ap_predicate_op32_write_state2, "ap_predicate_op32_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, icmp_ln879_reg_222, "icmp_ln879_reg_222");
    sc_trace(mVcdFile, ap_predicate_op26_write_state2, "ap_predicate_op26_write_state2");
    sc_trace(mVcdFile, ap_predicate_op27_write_state2, "ap_predicate_op27_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, regslice_both_arpTableRequest_V_V_U_apdone_blk, "regslice_both_arpTableRequest_V_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, bmr_fsm_state_load_reg_199_pp0_iter1_reg, "bmr_fsm_state_load_reg_199_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_reg_203_pp0_iter1_reg, "tmp_reg_203_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln879_reg_222_pp0_iter1_reg, "icmp_ln879_reg_222_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_predicate_op39_write_state3, "ap_predicate_op39_write_state3");
    sc_trace(mVcdFile, ap_predicate_op41_write_state3, "ap_predicate_op41_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, bmr_fsm_state, "bmr_fsm_state");
    sc_trace(mVcdFile, dataIn_TDATA_blk_n, "dataIn_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, arpTableRequest_V_V_TDATA_blk_n, "arpTableRequest_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ip_header_out_V_blk_n, "ip_header_out_V_blk_n");
    sc_trace(mVcdFile, no_ip_header_out_V_blk_n, "no_ip_header_out_V_blk_n");
    sc_trace(mVcdFile, reg_127, "reg_127");
    sc_trace(mVcdFile, reg_131, "reg_131");
    sc_trace(mVcdFile, grp_fu_123_p1, "grp_fu_123_p1");
    sc_trace(mVcdFile, tmp_last_V_2_reg_207, "tmp_last_V_2_reg_207");
    sc_trace(mVcdFile, dst_ip_addr_V_fu_139_p4, "dst_ip_addr_V_fu_139_p4");
    sc_trace(mVcdFile, dst_ip_addr_V_reg_212, "dst_ip_addr_V_reg_212");
    sc_trace(mVcdFile, icmp_ln879_fu_161_p2, "icmp_ln879_fu_161_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_226, "tmp_last_V_reg_226");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, xor_ln879_fu_149_p2, "xor_ln879_fu_149_p2");
    sc_trace(mVcdFile, and_ln879_fu_155_p2, "and_ln879_fu_155_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, arpTableRequest_V_V_TDATA_int, "arpTableRequest_V_V_TDATA_int");
    sc_trace(mVcdFile, arpTableRequest_V_V_TVALID_int, "arpTableRequest_V_V_TVALID_int");
    sc_trace(mVcdFile, arpTableRequest_V_V_TREADY_int, "arpTableRequest_V_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_arpTableRequest_V_V_U_vld_out, "regslice_both_arpTableRequest_V_V_U_vld_out");
    sc_trace(mVcdFile, ap_condition_241, "ap_condition_241");
    sc_trace(mVcdFile, ap_condition_338, "ap_condition_338");
#endif

    }
}

broadcaster_and_mac_s::~broadcaster_and_mac_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_arpTableRequest_V_V_U;
}

void broadcaster_and_mac_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = real_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_338.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, grp_fu_123_p1.read()))) {
            bmr_fsm_state = ap_const_lv1_0;
        } else if ((esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, grp_fu_123_p1.read()))) {
            bmr_fsm_state = ap_const_lv1_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bmr_fsm_state_load_reg_199 = bmr_fsm_state.read();
        bmr_fsm_state_load_reg_199_pp0_iter1_reg = bmr_fsm_state_load_reg_199.read();
        icmp_ln879_reg_222_pp0_iter1_reg = icmp_ln879_reg_222.read();
        tmp_reg_203 = tmp_nbreadreq_fu_60_p5.read();
        tmp_reg_203_pp0_iter1_reg = tmp_reg_203.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_ip_addr_V_reg_212 = dataIn_TDATA.read().range(159, 128);
        icmp_ln879_reg_222 = icmp_ln879_fu_161_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_127 = dataIn_TDATA.read();
        reg_131 = dataIn_TKEEP.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_2_reg_207 = dataIn_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_last_V_reg_226 = dataIn_TLAST.read();
    }
}

void broadcaster_and_mac_s::thread_and_ln879_fu_155_p2() {
    and_ln879_fu_155_p2 = (regSubNetMask_V.read() & xor_ln879_fu_149_p2.read());
}

void broadcaster_and_mac_s::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void broadcaster_and_mac_s::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void broadcaster_and_mac_s::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, ip_header_out_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op29_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, no_ip_header_out_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpTableRequest_V_V_U_apdone_blk.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void broadcaster_and_mac_s::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, ip_header_out_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op29_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, no_ip_header_out_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpTableRequest_V_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void broadcaster_and_mac_s::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, ip_header_out_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op29_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, no_ip_header_out_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpTableRequest_V_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void broadcaster_and_mac_s::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, dataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void broadcaster_and_mac_s::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpTableRequest_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpTableRequest_V_V_TREADY_int.read())));
}

void broadcaster_and_mac_s::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, ip_header_out_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op29_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, no_ip_header_out_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read())));
}

void broadcaster_and_mac_s::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpTableRequest_V_V_TREADY_int.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpTableRequest_V_V_TREADY_int.read())));
}

void broadcaster_and_mac_s::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpTableRequest_V_V_U_apdone_blk.read());
}

void broadcaster_and_mac_s::thread_ap_condition_241() {
    ap_condition_241 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void broadcaster_and_mac_s::thread_ap_condition_338() {
    ap_condition_338 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void broadcaster_and_mac_s::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void broadcaster_and_mac_s::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void broadcaster_and_mac_s::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = real_start.read();
}

void broadcaster_and_mac_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_ap_predicate_op21_read_state1() {
    ap_predicate_op21_read_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_1));
}

void broadcaster_and_mac_s::thread_ap_predicate_op26_write_state2() {
    ap_predicate_op26_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, bmr_fsm_state_load_reg_199.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_203.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_222.read()));
}

void broadcaster_and_mac_s::thread_ap_predicate_op27_write_state2() {
    ap_predicate_op27_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, bmr_fsm_state_load_reg_199.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_203.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_222.read()));
}

void broadcaster_and_mac_s::thread_ap_predicate_op29_write_state2() {
    ap_predicate_op29_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, bmr_fsm_state_load_reg_199.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_203.read()));
}

void broadcaster_and_mac_s::thread_ap_predicate_op32_write_state2() {
    ap_predicate_op32_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_203.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, bmr_fsm_state_load_reg_199.read()));
}

void broadcaster_and_mac_s::thread_ap_predicate_op39_write_state3() {
    ap_predicate_op39_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, bmr_fsm_state_load_reg_199_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_203_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_reg_222_pp0_iter1_reg.read()));
}

void broadcaster_and_mac_s::thread_ap_predicate_op41_write_state3() {
    ap_predicate_op41_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, bmr_fsm_state_load_reg_199_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_203_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_222_pp0_iter1_reg.read()));
}

void broadcaster_and_mac_s::thread_ap_predicate_op8_read_state1() {
    ap_predicate_op8_read_state1 = (esl_seteq<1,1,1>(bmr_fsm_state.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_60_p5.read(), ap_const_lv1_1));
}

void broadcaster_and_mac_s::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void broadcaster_and_mac_s::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_arpTableRequest_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op41_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op39_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        arpTableRequest_V_V_TDATA_blk_n = arpTableRequest_V_V_TREADY_int.read();
    } else {
        arpTableRequest_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void broadcaster_and_mac_s::thread_arpTableRequest_V_V_TDATA_int() {
    if (esl_seteq<1,1,1>(ap_condition_241.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state2.read())) {
            arpTableRequest_V_V_TDATA_int = dst_ip_addr_V_reg_212.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read())) {
            arpTableRequest_V_V_TDATA_int = regDefaultGateway_V.read();
        } else {
            arpTableRequest_V_V_TDATA_int = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        arpTableRequest_V_V_TDATA_int = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void broadcaster_and_mac_s::thread_arpTableRequest_V_V_TVALID() {
    arpTableRequest_V_V_TVALID = regslice_both_arpTableRequest_V_V_U_vld_out.read();
}

void broadcaster_and_mac_s::thread_arpTableRequest_V_V_TVALID_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op26_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        arpTableRequest_V_V_TVALID_int = ap_const_logic_1;
    } else {
        arpTableRequest_V_V_TVALID_int = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_dataIn_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        dataIn_TDATA_blk_n = dataIn_TVALID.read();
    } else {
        dataIn_TDATA_blk_n = ap_const_logic_1;
    }
}

void broadcaster_and_mac_s::thread_dataIn_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op8_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op21_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        dataIn_TREADY = ap_const_logic_1;
    } else {
        dataIn_TREADY = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_dst_ip_addr_V_fu_139_p4() {
    dst_ip_addr_V_fu_139_p4 = dataIn_TDATA.read().range(159, 128);
}

void broadcaster_and_mac_s::thread_grp_fu_123_p1() {
    grp_fu_123_p1 = dataIn_TLAST.read();
}

void broadcaster_and_mac_s::thread_icmp_ln879_fu_161_p2() {
    icmp_ln879_fu_161_p2 = (!and_ln879_fu_155_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(and_ln879_fu_155_p2.read() == ap_const_lv32_0);
}

void broadcaster_and_mac_s::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_ip_header_out_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op29_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ip_header_out_V_blk_n = ip_header_out_V_full_n.read();
    } else {
        ip_header_out_V_blk_n = ap_const_logic_1;
    }
}

void broadcaster_and_mac_s::thread_ip_header_out_V_din() {
    ip_header_out_V_din = esl_concat<65,512>(esl_concat<1,64>(tmp_last_V_2_reg_207.read(), reg_131.read()), reg_127.read());
}

void broadcaster_and_mac_s::thread_ip_header_out_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op29_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ip_header_out_V_write = ap_const_logic_1;
    } else {
        ip_header_out_V_write = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_no_ip_header_out_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        no_ip_header_out_V_blk_n = no_ip_header_out_V_full_n.read();
    } else {
        no_ip_header_out_V_blk_n = ap_const_logic_1;
    }
}

void broadcaster_and_mac_s::thread_no_ip_header_out_V_din() {
    no_ip_header_out_V_din = esl_concat<65,512>(esl_concat<1,64>(tmp_last_V_reg_226.read(), reg_131.read()), reg_127.read());
}

void broadcaster_and_mac_s::thread_no_ip_header_out_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        no_ip_header_out_V_write = ap_const_logic_1;
    } else {
        no_ip_header_out_V_write = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void broadcaster_and_mac_s::thread_start_out() {
    start_out = real_start.read();
}

void broadcaster_and_mac_s::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void broadcaster_and_mac_s::thread_tmp_nbreadreq_fu_60_p5() {
    tmp_nbreadreq_fu_60_p5 =  (sc_lv<1>) ((dataIn_TVALID.read()));
}

void broadcaster_and_mac_s::thread_xor_ln879_fu_149_p2() {
    xor_ln879_fu_149_p2 = (regDefaultGateway_V.read() ^ dst_ip_addr_V_fu_139_p4.read());
}

void broadcaster_and_mac_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

