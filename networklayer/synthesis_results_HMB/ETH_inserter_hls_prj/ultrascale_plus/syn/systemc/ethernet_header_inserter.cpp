// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ethernet_header_inserter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<512> ethernet_header_inserter::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> ethernet_header_inserter::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> ethernet_header_inserter::ap_const_lv1_0 = "0";
const sc_lv<32> ethernet_header_inserter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic ethernet_header_inserter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ethernet_header_inserter::ap_const_logic_0 = sc_dt::Log_0;

ethernet_header_inserter::ethernet_header_inserter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    broadcaster_and_mac_U0 = new broadcaster_and_mac_s("broadcaster_and_mac_U0");
    broadcaster_and_mac_U0->ap_clk(ap_clk);
    broadcaster_and_mac_U0->ap_rst(ap_rst_n_inv);
    broadcaster_and_mac_U0->ap_start(broadcaster_and_mac_U0_ap_start);
    broadcaster_and_mac_U0->start_full_n(start_for_compute_and_insert_i_U0_full_n);
    broadcaster_and_mac_U0->ap_done(broadcaster_and_mac_U0_ap_done);
    broadcaster_and_mac_U0->ap_continue(broadcaster_and_mac_U0_ap_continue);
    broadcaster_and_mac_U0->ap_idle(broadcaster_and_mac_U0_ap_idle);
    broadcaster_and_mac_U0->ap_ready(broadcaster_and_mac_U0_ap_ready);
    broadcaster_and_mac_U0->dataIn_TVALID(dataIn_TVALID);
    broadcaster_and_mac_U0->ip_header_out_V_din(broadcaster_and_mac_U0_ip_header_out_V_din);
    broadcaster_and_mac_U0->ip_header_out_V_full_n(ip_header_out_V_full_n);
    broadcaster_and_mac_U0->ip_header_out_V_write(broadcaster_and_mac_U0_ip_header_out_V_write);
    broadcaster_and_mac_U0->no_ip_header_out_V_din(broadcaster_and_mac_U0_no_ip_header_out_V_din);
    broadcaster_and_mac_U0->no_ip_header_out_V_full_n(no_ip_header_out_V_full_n);
    broadcaster_and_mac_U0->no_ip_header_out_V_write(broadcaster_and_mac_U0_no_ip_header_out_V_write);
    broadcaster_and_mac_U0->arpTableRequest_V_V_TREADY(arpTableRequest_V_V_TREADY);
    broadcaster_and_mac_U0->start_out(broadcaster_and_mac_U0_start_out);
    broadcaster_and_mac_U0->start_write(broadcaster_and_mac_U0_start_write);
    broadcaster_and_mac_U0->dataIn_TDATA(dataIn_TDATA);
    broadcaster_and_mac_U0->dataIn_TREADY(broadcaster_and_mac_U0_dataIn_TREADY);
    broadcaster_and_mac_U0->dataIn_TKEEP(dataIn_TKEEP);
    broadcaster_and_mac_U0->dataIn_TLAST(dataIn_TLAST);
    broadcaster_and_mac_U0->arpTableRequest_V_V_TDATA(broadcaster_and_mac_U0_arpTableRequest_V_V_TDATA);
    broadcaster_and_mac_U0->arpTableRequest_V_V_TVALID(broadcaster_and_mac_U0_arpTableRequest_V_V_TVALID);
    broadcaster_and_mac_U0->regSubNetMask_V(regSubNetMask_V);
    broadcaster_and_mac_U0->regDefaultGateway_V(regDefaultGateway_V);
    compute_and_insert_i_U0 = new compute_and_insert_i("compute_and_insert_i_U0");
    compute_and_insert_i_U0->ap_clk(ap_clk);
    compute_and_insert_i_U0->ap_rst(ap_rst_n_inv);
    compute_and_insert_i_U0->ap_start(compute_and_insert_i_U0_ap_start);
    compute_and_insert_i_U0->ap_done(compute_and_insert_i_U0_ap_done);
    compute_and_insert_i_U0->ap_continue(compute_and_insert_i_U0_ap_continue);
    compute_and_insert_i_U0->ap_idle(compute_and_insert_i_U0_ap_idle);
    compute_and_insert_i_U0->ap_ready(compute_and_insert_i_U0_ap_ready);
    compute_and_insert_i_U0->ip_header_out_V_dout(ip_header_out_V_dout);
    compute_and_insert_i_U0->ip_header_out_V_empty_n(ip_header_out_V_empty_n);
    compute_and_insert_i_U0->ip_header_out_V_read(compute_and_insert_i_U0_ip_header_out_V_read);
    compute_and_insert_i_U0->ip_header_checksum_V_din(compute_and_insert_i_U0_ip_header_checksum_V_din);
    compute_and_insert_i_U0->ip_header_checksum_V_full_n(ip_header_checksum_V_full_n);
    compute_and_insert_i_U0->ip_header_checksum_V_write(compute_and_insert_i_U0_ip_header_checksum_V_write);
    handle_output_U0 = new handle_output("handle_output_U0");
    handle_output_U0->ap_clk(ap_clk);
    handle_output_U0->ap_rst(ap_rst_n_inv);
    handle_output_U0->ap_start(handle_output_U0_ap_start);
    handle_output_U0->ap_done(handle_output_U0_ap_done);
    handle_output_U0->ap_continue(handle_output_U0_ap_continue);
    handle_output_U0->ap_idle(handle_output_U0_ap_idle);
    handle_output_U0->ap_ready(handle_output_U0_ap_ready);
    handle_output_U0->no_ip_header_out_V_dout(no_ip_header_out_V_dout);
    handle_output_U0->no_ip_header_out_V_empty_n(no_ip_header_out_V_empty_n);
    handle_output_U0->no_ip_header_out_V_read(handle_output_U0_no_ip_header_out_V_read);
    handle_output_U0->ip_header_checksum_V_dout(ip_header_checksum_V_dout);
    handle_output_U0->ip_header_checksum_V_empty_n(ip_header_checksum_V_empty_n);
    handle_output_U0->ip_header_checksum_V_read(handle_output_U0_ip_header_checksum_V_read);
    handle_output_U0->arpTableReplay_V_TVALID(arpTableReplay_V_TVALID);
    handle_output_U0->dataOut_TREADY(dataOut_TREADY);
    handle_output_U0->arpTableReplay_V_TDATA(arpTableReplay_V_TDATA);
    handle_output_U0->arpTableReplay_V_TREADY(handle_output_U0_arpTableReplay_V_TREADY);
    handle_output_U0->myMacAddress_V(myMacAddress_V);
    handle_output_U0->dataOut_TDATA(handle_output_U0_dataOut_TDATA);
    handle_output_U0->dataOut_TVALID(handle_output_U0_dataOut_TVALID);
    handle_output_U0->dataOut_TKEEP(handle_output_U0_dataOut_TKEEP);
    handle_output_U0->dataOut_TLAST(handle_output_U0_dataOut_TLAST);
    ip_header_out_V_U = new fifo_w577_d16_A("ip_header_out_V_U");
    ip_header_out_V_U->clk(ap_clk);
    ip_header_out_V_U->reset(ap_rst_n_inv);
    ip_header_out_V_U->if_read_ce(ap_var_for_const0);
    ip_header_out_V_U->if_write_ce(ap_var_for_const0);
    ip_header_out_V_U->if_din(broadcaster_and_mac_U0_ip_header_out_V_din);
    ip_header_out_V_U->if_full_n(ip_header_out_V_full_n);
    ip_header_out_V_U->if_write(broadcaster_and_mac_U0_ip_header_out_V_write);
    ip_header_out_V_U->if_dout(ip_header_out_V_dout);
    ip_header_out_V_U->if_empty_n(ip_header_out_V_empty_n);
    ip_header_out_V_U->if_read(compute_and_insert_i_U0_ip_header_out_V_read);
    no_ip_header_out_V_U = new fifo_w577_d16_A("no_ip_header_out_V_U");
    no_ip_header_out_V_U->clk(ap_clk);
    no_ip_header_out_V_U->reset(ap_rst_n_inv);
    no_ip_header_out_V_U->if_read_ce(ap_var_for_const0);
    no_ip_header_out_V_U->if_write_ce(ap_var_for_const0);
    no_ip_header_out_V_U->if_din(broadcaster_and_mac_U0_no_ip_header_out_V_din);
    no_ip_header_out_V_U->if_full_n(no_ip_header_out_V_full_n);
    no_ip_header_out_V_U->if_write(broadcaster_and_mac_U0_no_ip_header_out_V_write);
    no_ip_header_out_V_U->if_dout(no_ip_header_out_V_dout);
    no_ip_header_out_V_U->if_empty_n(no_ip_header_out_V_empty_n);
    no_ip_header_out_V_U->if_read(handle_output_U0_no_ip_header_out_V_read);
    ip_header_checksum_V_U = new fifo_w577_d16_A("ip_header_checksum_V_U");
    ip_header_checksum_V_U->clk(ap_clk);
    ip_header_checksum_V_U->reset(ap_rst_n_inv);
    ip_header_checksum_V_U->if_read_ce(ap_var_for_const0);
    ip_header_checksum_V_U->if_write_ce(ap_var_for_const0);
    ip_header_checksum_V_U->if_din(compute_and_insert_i_U0_ip_header_checksum_V_din);
    ip_header_checksum_V_U->if_full_n(ip_header_checksum_V_full_n);
    ip_header_checksum_V_U->if_write(compute_and_insert_i_U0_ip_header_checksum_V_write);
    ip_header_checksum_V_U->if_dout(ip_header_checksum_V_dout);
    ip_header_checksum_V_U->if_empty_n(ip_header_checksum_V_empty_n);
    ip_header_checksum_V_U->if_read(handle_output_U0_ip_header_checksum_V_read);
    start_for_computebkb_U = new start_for_computebkb("start_for_computebkb_U");
    start_for_computebkb_U->clk(ap_clk);
    start_for_computebkb_U->reset(ap_rst_n_inv);
    start_for_computebkb_U->if_read_ce(ap_var_for_const0);
    start_for_computebkb_U->if_write_ce(ap_var_for_const0);
    start_for_computebkb_U->if_din(start_for_compute_and_insert_i_U0_din);
    start_for_computebkb_U->if_full_n(start_for_compute_and_insert_i_U0_full_n);
    start_for_computebkb_U->if_write(broadcaster_and_mac_U0_start_write);
    start_for_computebkb_U->if_dout(start_for_compute_and_insert_i_U0_dout);
    start_for_computebkb_U->if_empty_n(start_for_compute_and_insert_i_U0_empty_n);
    start_for_computebkb_U->if_read(compute_and_insert_i_U0_ap_ready);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_arpTableReplay_V_TREADY);
    sensitive << ( handle_output_U0_arpTableReplay_V_TREADY );

    SC_METHOD(thread_arpTableRequest_V_V_TDATA);
    sensitive << ( broadcaster_and_mac_U0_arpTableRequest_V_V_TDATA );

    SC_METHOD(thread_arpTableRequest_V_V_TVALID);
    sensitive << ( broadcaster_and_mac_U0_arpTableRequest_V_V_TVALID );

    SC_METHOD(thread_broadcaster_and_mac_U0_ap_continue);

    SC_METHOD(thread_broadcaster_and_mac_U0_ap_start);

    SC_METHOD(thread_compute_and_insert_i_U0_ap_continue);

    SC_METHOD(thread_compute_and_insert_i_U0_ap_start);
    sensitive << ( start_for_compute_and_insert_i_U0_empty_n );

    SC_METHOD(thread_compute_and_insert_i_U0_start_full_n);

    SC_METHOD(thread_compute_and_insert_i_U0_start_write);

    SC_METHOD(thread_dataIn_TREADY);
    sensitive << ( broadcaster_and_mac_U0_dataIn_TREADY );

    SC_METHOD(thread_dataOut_TDATA);
    sensitive << ( handle_output_U0_dataOut_TDATA );

    SC_METHOD(thread_dataOut_TKEEP);
    sensitive << ( handle_output_U0_dataOut_TKEEP );

    SC_METHOD(thread_dataOut_TLAST);
    sensitive << ( handle_output_U0_dataOut_TLAST );

    SC_METHOD(thread_dataOut_TVALID);
    sensitive << ( handle_output_U0_dataOut_TVALID );

    SC_METHOD(thread_handle_output_U0_ap_continue);

    SC_METHOD(thread_handle_output_U0_ap_start);

    SC_METHOD(thread_handle_output_U0_start_full_n);

    SC_METHOD(thread_handle_output_U0_start_write);

    SC_METHOD(thread_start_for_compute_and_insert_i_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ethernet_header_inserter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, dataIn_TDATA, "(port)dataIn_TDATA");
    sc_trace(mVcdFile, dataIn_TKEEP, "(port)dataIn_TKEEP");
    sc_trace(mVcdFile, dataIn_TLAST, "(port)dataIn_TLAST");
    sc_trace(mVcdFile, dataOut_TDATA, "(port)dataOut_TDATA");
    sc_trace(mVcdFile, dataOut_TKEEP, "(port)dataOut_TKEEP");
    sc_trace(mVcdFile, dataOut_TLAST, "(port)dataOut_TLAST");
    sc_trace(mVcdFile, arpTableReplay_V_TDATA, "(port)arpTableReplay_V_TDATA");
    sc_trace(mVcdFile, arpTableRequest_V_V_TDATA, "(port)arpTableRequest_V_V_TDATA");
    sc_trace(mVcdFile, myMacAddress_V, "(port)myMacAddress_V");
    sc_trace(mVcdFile, regSubNetMask_V, "(port)regSubNetMask_V");
    sc_trace(mVcdFile, regDefaultGateway_V, "(port)regDefaultGateway_V");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, dataIn_TVALID, "(port)dataIn_TVALID");
    sc_trace(mVcdFile, dataIn_TREADY, "(port)dataIn_TREADY");
    sc_trace(mVcdFile, arpTableRequest_V_V_TVALID, "(port)arpTableRequest_V_V_TVALID");
    sc_trace(mVcdFile, arpTableRequest_V_V_TREADY, "(port)arpTableRequest_V_V_TREADY");
    sc_trace(mVcdFile, arpTableReplay_V_TVALID, "(port)arpTableReplay_V_TVALID");
    sc_trace(mVcdFile, arpTableReplay_V_TREADY, "(port)arpTableReplay_V_TREADY");
    sc_trace(mVcdFile, dataOut_TVALID, "(port)dataOut_TVALID");
    sc_trace(mVcdFile, dataOut_TREADY, "(port)dataOut_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_ap_start, "broadcaster_and_mac_U0_ap_start");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_ap_done, "broadcaster_and_mac_U0_ap_done");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_ap_continue, "broadcaster_and_mac_U0_ap_continue");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_ap_idle, "broadcaster_and_mac_U0_ap_idle");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_ap_ready, "broadcaster_and_mac_U0_ap_ready");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_ip_header_out_V_din, "broadcaster_and_mac_U0_ip_header_out_V_din");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_ip_header_out_V_write, "broadcaster_and_mac_U0_ip_header_out_V_write");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_no_ip_header_out_V_din, "broadcaster_and_mac_U0_no_ip_header_out_V_din");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_no_ip_header_out_V_write, "broadcaster_and_mac_U0_no_ip_header_out_V_write");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_start_out, "broadcaster_and_mac_U0_start_out");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_start_write, "broadcaster_and_mac_U0_start_write");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_dataIn_TREADY, "broadcaster_and_mac_U0_dataIn_TREADY");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_arpTableRequest_V_V_TDATA, "broadcaster_and_mac_U0_arpTableRequest_V_V_TDATA");
    sc_trace(mVcdFile, broadcaster_and_mac_U0_arpTableRequest_V_V_TVALID, "broadcaster_and_mac_U0_arpTableRequest_V_V_TVALID");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ap_start, "compute_and_insert_i_U0_ap_start");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ap_done, "compute_and_insert_i_U0_ap_done");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ap_continue, "compute_and_insert_i_U0_ap_continue");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ap_idle, "compute_and_insert_i_U0_ap_idle");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ap_ready, "compute_and_insert_i_U0_ap_ready");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ip_header_out_V_read, "compute_and_insert_i_U0_ip_header_out_V_read");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ip_header_checksum_V_din, "compute_and_insert_i_U0_ip_header_checksum_V_din");
    sc_trace(mVcdFile, compute_and_insert_i_U0_ip_header_checksum_V_write, "compute_and_insert_i_U0_ip_header_checksum_V_write");
    sc_trace(mVcdFile, handle_output_U0_ap_start, "handle_output_U0_ap_start");
    sc_trace(mVcdFile, handle_output_U0_ap_done, "handle_output_U0_ap_done");
    sc_trace(mVcdFile, handle_output_U0_ap_continue, "handle_output_U0_ap_continue");
    sc_trace(mVcdFile, handle_output_U0_ap_idle, "handle_output_U0_ap_idle");
    sc_trace(mVcdFile, handle_output_U0_ap_ready, "handle_output_U0_ap_ready");
    sc_trace(mVcdFile, handle_output_U0_no_ip_header_out_V_read, "handle_output_U0_no_ip_header_out_V_read");
    sc_trace(mVcdFile, handle_output_U0_ip_header_checksum_V_read, "handle_output_U0_ip_header_checksum_V_read");
    sc_trace(mVcdFile, handle_output_U0_arpTableReplay_V_TREADY, "handle_output_U0_arpTableReplay_V_TREADY");
    sc_trace(mVcdFile, handle_output_U0_dataOut_TDATA, "handle_output_U0_dataOut_TDATA");
    sc_trace(mVcdFile, handle_output_U0_dataOut_TVALID, "handle_output_U0_dataOut_TVALID");
    sc_trace(mVcdFile, handle_output_U0_dataOut_TKEEP, "handle_output_U0_dataOut_TKEEP");
    sc_trace(mVcdFile, handle_output_U0_dataOut_TLAST, "handle_output_U0_dataOut_TLAST");
    sc_trace(mVcdFile, ip_header_out_V_full_n, "ip_header_out_V_full_n");
    sc_trace(mVcdFile, ip_header_out_V_dout, "ip_header_out_V_dout");
    sc_trace(mVcdFile, ip_header_out_V_empty_n, "ip_header_out_V_empty_n");
    sc_trace(mVcdFile, no_ip_header_out_V_full_n, "no_ip_header_out_V_full_n");
    sc_trace(mVcdFile, no_ip_header_out_V_dout, "no_ip_header_out_V_dout");
    sc_trace(mVcdFile, no_ip_header_out_V_empty_n, "no_ip_header_out_V_empty_n");
    sc_trace(mVcdFile, ip_header_checksum_V_full_n, "ip_header_checksum_V_full_n");
    sc_trace(mVcdFile, ip_header_checksum_V_dout, "ip_header_checksum_V_dout");
    sc_trace(mVcdFile, ip_header_checksum_V_empty_n, "ip_header_checksum_V_empty_n");
    sc_trace(mVcdFile, start_for_compute_and_insert_i_U0_din, "start_for_compute_and_insert_i_U0_din");
    sc_trace(mVcdFile, start_for_compute_and_insert_i_U0_full_n, "start_for_compute_and_insert_i_U0_full_n");
    sc_trace(mVcdFile, start_for_compute_and_insert_i_U0_dout, "start_for_compute_and_insert_i_U0_dout");
    sc_trace(mVcdFile, start_for_compute_and_insert_i_U0_empty_n, "start_for_compute_and_insert_i_U0_empty_n");
    sc_trace(mVcdFile, compute_and_insert_i_U0_start_full_n, "compute_and_insert_i_U0_start_full_n");
    sc_trace(mVcdFile, compute_and_insert_i_U0_start_write, "compute_and_insert_i_U0_start_write");
    sc_trace(mVcdFile, handle_output_U0_start_full_n, "handle_output_U0_start_full_n");
    sc_trace(mVcdFile, handle_output_U0_start_write, "handle_output_U0_start_write");
#endif

    }
    mHdltvinHandle.open("ethernet_header_inserter.hdltvin.dat");
    mHdltvoutHandle.open("ethernet_header_inserter.hdltvout.dat");
}

ethernet_header_inserter::~ethernet_header_inserter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete broadcaster_and_mac_U0;
    delete compute_and_insert_i_U0;
    delete handle_output_U0;
    delete ip_header_out_V_U;
    delete no_ip_header_out_V_U;
    delete ip_header_checksum_V_U;
    delete start_for_computebkb_U;
}

void ethernet_header_inserter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ethernet_header_inserter::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ethernet_header_inserter::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void ethernet_header_inserter::thread_arpTableReplay_V_TREADY() {
    arpTableReplay_V_TREADY = handle_output_U0_arpTableReplay_V_TREADY.read();
}

void ethernet_header_inserter::thread_arpTableRequest_V_V_TDATA() {
    arpTableRequest_V_V_TDATA = broadcaster_and_mac_U0_arpTableRequest_V_V_TDATA.read();
}

void ethernet_header_inserter::thread_arpTableRequest_V_V_TVALID() {
    arpTableRequest_V_V_TVALID = broadcaster_and_mac_U0_arpTableRequest_V_V_TVALID.read();
}

void ethernet_header_inserter::thread_broadcaster_and_mac_U0_ap_continue() {
    broadcaster_and_mac_U0_ap_continue = ap_const_logic_1;
}

void ethernet_header_inserter::thread_broadcaster_and_mac_U0_ap_start() {
    broadcaster_and_mac_U0_ap_start = ap_const_logic_1;
}

void ethernet_header_inserter::thread_compute_and_insert_i_U0_ap_continue() {
    compute_and_insert_i_U0_ap_continue = ap_const_logic_1;
}

void ethernet_header_inserter::thread_compute_and_insert_i_U0_ap_start() {
    compute_and_insert_i_U0_ap_start = start_for_compute_and_insert_i_U0_empty_n.read();
}

void ethernet_header_inserter::thread_compute_and_insert_i_U0_start_full_n() {
    compute_and_insert_i_U0_start_full_n = ap_const_logic_1;
}

void ethernet_header_inserter::thread_compute_and_insert_i_U0_start_write() {
    compute_and_insert_i_U0_start_write = ap_const_logic_0;
}

void ethernet_header_inserter::thread_dataIn_TREADY() {
    dataIn_TREADY = broadcaster_and_mac_U0_dataIn_TREADY.read();
}

void ethernet_header_inserter::thread_dataOut_TDATA() {
    dataOut_TDATA = handle_output_U0_dataOut_TDATA.read();
}

void ethernet_header_inserter::thread_dataOut_TKEEP() {
    dataOut_TKEEP = handle_output_U0_dataOut_TKEEP.read();
}

void ethernet_header_inserter::thread_dataOut_TLAST() {
    dataOut_TLAST = handle_output_U0_dataOut_TLAST.read();
}

void ethernet_header_inserter::thread_dataOut_TVALID() {
    dataOut_TVALID = handle_output_U0_dataOut_TVALID.read();
}

void ethernet_header_inserter::thread_handle_output_U0_ap_continue() {
    handle_output_U0_ap_continue = ap_const_logic_1;
}

void ethernet_header_inserter::thread_handle_output_U0_ap_start() {
    handle_output_U0_ap_start = ap_const_logic_1;
}

void ethernet_header_inserter::thread_handle_output_U0_start_full_n() {
    handle_output_U0_start_full_n = ap_const_logic_1;
}

void ethernet_header_inserter::thread_handle_output_U0_start_write() {
    handle_output_U0_start_write = ap_const_logic_0;
}

void ethernet_header_inserter::thread_start_for_compute_and_insert_i_U0_din() {
    start_for_compute_and_insert_i_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void ethernet_header_inserter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"dataIn_TDATA\" :  \"" << dataIn_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn_TKEEP\" :  \"" << dataIn_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn_TLAST\" :  \"" << dataIn_TLAST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"dataOut_TDATA\" :  \"" << dataOut_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dataOut_TKEEP\" :  \"" << dataOut_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dataOut_TLAST\" :  \"" << dataOut_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arpTableReplay_V_TDATA\" :  \"" << arpTableReplay_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arpTableRequest_V_V_TDATA\" :  \"" << arpTableRequest_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myMacAddress_V\" :  \"" << myMacAddress_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"regSubNetMask_V\" :  \"" << regSubNetMask_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"regDefaultGateway_V\" :  \"" << regDefaultGateway_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn_TVALID\" :  \"" << dataIn_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dataIn_TREADY\" :  \"" << dataIn_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arpTableRequest_V_V_TVALID\" :  \"" << arpTableRequest_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arpTableRequest_V_V_TREADY\" :  \"" << arpTableRequest_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arpTableReplay_V_TVALID\" :  \"" << arpTableReplay_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arpTableReplay_V_TREADY\" :  \"" << arpTableReplay_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dataOut_TVALID\" :  \"" << dataOut_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataOut_TREADY\" :  \"" << dataOut_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

