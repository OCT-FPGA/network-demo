-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity icmp_server is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_icmp_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_icmp_TVALID : IN STD_LOGIC;
    s_axis_icmp_TREADY : OUT STD_LOGIC;
    s_axis_icmp_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_icmp_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_icmp_TVALID : OUT STD_LOGIC;
    m_axis_icmp_TREADY : IN STD_LOGIC;
    m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of icmp_server is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "icmp_server,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.100000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.588813,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1284,HLS_SYN_LUT=554,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv17_800 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal aiFSMState : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ipDestination_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal icmpType_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal icmpCode_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal auxInchecksum_r_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal prevWord_last_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmpChecksum_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal prevWord_data_V : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal prevWord_keep_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_axis_icmp_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal aiFSMState_load_load_fu_263_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_nbreadreq_fu_210_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_icmp_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal aiFSMState_load_reg_1129 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal aiFSMState_load_reg_1129_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_1138 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1138_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op12_read_state1 : BOOLEAN;
    signal ap_predicate_op31_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op106_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_m_axis_icmp_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op160_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal currWord_last_V_reg_1133 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_3_reg_1142 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_keep_V_3_reg_1147 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1353_4_fu_799_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1353_4_reg_1161 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_841_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_3_reg_1166 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_17_fu_1024_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal select_ln201_fu_299_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln170_fu_355_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln306_fu_1117_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_auxInchecksum_r_V_lo : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln306_fu_715_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln201_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_2_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_2_fu_369_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_1_fu_373_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_2_fu_391_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_3_fu_401_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_4_fu_419_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_5_fu_429_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_6_fu_447_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_7_fu_457_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_8_fu_475_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_9_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_s_fu_503_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_10_fu_513_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_11_fu_531_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_12_fu_541_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_13_fu_559_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_14_fu_569_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_15_fu_587_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_16_fu_597_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_fu_693_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_fu_683_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_703_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln306_fu_711_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_16_17_fu_615_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_18_fu_625_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_fu_727_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_607_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_1_fu_739_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_fu_735_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_579_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_551_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_3_fu_753_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_2_fu_749_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_523_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_495_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_5_fu_767_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_4_fu_763_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_467_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_439_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_7_fu_781_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_6_fu_777_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_383_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_9_fu_795_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_8_fu_791_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1353_fu_743_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1353_1_fu_757_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_fu_805_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_809_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln1353_2_fu_771_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1353_3_fu_785_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_1_fu_819_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_1_fu_823_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_1_fu_813_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_2_fu_827_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_2_fu_833_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_2_fu_837_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_1_fu_880_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_3_fu_892_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_4_fu_904_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_20_fu_916_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_926_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_2_fu_938_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln647_fu_964_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_972_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_10_fu_980_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_8_fu_968_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_7_fu_948_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmpChecksumTmp_V_fu_984_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln647_1_fu_1012_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_1002_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_fu_990_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_3_fu_1016_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_3_fu_1040_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal lhs_V_3_fu_1037_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_5_fu_1043_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln357_fu_1049_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_15_fu_1053_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln209_1_fu_1067_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln209_fu_1063_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln209_2_fu_1071_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln214_fu_1081_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln681_fu_1087_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL4_r_V_fu_1075_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_s_fu_1097_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln681_fu_1091_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln681_fu_1105_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln791_fu_1109_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal m_axis_icmp_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal m_axis_icmp_TVALID_int : STD_LOGIC;
    signal m_axis_icmp_TREADY_int : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TKEEP_int : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_last_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_170 : BOOLEAN;
    signal ap_condition_136 : BOOLEAN;
    signal ap_condition_220 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_m_axis_icmp_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TDATA_int,
        vld_in => m_axis_icmp_TVALID_int,
        ack_in => m_axis_icmp_TREADY_int,
        data_out => m_axis_icmp_TDATA,
        vld_out => regslice_both_m_axis_icmp_V_data_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_data_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TKEEP_int,
        vld_in => m_axis_icmp_TVALID_int,
        ack_in => regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TKEEP,
        vld_out => regslice_both_m_axis_icmp_V_keep_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TLAST_int,
        vld_in => m_axis_icmp_TVALID_int,
        ack_in => regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TLAST,
        vld_out => regslice_both_m_axis_icmp_V_last_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    aiFSMState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_136)) then
                if (((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_lv2_0 = aiFSMState))) then 
                    aiFSMState <= ap_const_lv2_1;
                elsif ((ap_const_lv2_1 = aiFSMState_load_load_fu_263_p1)) then 
                    aiFSMState <= select_ln170_fu_355_p3;
                elsif ((ap_const_lv2_2 = aiFSMState_load_load_fu_263_p1)) then 
                    aiFSMState <= select_ln201_fu_299_p3;
                elsif ((ap_const_boolean_1 = ap_condition_170)) then 
                    aiFSMState <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv2_0 = aiFSMState) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln1353_4_reg_1161 <= add_ln1353_4_fu_799_p2;
                ret_V_3_reg_1166 <= ret_V_3_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                aiFSMState_load_reg_1129 <= aiFSMState;
                aiFSMState_load_reg_1129_pp0_iter1_reg <= aiFSMState_load_reg_1129;
                currWord_last_V_reg_1133 <= prevWord_last_V;
                tmp_1_reg_1138_pp0_iter1_reg <= tmp_1_reg_1138;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1157 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv2_0 = aiFSMState_load_reg_1129) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                auxInchecksum_r_V <= xor_ln306_fu_1117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv2_0 = aiFSMState) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmpChecksum_V <= add_ln306_fu_715_p2;
                icmpCode_V <= s_axis_icmp_TDATA(175 downto 168);
                icmpType_V <= s_axis_icmp_TDATA(167 downto 160);
                ipDestination_V <= s_axis_icmp_TDATA(159 downto 128);
                prevWord_data_V <= s_axis_icmp_TDATA;
                prevWord_keep_V <= s_axis_icmp_TKEEP;
                prevWord_last_V <= s_axis_icmp_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv2_3 = aiFSMState) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_1138 <= grp_nbreadreq_fu_210_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_lv2_3 = aiFSMState) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_V_3_reg_1142 <= s_axis_icmp_TDATA;
                tmp_keep_V_3_reg_1147 <= s_axis_icmp_TKEEP;
                tmp_last_V_3_reg_1152 <= s_axis_icmp_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv2_0 = aiFSMState) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_1157 <= grp_nbreadreq_fu_210_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1353_1_fu_757_p2 <= std_logic_vector(unsigned(zext_ln215_3_fu_753_p1) + unsigned(zext_ln215_2_fu_749_p1));
    add_ln1353_2_fu_771_p2 <= std_logic_vector(unsigned(zext_ln215_5_fu_767_p1) + unsigned(zext_ln215_4_fu_763_p1));
    add_ln1353_3_fu_785_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_781_p1) + unsigned(zext_ln215_6_fu_777_p1));
    add_ln1353_4_fu_799_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_795_p1) + unsigned(zext_ln215_8_fu_791_p1));
    add_ln1353_fu_743_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_739_p1) + unsigned(zext_ln215_fu_735_p1));
    add_ln214_fu_1081_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(zext_ln209_2_fu_1071_p1));
    add_ln306_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv17_800) + unsigned(zext_ln306_fu_711_p1));
    add_ln681_fu_1091_p2 <= std_logic_vector(unsigned(trunc_ln357_fu_1049_p1) + unsigned(zext_ln681_fu_1087_p1));
    aiFSMState_load_load_fu_263_p1 <= aiFSMState;
    and_ln170_1_fu_343_p2 <= (icmp_ln879_3_fu_331_p2 and icmp_ln879_2_fu_325_p2);
    and_ln170_2_fu_349_p2 <= (and_ln170_fu_337_p2 and and_ln170_1_fu_343_p2);
    and_ln170_fu_337_p2 <= (icmp_ln879_fu_313_p2 and icmp_ln879_1_fu_319_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(s_axis_icmp_TVALID, ap_enable_reg_pp0_iter2, ap_predicate_op12_read_state1, ap_predicate_op31_read_state1, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)) or ((ap_predicate_op12_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(s_axis_icmp_TVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op12_read_state1, ap_predicate_op31_read_state1, ap_block_state2_io, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)) or ((ap_predicate_op12_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(s_axis_icmp_TVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op12_read_state1, ap_predicate_op31_read_state1, ap_block_state2_io, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_boolean_1 = ap_block_state2_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)) or ((ap_predicate_op12_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(s_axis_icmp_TVALID, ap_predicate_op12_read_state1, ap_predicate_op31_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)) or ((ap_predicate_op12_read_state1 = ap_const_boolean_1) and (s_axis_icmp_TVALID = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(aiFSMState_load_reg_1129, ap_predicate_op106_write_state2, m_axis_icmp_TREADY_int)
    begin
                ap_block_state2_io <= (((ap_const_lv2_2 = aiFSMState_load_reg_1129) and (m_axis_icmp_TREADY_int = ap_const_logic_0)) or ((ap_predicate_op106_write_state2 = ap_const_boolean_1) and (m_axis_icmp_TREADY_int = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(aiFSMState_load_reg_1129_pp0_iter1_reg, ap_predicate_op160_write_state3, m_axis_icmp_TREADY_int)
    begin
                ap_block_state3_io <= (((ap_const_lv2_2 = aiFSMState_load_reg_1129_pp0_iter1_reg) and (m_axis_icmp_TREADY_int = ap_const_logic_0)) or ((ap_predicate_op160_write_state3 = ap_const_boolean_1) and (m_axis_icmp_TREADY_int = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(regslice_both_m_axis_icmp_V_data_V_U_apdone_blk)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_condition_136_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_136 <= ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_170_assign_proc : process(aiFSMState, grp_nbreadreq_fu_210_p5, grp_fu_259_p1)
    begin
                ap_condition_170 <= ((grp_fu_259_p1 = ap_const_lv1_1) and (grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_lv2_3 = aiFSMState));
    end process;


    ap_condition_220_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_220 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op106_write_state2_assign_proc : process(aiFSMState_load_reg_1129, tmp_1_reg_1138)
    begin
                ap_predicate_op106_write_state2 <= ((ap_const_lv2_3 = aiFSMState_load_reg_1129) and (tmp_1_reg_1138 = ap_const_lv1_1));
    end process;


    ap_predicate_op12_read_state1_assign_proc : process(aiFSMState, grp_nbreadreq_fu_210_p5)
    begin
                ap_predicate_op12_read_state1 <= ((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_lv2_3 = aiFSMState));
    end process;


    ap_predicate_op160_write_state3_assign_proc : process(aiFSMState_load_reg_1129_pp0_iter1_reg, tmp_1_reg_1138_pp0_iter1_reg)
    begin
                ap_predicate_op160_write_state3 <= ((ap_const_lv2_3 = aiFSMState_load_reg_1129_pp0_iter1_reg) and (tmp_1_reg_1138_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op31_read_state1_assign_proc : process(aiFSMState, grp_nbreadreq_fu_210_p5)
    begin
                ap_predicate_op31_read_state1 <= ((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_lv2_0 = aiFSMState));
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_auxInchecksum_r_V_lo_assign_proc : process(auxInchecksum_r_V, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1129, tmp_reg_1157, xor_ln306_fu_1117_p2)
    begin
        if (((tmp_reg_1157 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv2_0 = aiFSMState_load_reg_1129))) then 
            ap_sig_allocacmp_auxInchecksum_r_V_lo <= xor_ln306_fu_1117_p2;
        else 
            ap_sig_allocacmp_auxInchecksum_r_V_lo <= auxInchecksum_r_V;
        end if; 
    end process;

    checksumL4_r_V_fu_1075_p2 <= std_logic_vector(unsigned(zext_ln209_1_fu_1067_p1) + unsigned(zext_ln209_fu_1063_p1));
    grp_fu_259_p1 <= s_axis_icmp_TLAST;
    grp_nbreadreq_fu_210_p5 <= (0=>(s_axis_icmp_TVALID), others=>'-');
    icmpChecksumTmp_V_fu_984_p2 <= std_logic_vector(unsigned(zext_ln215_10_fu_980_p1) + unsigned(p_Result_8_fu_968_p1));
    icmp_ln879_1_fu_319_p2 <= "1" when (icmpType_V = ap_const_lv8_8) else "0";
    icmp_ln879_2_fu_325_p2 <= "1" when (icmpCode_V = ap_const_lv8_0) else "0";
    icmp_ln879_3_fu_331_p2 <= "1" when (ap_sig_allocacmp_auxInchecksum_r_V_lo = ap_const_lv16_0) else "0";
    icmp_ln879_fu_313_p2 <= "1" when (ipDestination_V = myIpAddress_V) else "0";
    lhs_V_1_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_2_fu_771_p2),18));
    lhs_V_2_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_813_p2),19));
    lhs_V_3_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_3_reg_1166),20));
    lhs_V_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_743_p2),18));

    m_axis_icmp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1129, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1129_pp0_iter1_reg, tmp_1_reg_1138, tmp_1_reg_1138_pp0_iter1_reg, m_axis_icmp_TREADY_int)
    begin
        if ((((ap_const_lv2_3 = aiFSMState_load_reg_1129_pp0_iter1_reg) and (tmp_1_reg_1138_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_lv2_2 = aiFSMState_load_reg_1129_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_lv2_3 = aiFSMState_load_reg_1129) and (tmp_1_reg_1138 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_lv2_2 = aiFSMState_load_reg_1129) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axis_icmp_TDATA_blk_n <= m_axis_icmp_TREADY_int;
        else 
            m_axis_icmp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    m_axis_icmp_TDATA_int_assign_proc : process(aiFSMState_load_reg_1129, ap_predicate_op106_write_state2, tmp_data_V_3_reg_1142, p_Result_17_fu_1024_p5, ap_condition_220)
    begin
        if ((ap_const_boolean_1 = ap_condition_220)) then
            if ((ap_const_lv2_2 = aiFSMState_load_reg_1129)) then 
                m_axis_icmp_TDATA_int <= p_Result_17_fu_1024_p5;
            elsif ((ap_predicate_op106_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TDATA_int <= tmp_data_V_3_reg_1142;
            else 
                m_axis_icmp_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axis_icmp_TKEEP_int_assign_proc : process(prevWord_keep_V, aiFSMState_load_reg_1129, ap_predicate_op106_write_state2, tmp_keep_V_3_reg_1147, ap_condition_220)
    begin
        if ((ap_const_boolean_1 = ap_condition_220)) then
            if ((ap_const_lv2_2 = aiFSMState_load_reg_1129)) then 
                m_axis_icmp_TKEEP_int <= prevWord_keep_V;
            elsif ((ap_predicate_op106_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TKEEP_int <= tmp_keep_V_3_reg_1147;
            else 
                m_axis_icmp_TKEEP_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TKEEP_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axis_icmp_TLAST_int_assign_proc : process(aiFSMState_load_reg_1129, ap_predicate_op106_write_state2, currWord_last_V_reg_1133, tmp_last_V_3_reg_1152, ap_condition_220)
    begin
        if ((ap_const_boolean_1 = ap_condition_220)) then
            if ((ap_const_lv2_2 = aiFSMState_load_reg_1129)) then 
                m_axis_icmp_TLAST_int <= currWord_last_V_reg_1133;
            elsif ((ap_predicate_op106_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TLAST_int <= tmp_last_V_3_reg_1152;
            else 
                m_axis_icmp_TLAST_int <= "X";
            end if;
        else 
            m_axis_icmp_TLAST_int <= "X";
        end if; 
    end process;

    m_axis_icmp_TVALID <= regslice_both_m_axis_icmp_V_data_V_U_vld_out;

    m_axis_icmp_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1129, ap_predicate_op106_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_lv2_2 = aiFSMState_load_reg_1129) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op106_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axis_icmp_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_icmp_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_12_fu_683_p4 <= s_axis_icmp_TDATA(191 downto 184);
    p_Result_13_fu_693_p4 <= s_axis_icmp_TDATA(183 downto 176);
    p_Result_14_fu_727_p3 <= (p_Result_16_17_fu_615_p4 & p_Result_16_18_fu_625_p4);
    p_Result_15_fu_1053_p4 <= ret_V_5_fu_1043_p2(19 downto 16);
    p_Result_16_10_fu_513_p4 <= s_axis_icmp_TDATA(95 downto 88);
    p_Result_16_11_fu_531_p4 <= s_axis_icmp_TDATA(103 downto 96);
    p_Result_16_12_fu_541_p4 <= s_axis_icmp_TDATA(111 downto 104);
    p_Result_16_13_fu_559_p4 <= s_axis_icmp_TDATA(119 downto 112);
    p_Result_16_14_fu_569_p4 <= s_axis_icmp_TDATA(127 downto 120);
    p_Result_16_15_fu_587_p4 <= s_axis_icmp_TDATA(135 downto 128);
    p_Result_16_16_fu_597_p4 <= s_axis_icmp_TDATA(143 downto 136);
    p_Result_16_17_fu_615_p4 <= s_axis_icmp_TDATA(151 downto 144);
    p_Result_16_18_fu_625_p4 <= s_axis_icmp_TDATA(159 downto 152);
    p_Result_16_1_fu_373_p4 <= s_axis_icmp_TDATA(15 downto 8);
    p_Result_16_2_fu_391_p4 <= s_axis_icmp_TDATA(23 downto 16);
    p_Result_16_3_fu_401_p4 <= s_axis_icmp_TDATA(31 downto 24);
    p_Result_16_4_fu_419_p4 <= s_axis_icmp_TDATA(39 downto 32);
    p_Result_16_5_fu_429_p4 <= s_axis_icmp_TDATA(47 downto 40);
    p_Result_16_6_fu_447_p4 <= s_axis_icmp_TDATA(55 downto 48);
    p_Result_16_7_fu_457_p4 <= s_axis_icmp_TDATA(63 downto 56);
    p_Result_16_8_fu_475_p4 <= s_axis_icmp_TDATA(71 downto 64);
    p_Result_16_9_fu_485_p4 <= s_axis_icmp_TDATA(79 downto 72);
    p_Result_16_fu_990_p5 <= (p_Result_7_fu_948_p5(511 downto 168) & ap_const_lv8_0 & p_Result_7_fu_948_p5(159 downto 0));
    p_Result_16_s_fu_503_p4 <= s_axis_icmp_TDATA(87 downto 80);
    p_Result_17_fu_1024_p5 <= (p_Result_16_fu_990_p5(511 downto 192) & tmp_3_fu_1016_p3 & p_Result_16_fu_990_p5(175 downto 0));
    p_Result_1_fu_880_p5 <= (prevWord_data_V(511 downto 72) & ap_const_lv8_80 & prevWord_data_V(63 downto 0));
    p_Result_2_fu_938_p4 <= prevWord_data_V(127 downto 96);
    p_Result_3_fu_892_p5 <= (p_Result_1_fu_880_p5(511 downto 96) & ap_const_lv24_1 & p_Result_1_fu_880_p5(71 downto 0));
    p_Result_4_fu_904_p5 <= (p_Result_3_fu_892_p5(511 downto 96) & ap_const_lv16_0 & p_Result_3_fu_892_p5(79 downto 0));
    p_Result_5_fu_926_p5 <= (p_Result_4_fu_904_p5(511 downto 128) & p_Result_s_20_fu_916_p4 & p_Result_4_fu_904_p5(95 downto 0));
    p_Result_6_fu_1002_p4 <= icmpChecksumTmp_V_fu_984_p2(15 downto 8);
    p_Result_7_fu_948_p5 <= (p_Result_5_fu_926_p5(511 downto 160) & p_Result_2_fu_938_p4 & p_Result_5_fu_926_p5(127 downto 0));
    p_Result_8_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln647_fu_964_p1),17));
    p_Result_s_20_fu_916_p4 <= prevWord_data_V(159 downto 128);
    p_Result_s_fu_1097_p3 <= checksumL4_r_V_fu_1075_p2(16 downto 16);
    ret_V_1_fu_813_p2 <= std_logic_vector(unsigned(lhs_V_fu_805_p1) + unsigned(rhs_V_fu_809_p1));
    ret_V_2_fu_827_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_819_p1) + unsigned(rhs_V_1_fu_823_p1));
    ret_V_3_fu_841_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_833_p1) + unsigned(rhs_V_2_fu_837_p1));
    ret_V_5_fu_1043_p2 <= std_logic_vector(unsigned(rhs_V_3_fu_1040_p1) + unsigned(lhs_V_3_fu_1037_p1));
    rhs_V_1_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_3_fu_785_p2),18));
    rhs_V_2_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_fu_827_p2),19));
    rhs_V_3_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_4_reg_1161),20));
    rhs_V_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_1_fu_757_p2),18));

    s_axis_icmp_TDATA_blk_n_assign_proc : process(s_axis_icmp_TVALID, aiFSMState, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grp_nbreadreq_fu_210_p5)
    begin
        if ((((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_lv2_3 = aiFSMState) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((grp_nbreadreq_fu_210_p5 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv2_0 = aiFSMState)))) then 
            s_axis_icmp_TDATA_blk_n <= s_axis_icmp_TVALID;
        else 
            s_axis_icmp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_icmp_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op12_read_state1, ap_predicate_op31_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op12_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            s_axis_icmp_TREADY <= ap_const_logic_1;
        else 
            s_axis_icmp_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    select_ln170_fu_355_p3 <= 
        ap_const_lv2_2 when (and_ln170_2_fu_349_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln201_fu_299_p3 <= 
        ap_const_lv2_3 when (xor_ln201_fu_293_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln791_fu_1109_p3 <= 
        add_ln681_fu_1091_p2 when (p_Result_s_fu_1097_p3(0) = '1') else 
        trunc_ln681_fu_1105_p1;
    tmp_10_fu_607_p3 <= (p_Result_16_15_fu_587_p4 & p_Result_16_16_fu_597_p4);
    tmp_11_fu_703_p3 <= (p_Result_13_fu_693_p4 & p_Result_12_fu_683_p4);
    tmp_12_fu_972_p3 <= icmpChecksum_V(16 downto 16);
    tmp_2_fu_579_p3 <= (p_Result_16_13_fu_559_p4 & p_Result_16_14_fu_569_p4);
    tmp_3_fu_1016_p3 <= (trunc_ln647_1_fu_1012_p1 & p_Result_6_fu_1002_p4);
    tmp_4_fu_383_p3 <= (trunc_ln647_2_fu_369_p1 & p_Result_16_1_fu_373_p4);
    tmp_5_fu_411_p3 <= (p_Result_16_2_fu_391_p4 & p_Result_16_3_fu_401_p4);
    tmp_6_fu_439_p3 <= (p_Result_16_4_fu_419_p4 & p_Result_16_5_fu_429_p4);
    tmp_7_fu_467_p3 <= (p_Result_16_6_fu_447_p4 & p_Result_16_7_fu_457_p4);
    tmp_8_fu_495_p3 <= (p_Result_16_8_fu_475_p4 & p_Result_16_9_fu_485_p4);
    tmp_9_fu_523_p3 <= (p_Result_16_s_fu_503_p4 & p_Result_16_10_fu_513_p4);
    tmp_s_fu_551_p3 <= (p_Result_16_11_fu_531_p4 & p_Result_16_12_fu_541_p4);
    trunc_ln357_fu_1049_p1 <= ret_V_5_fu_1043_p2(16 - 1 downto 0);
    trunc_ln647_1_fu_1012_p1 <= icmpChecksumTmp_V_fu_984_p2(8 - 1 downto 0);
    trunc_ln647_2_fu_369_p1 <= s_axis_icmp_TDATA(8 - 1 downto 0);
    trunc_ln647_fu_964_p1 <= icmpChecksum_V(16 - 1 downto 0);
    trunc_ln681_fu_1105_p1 <= checksumL4_r_V_fu_1075_p2(16 - 1 downto 0);
    xor_ln201_fu_293_p2 <= (prevWord_last_V xor ap_const_lv1_1);
    xor_ln306_fu_1117_p2 <= (select_ln791_fu_1109_p3 xor ap_const_lv16_FFFF);
    zext_ln209_1_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_15_fu_1053_p4),17));
    zext_ln209_2_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_15_fu_1053_p4),5));
    zext_ln209_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln357_fu_1049_p1),17));
    zext_ln215_10_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_972_p3),17));
    zext_ln215_1_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_607_p3),17));
    zext_ln215_2_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_579_p3),17));
    zext_ln215_3_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_551_p3),17));
    zext_ln215_4_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_523_p3),17));
    zext_ln215_5_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_495_p3),17));
    zext_ln215_6_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_467_p3),17));
    zext_ln215_7_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_439_p3),17));
    zext_ln215_8_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_411_p3),17));
    zext_ln215_9_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_383_p3),17));
    zext_ln215_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_14_fu_727_p3),17));
    zext_ln306_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_703_p3),17));
    zext_ln681_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln214_fu_1081_p2),16));
end behav;
