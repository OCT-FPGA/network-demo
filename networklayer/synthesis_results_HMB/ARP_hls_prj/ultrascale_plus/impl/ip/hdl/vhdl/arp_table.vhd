-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_table is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    myIpAddress_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_V_empty_n : IN STD_LOGIC;
    myIpAddress_V_read : OUT STD_LOGIC;
    gatewayIP_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gatewayIP_V_empty_n : IN STD_LOGIC;
    gatewayIP_V_read : OUT STD_LOGIC;
    networkMask_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    networkMask_V_empty_n : IN STD_LOGIC;
    networkMask_V_read : OUT STD_LOGIC;
    macIpEncode_i_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    macIpEncode_i_V_V_empty_n : IN STD_LOGIC;
    macIpEncode_i_V_V_read : OUT STD_LOGIC;
    arpTableInsertFifo_V_dout : IN STD_LOGIC_VECTOR (80 downto 0);
    arpTableInsertFifo_V_empty_n : IN STD_LOGIC;
    arpTableInsertFifo_V_read : OUT STD_LOGIC;
    macIpEncode_rsp_i_V_din : OUT STD_LOGIC_VECTOR (48 downto 0);
    macIpEncode_rsp_i_V_full_n : IN STD_LOGIC;
    macIpEncode_rsp_i_V_write : OUT STD_LOGIC;
    arpRequestFifo_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    arpRequestFifo_V_V_full_n : IN STD_LOGIC;
    arpRequestFifo_V_V_write : OUT STD_LOGIC;
    arpTable_macAddress_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_macAddress_V_ce0 : OUT STD_LOGIC;
    arpTable_macAddress_V_we0 : OUT STD_LOGIC;
    arpTable_macAddress_V_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    arpTable_macAddress_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    arpTable_ipAddress_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_ipAddress_V_ce0 : OUT STD_LOGIC;
    arpTable_ipAddress_V_we0 : OUT STD_LOGIC;
    arpTable_ipAddress_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arpTable_valid_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_valid_V_ce0 : OUT STD_LOGIC;
    arpTable_valid_V_we0 : OUT STD_LOGIC;
    arpTable_valid_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    arpTable_valid_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of arp_table is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_nbreadreq_fu_100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_nbreadreq_fu_108_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op11_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op37_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal tmp_reg_298_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_302_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_hit_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op53_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal myIpAddress_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gatewayIP_V_blk_n : STD_LOGIC;
    signal networkMask_V_blk_n : STD_LOGIC;
    signal arpTableInsertFifo_V_blk_n : STD_LOGIC;
    signal macIpEncode_i_V_V_blk_n : STD_LOGIC;
    signal arpRequestFifo_V_V_blk_n : STD_LOGIC;
    signal macIpEncode_rsp_i_V_blk_n : STD_LOGIC;
    signal tmp_V_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_306_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_321_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln681_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_reg_326 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln681_reg_326_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln681_1_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln879_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln879_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln879_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_215_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln232_fu_235_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i_i_fu_273_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_30 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_predicate_op20_load_state1 : BOOLEAN;
    signal ap_enable_operation_20 : BOOLEAN;
    signal ap_predicate_op33_load_state2 : BOOLEAN;
    signal ap_enable_operation_33 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_32 : BOOLEAN;
    signal ap_predicate_op22_load_state1 : BOOLEAN;
    signal ap_enable_operation_22 : BOOLEAN;
    signal ap_predicate_op34_load_state2 : BOOLEAN;
    signal ap_enable_operation_34 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_150 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_s_reg_321 <= arpTableInsertFifo_V_dout(79 downto 48);
                    zext_ln681_reg_326(7 downto 0) <= zext_ln681_fu_283_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_s_reg_321_pp0_iter1_reg <= p_Val2_s_reg_321;
                tmp_3_reg_302_pp0_iter1_reg <= tmp_3_reg_302;
                tmp_V_reg_306_pp0_iter1_reg <= tmp_V_reg_306;
                tmp_reg_298 <= tmp_nbreadreq_fu_100_p3;
                tmp_reg_298_pp0_iter1_reg <= tmp_reg_298;
                    zext_ln681_reg_326_pp0_iter1_reg(7 downto 0) <= zext_ln681_reg_326(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_302 <= tmp_3_nbreadreq_fu_108_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op11_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_306 <= macIpEncode_i_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_reg_302 = ap_const_lv1_1) and (tmp_reg_298 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_hit_reg_331 <= arpTable_valid_V_q0;
            end if;
        end if;
    end process;
    zext_ln681_reg_326(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln681_reg_326_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln879_fu_203_p2 <= (xor_ln879_fu_197_p2 and networkMask_V_dout);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, macIpEncode_i_V_V_empty_n, tmp_nbreadreq_fu_100_p3, ap_predicate_op11_read_state1, arpTableInsertFifo_V_empty_n, macIpEncode_rsp_i_V_full_n, ap_predicate_op37_write_state2, arpRequestFifo_V_V_full_n, ap_predicate_op53_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((macIpEncode_rsp_i_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op37_write_state2 = ap_const_boolean_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (arpTableInsertFifo_V_empty_n = ap_const_logic_0)) or ((macIpEncode_i_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op11_read_state1 = ap_const_boolean_1)))) or ((arpRequestFifo_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op53_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, macIpEncode_i_V_V_empty_n, tmp_nbreadreq_fu_100_p3, ap_predicate_op11_read_state1, arpTableInsertFifo_V_empty_n, macIpEncode_rsp_i_V_full_n, ap_predicate_op37_write_state2, arpRequestFifo_V_V_full_n, ap_predicate_op53_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((macIpEncode_rsp_i_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op37_write_state2 = ap_const_boolean_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (arpTableInsertFifo_V_empty_n = ap_const_logic_0)) or ((macIpEncode_i_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op11_read_state1 = ap_const_boolean_1)))) or ((arpRequestFifo_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op53_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, macIpEncode_i_V_V_empty_n, tmp_nbreadreq_fu_100_p3, ap_predicate_op11_read_state1, arpTableInsertFifo_V_empty_n, macIpEncode_rsp_i_V_full_n, ap_predicate_op37_write_state2, arpRequestFifo_V_V_full_n, ap_predicate_op53_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((macIpEncode_rsp_i_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op37_write_state2 = ap_const_boolean_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (arpTableInsertFifo_V_empty_n = ap_const_logic_0)) or ((macIpEncode_i_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op11_read_state1 = ap_const_boolean_1)))) or ((arpRequestFifo_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op53_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, macIpEncode_i_V_V_empty_n, tmp_nbreadreq_fu_100_p3, ap_predicate_op11_read_state1, arpTableInsertFifo_V_empty_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (arpTableInsertFifo_V_empty_n = ap_const_logic_0)) or ((macIpEncode_i_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op11_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(macIpEncode_rsp_i_V_full_n, ap_predicate_op37_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((macIpEncode_rsp_i_V_full_n = ap_const_logic_0) and (ap_predicate_op37_write_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(arpRequestFifo_V_V_full_n, ap_predicate_op53_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((arpRequestFifo_V_V_full_n = ap_const_logic_0) and (ap_predicate_op53_write_state3 = ap_const_boolean_1));
    end process;


    ap_condition_150_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
                ap_condition_150 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_20_assign_proc : process(ap_predicate_op20_load_state1)
    begin
                ap_enable_operation_20 <= (ap_predicate_op20_load_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_22_assign_proc : process(ap_predicate_op22_load_state1)
    begin
                ap_enable_operation_22 <= (ap_predicate_op22_load_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_30_assign_proc : process(tmp_nbreadreq_fu_100_p3)
    begin
                ap_enable_operation_30 <= (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1);
    end process;


    ap_enable_operation_32_assign_proc : process(tmp_nbreadreq_fu_100_p3)
    begin
                ap_enable_operation_32 <= (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1);
    end process;


    ap_enable_operation_33_assign_proc : process(ap_predicate_op33_load_state2)
    begin
                ap_enable_operation_33 <= (ap_predicate_op33_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_34_assign_proc : process(ap_predicate_op34_load_state2)
    begin
                ap_enable_operation_34 <= (ap_predicate_op34_load_state2 = ap_const_boolean_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op11_read_state1_assign_proc : process(tmp_nbreadreq_fu_100_p3, tmp_3_nbreadreq_fu_108_p3)
    begin
                ap_predicate_op11_read_state1 <= ((tmp_3_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0));
    end process;


    ap_predicate_op20_load_state1_assign_proc : process(tmp_nbreadreq_fu_100_p3, tmp_3_nbreadreq_fu_108_p3)
    begin
                ap_predicate_op20_load_state1 <= ((tmp_3_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0));
    end process;


    ap_predicate_op22_load_state1_assign_proc : process(tmp_nbreadreq_fu_100_p3, tmp_3_nbreadreq_fu_108_p3)
    begin
                ap_predicate_op22_load_state1 <= ((tmp_3_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0));
    end process;


    ap_predicate_op33_load_state2_assign_proc : process(tmp_reg_298, tmp_3_reg_302)
    begin
                ap_predicate_op33_load_state2 <= ((tmp_3_reg_302 = ap_const_lv1_1) and (tmp_reg_298 = ap_const_lv1_0));
    end process;


    ap_predicate_op34_load_state2_assign_proc : process(tmp_reg_298, tmp_3_reg_302)
    begin
                ap_predicate_op34_load_state2 <= ((tmp_3_reg_302 = ap_const_lv1_1) and (tmp_reg_298 = ap_const_lv1_0));
    end process;


    ap_predicate_op37_write_state2_assign_proc : process(tmp_reg_298, tmp_3_reg_302)
    begin
                ap_predicate_op37_write_state2 <= ((tmp_3_reg_302 = ap_const_lv1_1) and (tmp_reg_298 = ap_const_lv1_0));
    end process;


    ap_predicate_op53_write_state3_assign_proc : process(tmp_reg_298_pp0_iter1_reg, tmp_3_reg_302_pp0_iter1_reg, tmp_hit_reg_331)
    begin
                ap_predicate_op53_write_state3 <= ((tmp_3_reg_302_pp0_iter1_reg = ap_const_lv1_1) and (tmp_hit_reg_331 = ap_const_lv1_0) and (tmp_reg_298_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    arpRequestFifo_V_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, arpRequestFifo_V_V_full_n, ap_predicate_op53_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op53_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpRequestFifo_V_V_blk_n <= arpRequestFifo_V_V_full_n;
        else 
            arpRequestFifo_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arpRequestFifo_V_V_din <= tmp_V_reg_306_pp0_iter1_reg;

    arpRequestFifo_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op53_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op53_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpRequestFifo_V_V_write <= ap_const_logic_1;
        else 
            arpRequestFifo_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    arpTableInsertFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_100_p3, arpTableInsertFifo_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpTableInsertFifo_V_blk_n <= arpTableInsertFifo_V_empty_n;
        else 
            arpTableInsertFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpTableInsertFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_100_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTableInsertFifo_V_read <= ap_const_logic_1;
        else 
            arpTableInsertFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_ipAddress_V_address0 <= zext_ln681_reg_326_pp0_iter1_reg(8 - 1 downto 0);

    arpTable_ipAddress_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_ipAddress_V_ce0 <= ap_const_logic_1;
        else 
            arpTable_ipAddress_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_ipAddress_V_d0 <= p_Val2_s_reg_321_pp0_iter1_reg;

    arpTable_ipAddress_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_298_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_298_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_ipAddress_V_we0 <= ap_const_logic_1;
        else 
            arpTable_ipAddress_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arpTable_macAddress_V_address0_assign_proc : process(tmp_nbreadreq_fu_100_p3, tmp_3_nbreadreq_fu_108_p3, zext_ln681_fu_283_p1, zext_ln681_1_fu_243_p1, ap_condition_150)
    begin
        if ((ap_const_boolean_1 = ap_condition_150)) then
            if ((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1)) then 
                arpTable_macAddress_V_address0 <= zext_ln681_fu_283_p1(8 - 1 downto 0);
            elsif (((tmp_3_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0))) then 
                arpTable_macAddress_V_address0 <= zext_ln681_1_fu_243_p1(8 - 1 downto 0);
            else 
                arpTable_macAddress_V_address0 <= "XXXXXXXX";
            end if;
        else 
            arpTable_macAddress_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    arpTable_macAddress_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_100_p3, tmp_3_nbreadreq_fu_108_p3, ap_block_pp0_stage0_11001)
    begin
        if ((((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_3_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            arpTable_macAddress_V_ce0 <= ap_const_logic_1;
        else 
            arpTable_macAddress_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_macAddress_V_d0 <= arpTableInsertFifo_V_dout(48 - 1 downto 0);

    arpTable_macAddress_V_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_100_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_macAddress_V_we0 <= ap_const_logic_1;
        else 
            arpTable_macAddress_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arpTable_valid_V_address0_assign_proc : process(tmp_nbreadreq_fu_100_p3, tmp_3_nbreadreq_fu_108_p3, zext_ln681_fu_283_p1, zext_ln681_1_fu_243_p1, ap_condition_150)
    begin
        if ((ap_const_boolean_1 = ap_condition_150)) then
            if ((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1)) then 
                arpTable_valid_V_address0 <= zext_ln681_fu_283_p1(8 - 1 downto 0);
            elsif (((tmp_3_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0))) then 
                arpTable_valid_V_address0 <= zext_ln681_1_fu_243_p1(8 - 1 downto 0);
            else 
                arpTable_valid_V_address0 <= "XXXXXXXX";
            end if;
        else 
            arpTable_valid_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    arpTable_valid_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_100_p3, tmp_3_nbreadreq_fu_108_p3, ap_block_pp0_stage0_11001)
    begin
        if ((((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_3_nbreadreq_fu_108_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_100_p3 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            arpTable_valid_V_ce0 <= ap_const_logic_1;
        else 
            arpTable_valid_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_valid_V_d0 <= arpTableInsertFifo_V_dout(80 downto 80);

    arpTable_valid_V_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_100_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_100_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_valid_V_we0 <= ap_const_logic_1;
        else 
            arpTable_valid_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gatewayIP_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, gatewayIP_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gatewayIP_V_blk_n <= gatewayIP_V_empty_n;
        else 
            gatewayIP_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gatewayIP_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gatewayIP_V_read <= ap_const_logic_1;
        else 
            gatewayIP_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln879_fu_209_p2 <= "1" when (and_ln879_fu_203_p2 = ap_const_lv32_0) else "0";

    macIpEncode_i_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, macIpEncode_i_V_V_empty_n, ap_predicate_op11_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op11_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            macIpEncode_i_V_V_blk_n <= macIpEncode_i_V_V_empty_n;
        else 
            macIpEncode_i_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    macIpEncode_i_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op11_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op11_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            macIpEncode_i_V_V_read <= ap_const_logic_1;
        else 
            macIpEncode_i_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    macIpEncode_rsp_i_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, macIpEncode_rsp_i_V_full_n, ap_predicate_op37_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op37_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            macIpEncode_rsp_i_V_blk_n <= macIpEncode_rsp_i_V_full_n;
        else 
            macIpEncode_rsp_i_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    macIpEncode_rsp_i_V_din <= (arpTable_valid_V_q0 & arpTable_macAddress_V_q0);

    macIpEncode_rsp_i_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op37_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op37_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            macIpEncode_rsp_i_V_write <= ap_const_logic_1;
        else 
            macIpEncode_rsp_i_V_write <= ap_const_logic_0;
        end if; 
    end process;


    myIpAddress_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, myIpAddress_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myIpAddress_V_blk_n <= myIpAddress_V_empty_n;
        else 
            myIpAddress_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    myIpAddress_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myIpAddress_V_read <= ap_const_logic_1;
        else 
            myIpAddress_V_read <= ap_const_logic_0;
        end if; 
    end process;


    networkMask_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, networkMask_V_empty_n, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            networkMask_V_blk_n <= networkMask_V_empty_n;
        else 
            networkMask_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    networkMask_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            networkMask_V_read <= ap_const_logic_1;
        else 
            networkMask_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_i_i_fu_273_p4 <= arpTableInsertFifo_V_dout(79 downto 72);
    select_ln232_fu_235_p3 <= 
        tmp_4_fu_215_p4 when (icmp_ln879_fu_209_p2(0) = '1') else 
        tmp_5_fu_225_p4;
    tmp_3_nbreadreq_fu_108_p3 <= (0=>(macIpEncode_i_V_V_empty_n), others=>'-');
    tmp_4_fu_215_p4 <= macIpEncode_i_V_V_dout(31 downto 24);
    tmp_5_fu_225_p4 <= gatewayIP_V_dout(31 downto 24);
    tmp_nbreadreq_fu_100_p3 <= (0=>(arpTableInsertFifo_V_empty_n), others=>'-');
    xor_ln879_fu_197_p2 <= (myIpAddress_V_dout xor macIpEncode_i_V_V_dout);
    zext_ln681_1_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln232_fu_235_p3),64));
    zext_ln681_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_fu_273_p4),64));
end behav;
