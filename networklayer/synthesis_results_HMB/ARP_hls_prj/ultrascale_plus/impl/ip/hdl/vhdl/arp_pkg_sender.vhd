-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_pkg_sender is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arpRequestFifo_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    arpRequestFifo_V_V_empty_n : IN STD_LOGIC;
    arpRequestFifo_V_V_read : OUT STD_LOGIC;
    arpReplyFifo_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
    arpReplyFifo_V_empty_n : IN STD_LOGIC;
    arpReplyFifo_V_read : OUT STD_LOGIC;
    myIpAddress_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_V_empty_n : IN STD_LOGIC;
    myIpAddress_V_read : OUT STD_LOGIC;
    gatewayIP_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gatewayIP_V_empty_n : IN STD_LOGIC;
    gatewayIP_V_read : OUT STD_LOGIC;
    networkMask_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    networkMask_V_empty_n : IN STD_LOGIC;
    networkMask_V_read : OUT STD_LOGIC;
    myIpAddress_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_V_out_full_n : IN STD_LOGIC;
    myIpAddress_V_out_write : OUT STD_LOGIC;
    gatewayIP_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    gatewayIP_V_out_full_n : IN STD_LOGIC;
    gatewayIP_V_out_write : OUT STD_LOGIC;
    networkMask_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    networkMask_V_out_full_n : IN STD_LOGIC;
    networkMask_V_out_write : OUT STD_LOGIC;
    myMacAddress_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    myMacAddress_V_empty_n : IN STD_LOGIC;
    myMacAddress_V_read : OUT STD_LOGIC;
    arpDataOut_TREADY : IN STD_LOGIC;
    arpDataOut_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    arpDataOut_TVALID : OUT STD_LOGIC;
    arpDataOut_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    arpDataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of arp_pkg_sender is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv176_lc_1 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010001010100010101000110010001100100111101000011000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv80_1000406000801000608 : STD_LOGIC_VECTOR (79 downto 0) := "00000001000000000000010000000110000000000000100000000001000000000000011000001000";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal aps_fsmState_load_load_fu_239_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_nbreadreq_fu_142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_nbreadreq_fu_150_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op12_read_state1 : BOOLEAN;
    signal ap_predicate_op14_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal aps_fsmState_load_reg_496 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_arpDataOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal aps_fsmState_load_reg_496_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal aps_fsmState : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inputIP_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal replyMeta_srcMac_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal replyMeta_ethType_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal replyMeta_hwType_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal replyMeta_protoType_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal replyMeta_hwLen_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal replyMeta_protoLen_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal replyMeta_hwAddrSrc_s : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal replyMeta_protoAddrS : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal arpDataOut_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal myMacAddress_V_blk_n : STD_LOGIC;
    signal myIpAddress_V_blk_n : STD_LOGIC;
    signal gatewayIP_V_blk_n : STD_LOGIC;
    signal networkMask_V_blk_n : STD_LOGIC;
    signal myIpAddress_V_out_blk_n : STD_LOGIC;
    signal gatewayIP_V_out_blk_n : STD_LOGIC;
    signal networkMask_V_out_blk_n : STD_LOGIC;
    signal arpReplyFifo_V_blk_n : STD_LOGIC;
    signal arpRequestFifo_V_V_blk_n : STD_LOGIC;
    signal tmp_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_413_p14 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_470_p9 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal trunc_ln321_fu_249_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln879_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln879_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln879_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln136_fu_462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal arpDataOut_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal arpDataOut_TVALID_int : STD_LOGIC;
    signal arpDataOut_TREADY_int : STD_LOGIC;
    signal regslice_both_arpDataOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arpDataOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arpDataOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arpDataOut_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_276 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_arpDataOut_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => arpDataOut_TDATA_int,
        vld_in => arpDataOut_TVALID_int,
        ack_in => arpDataOut_TREADY_int,
        data_out => arpDataOut_TDATA,
        vld_out => regslice_both_arpDataOut_V_data_V_U_vld_out,
        ack_out => arpDataOut_TREADY,
        apdone_blk => regslice_both_arpDataOut_V_data_V_U_apdone_blk);

    regslice_both_arpDataOut_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv64_FFFFFFFFFFFFFFF,
        vld_in => arpDataOut_TVALID_int,
        ack_in => regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy,
        data_out => arpDataOut_TKEEP,
        vld_out => regslice_both_arpDataOut_V_keep_V_U_vld_out,
        ack_out => arpDataOut_TREADY,
        apdone_blk => regslice_both_arpDataOut_V_keep_V_U_apdone_blk);

    regslice_both_arpDataOut_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_1,
        vld_in => arpDataOut_TVALID_int,
        ack_in => regslice_both_arpDataOut_V_last_V_U_ack_in_dummy,
        data_out => arpDataOut_TLAST,
        vld_out => regslice_both_arpDataOut_V_last_V_U_vld_out,
        ack_out => arpDataOut_TREADY,
        apdone_blk => regslice_both_arpDataOut_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    aps_fsmState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_142_p3 = ap_const_lv1_1) and (aps_fsmState = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                aps_fsmState <= ap_const_lv2_1;
            elsif (((tmp_4_nbreadreq_fu_150_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_142_p3 = ap_const_lv1_0) and (aps_fsmState = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                aps_fsmState <= ap_const_lv2_2;
            elsif ((((aps_fsmState_load_load_fu_239_p1 = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((aps_fsmState_load_load_fu_239_p1 = ap_const_lv2_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                aps_fsmState <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                aps_fsmState_load_reg_496 <= aps_fsmState;
                aps_fsmState_load_reg_496_pp0_iter1_reg <= aps_fsmState_load_reg_496;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_504 = ap_const_lv1_1) and (tmp_reg_500 = ap_const_lv1_0) and (aps_fsmState_load_reg_496 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                inputIP_V <= tmp_V_reg_508;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_142_p3 = ap_const_lv1_1) and (aps_fsmState = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                replyMeta_ethType_V <= arpReplyFifo_V_dout(63 downto 48);
                replyMeta_hwAddrSrc_s <= arpReplyFifo_V_dout(159 downto 112);
                replyMeta_hwLen_V <= arpReplyFifo_V_dout(103 downto 96);
                replyMeta_hwType_V <= arpReplyFifo_V_dout(79 downto 64);
                replyMeta_protoAddrS <= arpReplyFifo_V_dout(191 downto 160);
                replyMeta_protoLen_V <= arpReplyFifo_V_dout(111 downto 104);
                replyMeta_protoType_s <= arpReplyFifo_V_dout(95 downto 80);
                replyMeta_srcMac_V <= trunc_ln321_fu_249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_142_p3 = ap_const_lv1_0) and (aps_fsmState = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_4_reg_504 <= tmp_4_nbreadreq_fu_150_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_508 <= arpRequestFifo_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((aps_fsmState = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_500 <= tmp_nbreadreq_fu_142_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln879_fu_450_p2 <= (xor_ln879_fu_444_p2 and networkMask_V_dout);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestFifo_V_V_empty_n, ap_predicate_op12_read_state1, arpReplyFifo_V_empty_n, ap_predicate_op14_read_state1, myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, myIpAddress_V_out_full_n, gatewayIP_V_out_full_n, networkMask_V_out_full_n, myMacAddress_V_empty_n, regslice_both_arpDataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op14_read_state1 = ap_const_boolean_1)) or ((arpRequestFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((gatewayIP_V_out_full_n = ap_const_logic_0) or (myIpAddress_V_out_full_n = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (myMacAddress_V_empty_n = ap_const_logic_0) or (networkMask_V_out_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestFifo_V_V_empty_n, ap_predicate_op12_read_state1, arpReplyFifo_V_empty_n, ap_predicate_op14_read_state1, myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, myIpAddress_V_out_full_n, gatewayIP_V_out_full_n, networkMask_V_out_full_n, myMacAddress_V_empty_n, ap_block_state2_io, regslice_both_arpDataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op14_read_state1 = ap_const_boolean_1)) or ((arpRequestFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((gatewayIP_V_out_full_n = ap_const_logic_0) or (myIpAddress_V_out_full_n = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (myMacAddress_V_empty_n = ap_const_logic_0) or (networkMask_V_out_full_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestFifo_V_V_empty_n, ap_predicate_op12_read_state1, arpReplyFifo_V_empty_n, ap_predicate_op14_read_state1, myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, myIpAddress_V_out_full_n, gatewayIP_V_out_full_n, networkMask_V_out_full_n, myMacAddress_V_empty_n, ap_block_state2_io, regslice_both_arpDataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op14_read_state1 = ap_const_boolean_1)) or ((arpRequestFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((gatewayIP_V_out_full_n = ap_const_logic_0) or (myIpAddress_V_out_full_n = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (myMacAddress_V_empty_n = ap_const_logic_0) or (networkMask_V_out_full_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, arpRequestFifo_V_V_empty_n, ap_predicate_op12_read_state1, arpReplyFifo_V_empty_n, ap_predicate_op14_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op14_read_state1 = ap_const_boolean_1)) or ((arpRequestFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(aps_fsmState_load_reg_496, arpDataOut_TREADY_int)
    begin
                ap_block_state2_io <= (((arpDataOut_TREADY_int = ap_const_logic_0) and (aps_fsmState_load_reg_496 = ap_const_lv2_2)) or ((arpDataOut_TREADY_int = ap_const_logic_0) and (aps_fsmState_load_reg_496 = ap_const_lv2_1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(myIpAddress_V_empty_n, gatewayIP_V_empty_n, networkMask_V_empty_n, myIpAddress_V_out_full_n, gatewayIP_V_out_full_n, networkMask_V_out_full_n, myMacAddress_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((gatewayIP_V_out_full_n = ap_const_logic_0) or (myIpAddress_V_out_full_n = ap_const_logic_0) or (networkMask_V_empty_n = ap_const_logic_0) or (gatewayIP_V_empty_n = ap_const_logic_0) or (myIpAddress_V_empty_n = ap_const_logic_0) or (myMacAddress_V_empty_n = ap_const_logic_0) or (networkMask_V_out_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(aps_fsmState_load_reg_496_pp0_iter1_reg, arpDataOut_TREADY_int)
    begin
                ap_block_state3_io <= (((arpDataOut_TREADY_int = ap_const_logic_0) and (aps_fsmState_load_reg_496_pp0_iter1_reg = ap_const_lv2_2)) or ((arpDataOut_TREADY_int = ap_const_logic_0) and (aps_fsmState_load_reg_496_pp0_iter1_reg = ap_const_lv2_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(regslice_both_arpDataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_condition_276_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_276 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op12_read_state1_assign_proc : process(tmp_nbreadreq_fu_142_p3, tmp_4_nbreadreq_fu_150_p3, aps_fsmState)
    begin
                ap_predicate_op12_read_state1 <= ((tmp_4_nbreadreq_fu_150_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_142_p3 = ap_const_lv1_0) and (aps_fsmState = ap_const_lv2_0));
    end process;


    ap_predicate_op14_read_state1_assign_proc : process(tmp_nbreadreq_fu_142_p3, aps_fsmState)
    begin
                ap_predicate_op14_read_state1 <= ((tmp_nbreadreq_fu_142_p3 = ap_const_lv1_1) and (aps_fsmState = ap_const_lv2_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    aps_fsmState_load_load_fu_239_p1 <= aps_fsmState;

    arpDataOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, aps_fsmState_load_reg_496, aps_fsmState_load_reg_496_pp0_iter1_reg, ap_block_pp0_stage0, arpDataOut_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (aps_fsmState_load_reg_496 = ap_const_lv2_2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (aps_fsmState_load_reg_496 = ap_const_lv2_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (aps_fsmState_load_reg_496_pp0_iter1_reg = ap_const_lv2_2)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (aps_fsmState_load_reg_496_pp0_iter1_reg = ap_const_lv2_1)))) then 
            arpDataOut_TDATA_blk_n <= arpDataOut_TREADY_int;
        else 
            arpDataOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpDataOut_TDATA_int_assign_proc : process(aps_fsmState_load_reg_496, p_Result_1_fu_413_p14, p_Result_s_fu_470_p9, ap_condition_276)
    begin
        if ((ap_const_boolean_1 = ap_condition_276)) then
            if ((aps_fsmState_load_reg_496 = ap_const_lv2_2)) then 
                arpDataOut_TDATA_int <= p_Result_s_fu_470_p9;
            elsif ((aps_fsmState_load_reg_496 = ap_const_lv2_1)) then 
                arpDataOut_TDATA_int <= p_Result_1_fu_413_p14;
            else 
                arpDataOut_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            arpDataOut_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    arpDataOut_TVALID <= regslice_both_arpDataOut_V_data_V_U_vld_out;

    arpDataOut_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aps_fsmState_load_reg_496, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (aps_fsmState_load_reg_496 = ap_const_lv2_2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (aps_fsmState_load_reg_496 = ap_const_lv2_1)))) then 
            arpDataOut_TVALID_int <= ap_const_logic_1;
        else 
            arpDataOut_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    arpReplyFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, arpReplyFifo_V_empty_n, ap_predicate_op14_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op14_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpReplyFifo_V_blk_n <= arpReplyFifo_V_empty_n;
        else 
            arpReplyFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpReplyFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op14_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op14_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpReplyFifo_V_read <= ap_const_logic_1;
        else 
            arpReplyFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;


    arpRequestFifo_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, arpRequestFifo_V_V_empty_n, ap_predicate_op12_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpRequestFifo_V_V_blk_n <= arpRequestFifo_V_V_empty_n;
        else 
            arpRequestFifo_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpRequestFifo_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op12_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpRequestFifo_V_V_read <= ap_const_logic_1;
        else 
            arpRequestFifo_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gatewayIP_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gatewayIP_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gatewayIP_V_blk_n <= gatewayIP_V_empty_n;
        else 
            gatewayIP_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gatewayIP_V_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gatewayIP_V_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gatewayIP_V_out_blk_n <= gatewayIP_V_out_full_n;
        else 
            gatewayIP_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gatewayIP_V_out_din <= gatewayIP_V_dout;

    gatewayIP_V_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gatewayIP_V_out_write <= ap_const_logic_1;
        else 
            gatewayIP_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    gatewayIP_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gatewayIP_V_read <= ap_const_logic_1;
        else 
            gatewayIP_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln879_fu_456_p2 <= "1" when (and_ln879_fu_450_p2 = ap_const_lv32_0) else "0";

    myIpAddress_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, myIpAddress_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myIpAddress_V_blk_n <= myIpAddress_V_empty_n;
        else 
            myIpAddress_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    myIpAddress_V_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, myIpAddress_V_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myIpAddress_V_out_blk_n <= myIpAddress_V_out_full_n;
        else 
            myIpAddress_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    myIpAddress_V_out_din <= myIpAddress_V_dout;

    myIpAddress_V_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myIpAddress_V_out_write <= ap_const_logic_1;
        else 
            myIpAddress_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    myIpAddress_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myIpAddress_V_read <= ap_const_logic_1;
        else 
            myIpAddress_V_read <= ap_const_logic_0;
        end if; 
    end process;


    myMacAddress_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, myMacAddress_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myMacAddress_V_blk_n <= myMacAddress_V_empty_n;
        else 
            myMacAddress_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    myMacAddress_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myMacAddress_V_read <= ap_const_logic_1;
        else 
            myMacAddress_V_read <= ap_const_logic_0;
        end if; 
    end process;


    networkMask_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, networkMask_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            networkMask_V_blk_n <= networkMask_V_empty_n;
        else 
            networkMask_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    networkMask_V_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, networkMask_V_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            networkMask_V_out_blk_n <= networkMask_V_out_full_n;
        else 
            networkMask_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    networkMask_V_out_din <= networkMask_V_dout;

    networkMask_V_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            networkMask_V_out_write <= ap_const_logic_1;
        else 
            networkMask_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    networkMask_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            networkMask_V_read <= ap_const_logic_1;
        else 
            networkMask_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_413_p14 <= ((((((((((((ap_const_lv176_lc_1 & replyMeta_protoAddrS) & replyMeta_hwAddrSrc_s) & myIpAddress_V_dout) & myMacAddress_V_dout) & ap_const_lv16_200) & replyMeta_protoLen_V) & replyMeta_hwLen_V) & replyMeta_protoType_s) & replyMeta_hwType_V) & replyMeta_ethType_V) & myMacAddress_V_dout) & replyMeta_srcMac_V);
    p_Result_s_fu_470_p9 <= (((((((ap_const_lv176_lc_1 & select_ln136_fu_462_p3) & ap_const_lv48_0) & myIpAddress_V_dout) & myMacAddress_V_dout) & ap_const_lv80_1000406000801000608) & myMacAddress_V_dout) & ap_const_lv48_FFFFFFFFFFFF);
    select_ln136_fu_462_p3 <= 
        inputIP_V when (icmp_ln879_fu_456_p2(0) = '1') else 
        gatewayIP_V_dout;
    tmp_4_nbreadreq_fu_150_p3 <= (0=>(arpRequestFifo_V_V_empty_n), others=>'-');
    tmp_nbreadreq_fu_142_p3 <= (0=>(arpReplyFifo_V_empty_n), others=>'-');
    trunc_ln321_fu_249_p1 <= arpReplyFifo_V_dout(48 - 1 downto 0);
    xor_ln879_fu_444_p2 <= (myIpAddress_V_dout xor inputIP_V);
end behav;
