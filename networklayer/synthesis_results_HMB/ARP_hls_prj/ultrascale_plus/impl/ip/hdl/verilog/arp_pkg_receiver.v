// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arp_pkg_receiver (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        myIpAddress_V_dout,
        myIpAddress_V_empty_n,
        myIpAddress_V_read,
        myIpAddress_V_out_din,
        myIpAddress_V_out_full_n,
        myIpAddress_V_out_write,
        arpDataIn_TVALID,
        arpTableInsertFifo_V_din,
        arpTableInsertFifo_V_full_n,
        arpTableInsertFifo_V_write,
        arpReplyFifo_V_din,
        arpReplyFifo_V_full_n,
        arpReplyFifo_V_write,
        arpDataIn_TDATA,
        arpDataIn_TREADY,
        arpDataIn_TKEEP,
        arpDataIn_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] myIpAddress_V_dout;
input   myIpAddress_V_empty_n;
output   myIpAddress_V_read;
output  [31:0] myIpAddress_V_out_din;
input   myIpAddress_V_out_full_n;
output   myIpAddress_V_out_write;
input   arpDataIn_TVALID;
output  [80:0] arpTableInsertFifo_V_din;
input   arpTableInsertFifo_V_full_n;
output   arpTableInsertFifo_V_write;
output  [191:0] arpReplyFifo_V_din;
input   arpReplyFifo_V_full_n;
output   arpReplyFifo_V_write;
input  [511:0] arpDataIn_TDATA;
output   arpDataIn_TREADY;
input  [63:0] arpDataIn_TKEEP;
input  [0:0] arpDataIn_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg myIpAddress_V_read;
reg myIpAddress_V_out_write;
reg arpTableInsertFifo_V_write;
reg arpReplyFifo_V_write;
reg arpDataIn_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_102_p5;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_reg_267;
reg   [0:0] icmp_ln879_reg_271;
reg   [0:0] and_ln74_reg_275;
reg   [0:0] and_ln76_reg_279;
reg    ap_predicate_op40_write_state2;
reg    ap_predicate_op44_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] wordCount_V;
reg    arpDataIn_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    myIpAddress_V_blk_n;
reg    myIpAddress_V_out_blk_n;
reg    arpReplyFifo_V_blk_n;
reg    arpTableInsertFifo_V_blk_n;
reg   [79:0] reg_147;
wire   [0:0] icmp_ln879_fu_164_p2;
wire   [0:0] and_ln74_fu_202_p2;
wire   [0:0] and_ln76_fu_214_p2;
reg   [111:0] tmp_6_i_i_reg_283;
reg    ap_block_pp0_stage0_subdone;
wire   [3:0] select_ln80_fu_236_p3;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] opCode_V_fu_170_p4;
wire   [31:0] protoAddrDst_V_fu_180_p4;
wire   [0:0] icmp_ln879_2_fu_190_p2;
wire   [0:0] icmp_ln879_3_fu_196_p2;
wire   [0:0] icmp_ln879_4_fu_208_p2;
wire   [3:0] add_ln700_fu_230_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 wordCount_V = 4'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_fu_164_p2 == 1'd1) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln74_reg_275 <= and_ln74_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln74_fu_202_p2) & (icmp_ln879_fu_164_p2 == 1'd1) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln76_reg_279 <= and_ln76_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_reg_271 <= icmp_ln879_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln74_fu_202_p2) & (icmp_ln879_fu_164_p2 == 1'd1) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln74_fu_202_p2) & (1'd1 == and_ln76_fu_214_p2) & (icmp_ln879_fu_164_p2 == 1'd1) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_147 <= {{arpDataIn_TDATA[255:176]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln74_fu_202_p2) & (icmp_ln879_fu_164_p2 == 1'd1) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_i_i_reg_283 <= {{arpDataIn_TDATA[159:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_267 <= tmp_nbreadreq_fu_102_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wordCount_V <= select_ln80_fu_236_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpDataIn_TDATA_blk_n = arpDataIn_TVALID;
    end else begin
        arpDataIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_102_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        arpDataIn_TREADY = 1'b1;
    end else begin
        arpDataIn_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op44_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        arpReplyFifo_V_blk_n = arpReplyFifo_V_full_n;
    end else begin
        arpReplyFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op44_write_state2 == 1'b1))) begin
        arpReplyFifo_V_write = 1'b1;
    end else begin
        arpReplyFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        arpTableInsertFifo_V_blk_n = arpTableInsertFifo_V_full_n;
    end else begin
        arpTableInsertFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op40_write_state2 == 1'b1))) begin
        arpTableInsertFifo_V_write = 1'b1;
    end else begin
        arpTableInsertFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        myIpAddress_V_blk_n = myIpAddress_V_empty_n;
    end else begin
        myIpAddress_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        myIpAddress_V_out_blk_n = myIpAddress_V_out_full_n;
    end else begin
        myIpAddress_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        myIpAddress_V_out_write = 1'b1;
    end else begin
        myIpAddress_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        myIpAddress_V_read = 1'b1;
    end else begin
        myIpAddress_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_230_p2 = (wordCount_V + 4'd1);

assign and_ln74_fu_202_p2 = (icmp_ln879_3_fu_196_p2 & icmp_ln879_2_fu_190_p2);

assign and_ln76_fu_214_p2 = (icmp_ln879_4_fu_208_p2 & icmp_ln879_3_fu_196_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((arpReplyFifo_V_full_n == 1'b0) & (ap_predicate_op44_write_state2 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op40_write_state2 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (myIpAddress_V_out_full_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_102_p5 == 1'd1) & (arpDataIn_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((arpReplyFifo_V_full_n == 1'b0) & (ap_predicate_op44_write_state2 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op40_write_state2 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (myIpAddress_V_out_full_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_102_p5 == 1'd1) & (arpDataIn_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((arpReplyFifo_V_full_n == 1'b0) & (ap_predicate_op44_write_state2 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op40_write_state2 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (myIpAddress_V_out_full_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_102_p5 == 1'd1) & (arpDataIn_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (myIpAddress_V_out_full_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_102_p5 == 1'd1) & (arpDataIn_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((arpReplyFifo_V_full_n == 1'b0) & (ap_predicate_op44_write_state2 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op40_write_state2 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op40_write_state2 = ((1'd0 == and_ln74_reg_275) & (1'd1 == and_ln76_reg_279) & (icmp_ln879_reg_271 == 1'd1) & (tmp_reg_267 == 1'd1));
end

always @ (*) begin
    ap_predicate_op44_write_state2 = ((1'd1 == and_ln74_reg_275) & (icmp_ln879_reg_271 == 1'd1) & (tmp_reg_267 == 1'd1));
end

assign arpReplyFifo_V_din = {{reg_147}, {tmp_6_i_i_reg_283}};

assign arpTableInsertFifo_V_din = {{1'd1}, {reg_147}};

assign icmp_ln879_2_fu_190_p2 = ((opCode_V_fu_170_p4 == 16'd256) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_196_p2 = ((protoAddrDst_V_fu_180_p4 == myIpAddress_V_dout) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_208_p2 = ((opCode_V_fu_170_p4 == 16'd512) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_164_p2 = ((wordCount_V == 4'd0) ? 1'b1 : 1'b0);

assign myIpAddress_V_out_din = myIpAddress_V_dout;

assign opCode_V_fu_170_p4 = {{arpDataIn_TDATA[175:160]}};

assign protoAddrDst_V_fu_180_p4 = {{arpDataIn_TDATA[335:304]}};

assign select_ln80_fu_236_p3 = ((arpDataIn_TLAST[0:0] === 1'b1) ? 4'd0 : add_ln700_fu_230_p2);

assign tmp_nbreadreq_fu_102_p5 = arpDataIn_TVALID;

endmodule //arp_pkg_receiver
