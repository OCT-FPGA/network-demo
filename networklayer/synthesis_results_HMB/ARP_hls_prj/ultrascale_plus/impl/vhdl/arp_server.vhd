-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_server is
generic (
    C_S_AXI_S_AXILITE_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_S_AXILITE_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_s_axilite_AWVALID : IN STD_LOGIC;
    s_axi_s_axilite_AWREADY : OUT STD_LOGIC;
    s_axi_s_axilite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_s_axilite_WVALID : IN STD_LOGIC;
    s_axi_s_axilite_WREADY : OUT STD_LOGIC;
    s_axi_s_axilite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_s_axilite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH/8-1 downto 0);
    s_axi_s_axilite_ARVALID : IN STD_LOGIC;
    s_axi_s_axilite_ARREADY : OUT STD_LOGIC;
    s_axi_s_axilite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_s_axilite_RVALID : OUT STD_LOGIC;
    s_axi_s_axilite_RREADY : IN STD_LOGIC;
    s_axi_s_axilite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_s_axilite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axilite_BVALID : OUT STD_LOGIC;
    s_axi_s_axilite_BREADY : IN STD_LOGIC;
    s_axi_s_axilite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    arpDataIn_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    arpDataIn_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    arpDataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    macIpEncode_req_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    arpDataOut_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    arpDataOut_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    arpDataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    macIpEncode_rsp_V_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
    gatewayIP_V : IN STD_LOGIC_VECTOR (31 downto 0);
    networkMask_V : IN STD_LOGIC_VECTOR (31 downto 0);
    macIpEncode_req_V_V_TVALID : IN STD_LOGIC;
    macIpEncode_req_V_V_TREADY : OUT STD_LOGIC;
    macIpEncode_rsp_V_TVALID : OUT STD_LOGIC;
    macIpEncode_rsp_V_TREADY : IN STD_LOGIC;
    arpDataIn_TVALID : IN STD_LOGIC;
    arpDataIn_TREADY : OUT STD_LOGIC;
    arpDataOut_TVALID : OUT STD_LOGIC;
    arpDataOut_TREADY : IN STD_LOGIC );
end;


architecture behav of arp_server is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "arp_server,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.100000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.337000,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=1324,HLS_SYN_LUT=2070,HLS_VERSION=2020_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal arpTable_macAddress_V_q0 : STD_LOGIC_VECTOR (47 downto 0);
    signal arpTable_valid_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal arp_scan_V_i : STD_LOGIC_VECTOR (0 downto 0);
    signal arp_server_entry174_U0_ap_start : STD_LOGIC;
    signal arp_server_entry174_U0_ap_done : STD_LOGIC;
    signal arp_server_entry174_U0_ap_continue : STD_LOGIC;
    signal arp_server_entry174_U0_ap_idle : STD_LOGIC;
    signal arp_server_entry174_U0_ap_ready : STD_LOGIC;
    signal arp_server_entry174_U0_myMacAddress_V_out_din : STD_LOGIC_VECTOR (47 downto 0);
    signal arp_server_entry174_U0_myMacAddress_V_out_write : STD_LOGIC;
    signal arp_server_entry174_U0_myIpAddress_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_server_entry174_U0_myIpAddress_V_out_write : STD_LOGIC;
    signal arp_server_entry174_U0_myIpAddress_V_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_server_entry174_U0_myIpAddress_V_out1_write : STD_LOGIC;
    signal arp_server_entry174_U0_gatewayIP_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_server_entry174_U0_gatewayIP_V_out_write : STD_LOGIC;
    signal arp_server_entry174_U0_networkMask_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_server_entry174_U0_networkMask_V_out_write : STD_LOGIC;
    signal genARPDiscovery_U0_ap_start : STD_LOGIC;
    signal genARPDiscovery_U0_ap_done : STD_LOGIC;
    signal genARPDiscovery_U0_ap_continue : STD_LOGIC;
    signal genARPDiscovery_U0_ap_idle : STD_LOGIC;
    signal genARPDiscovery_U0_ap_ready : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncode_rsp_i_V_read : STD_LOGIC;
    signal genARPDiscovery_U0_myIpAddress_V_read : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncode_i_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal genARPDiscovery_U0_macIpEncode_i_V_V_write : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncodeIn_V_V_TREADY : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncode_rsp_o_V_TDATA : STD_LOGIC_VECTOR (55 downto 0);
    signal genARPDiscovery_U0_macIpEncode_rsp_o_V_TVALID : STD_LOGIC;
    signal genARPDiscovery_U0_arp_scan_V_o : STD_LOGIC_VECTOR (0 downto 0);
    signal genARPDiscovery_U0_arp_scan_V_o_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_start : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_done : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_continue : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_idle : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_ready : STD_LOGIC;
    signal arp_pkg_receiver_U0_myIpAddress_V_read : STD_LOGIC;
    signal arp_pkg_receiver_U0_myIpAddress_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_pkg_receiver_U0_myIpAddress_V_out_write : STD_LOGIC;
    signal arp_pkg_receiver_U0_arpTableInsertFifo_V_din : STD_LOGIC_VECTOR (80 downto 0);
    signal arp_pkg_receiver_U0_arpTableInsertFifo_V_write : STD_LOGIC;
    signal arp_pkg_receiver_U0_arpReplyFifo_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal arp_pkg_receiver_U0_arpReplyFifo_V_write : STD_LOGIC;
    signal arp_pkg_receiver_U0_arpDataIn_TREADY : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_start : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_done : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_continue : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_idle : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_ready : STD_LOGIC;
    signal arp_pkg_sender_U0_arpRequestFifo_V_V_read : STD_LOGIC;
    signal arp_pkg_sender_U0_arpReplyFifo_V_read : STD_LOGIC;
    signal arp_pkg_sender_U0_myIpAddress_V_read : STD_LOGIC;
    signal arp_pkg_sender_U0_gatewayIP_V_read : STD_LOGIC;
    signal arp_pkg_sender_U0_networkMask_V_read : STD_LOGIC;
    signal arp_pkg_sender_U0_myIpAddress_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_pkg_sender_U0_myIpAddress_V_out_write : STD_LOGIC;
    signal arp_pkg_sender_U0_gatewayIP_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_pkg_sender_U0_gatewayIP_V_out_write : STD_LOGIC;
    signal arp_pkg_sender_U0_networkMask_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_pkg_sender_U0_networkMask_V_out_write : STD_LOGIC;
    signal arp_pkg_sender_U0_myMacAddress_V_read : STD_LOGIC;
    signal arp_pkg_sender_U0_arpDataOut_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal arp_pkg_sender_U0_arpDataOut_TVALID : STD_LOGIC;
    signal arp_pkg_sender_U0_arpDataOut_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal arp_pkg_sender_U0_arpDataOut_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal arp_table_U0_ap_start : STD_LOGIC;
    signal arp_table_U0_ap_done : STD_LOGIC;
    signal arp_table_U0_ap_continue : STD_LOGIC;
    signal arp_table_U0_ap_idle : STD_LOGIC;
    signal arp_table_U0_ap_ready : STD_LOGIC;
    signal arp_table_U0_myIpAddress_V_read : STD_LOGIC;
    signal arp_table_U0_gatewayIP_V_read : STD_LOGIC;
    signal arp_table_U0_networkMask_V_read : STD_LOGIC;
    signal arp_table_U0_macIpEncode_i_V_V_read : STD_LOGIC;
    signal arp_table_U0_arpTableInsertFifo_V_read : STD_LOGIC;
    signal arp_table_U0_macIpEncode_rsp_i_V_din : STD_LOGIC_VECTOR (48 downto 0);
    signal arp_table_U0_macIpEncode_rsp_i_V_write : STD_LOGIC;
    signal arp_table_U0_arpRequestFifo_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_table_U0_arpRequestFifo_V_V_write : STD_LOGIC;
    signal arp_table_U0_arpTable_macAddress_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arp_table_U0_arpTable_macAddress_V_ce0 : STD_LOGIC;
    signal arp_table_U0_arpTable_macAddress_V_we0 : STD_LOGIC;
    signal arp_table_U0_arpTable_macAddress_V_d0 : STD_LOGIC_VECTOR (47 downto 0);
    signal arp_table_U0_arpTable_ipAddress_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arp_table_U0_arpTable_ipAddress_V_ce0 : STD_LOGIC;
    signal arp_table_U0_arpTable_ipAddress_V_we0 : STD_LOGIC;
    signal arp_table_U0_arpTable_ipAddress_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_table_U0_arpTable_valid_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arp_table_U0_arpTable_valid_V_ce0 : STD_LOGIC;
    signal arp_table_U0_arpTable_valid_V_we0 : STD_LOGIC;
    signal arp_table_U0_arpTable_valid_V_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal myMacAddress_V_c_full_n : STD_LOGIC;
    signal myMacAddress_V_c_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal myMacAddress_V_c_empty_n : STD_LOGIC;
    signal myIpAddress_V_c_full_n : STD_LOGIC;
    signal myIpAddress_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal myIpAddress_V_c_empty_n : STD_LOGIC;
    signal myIpAddress_V_c40_full_n : STD_LOGIC;
    signal myIpAddress_V_c40_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal myIpAddress_V_c40_empty_n : STD_LOGIC;
    signal gatewayIP_V_c_full_n : STD_LOGIC;
    signal gatewayIP_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gatewayIP_V_c_empty_n : STD_LOGIC;
    signal networkMask_V_c_full_n : STD_LOGIC;
    signal networkMask_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal networkMask_V_c_empty_n : STD_LOGIC;
    signal macIpEncode_i_V_V_full_n : STD_LOGIC;
    signal macIpEncode_i_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal macIpEncode_i_V_V_empty_n : STD_LOGIC;
    signal macIpEncode_rsp_i_V_full_n : STD_LOGIC;
    signal macIpEncode_rsp_i_V_dout : STD_LOGIC_VECTOR (48 downto 0);
    signal macIpEncode_rsp_i_V_empty_n : STD_LOGIC;
    signal myIpAddress_V_c41_full_n : STD_LOGIC;
    signal myIpAddress_V_c41_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal myIpAddress_V_c41_empty_n : STD_LOGIC;
    signal arpReplyFifo_V_full_n : STD_LOGIC;
    signal arpReplyFifo_V_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal arpReplyFifo_V_empty_n : STD_LOGIC;
    signal arpTableInsertFifo_V_full_n : STD_LOGIC;
    signal arpTableInsertFifo_V_dout : STD_LOGIC_VECTOR (80 downto 0);
    signal arpTableInsertFifo_V_empty_n : STD_LOGIC;
    signal myIpAddress_V_c42_full_n : STD_LOGIC;
    signal myIpAddress_V_c42_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal myIpAddress_V_c42_empty_n : STD_LOGIC;
    signal gatewayIP_V_c43_full_n : STD_LOGIC;
    signal gatewayIP_V_c43_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gatewayIP_V_c43_empty_n : STD_LOGIC;
    signal networkMask_V_c44_full_n : STD_LOGIC;
    signal networkMask_V_c44_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal networkMask_V_c44_empty_n : STD_LOGIC;
    signal arpRequestFifo_V_V_full_n : STD_LOGIC;
    signal arpRequestFifo_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal arpRequestFifo_V_V_empty_n : STD_LOGIC;

    component arp_server_entry174 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
        myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
        gatewayIP_V : IN STD_LOGIC_VECTOR (31 downto 0);
        networkMask_V : IN STD_LOGIC_VECTOR (31 downto 0);
        myMacAddress_V_out_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        myMacAddress_V_out_full_n : IN STD_LOGIC;
        myMacAddress_V_out_write : OUT STD_LOGIC;
        myIpAddress_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_out_full_n : IN STD_LOGIC;
        myIpAddress_V_out_write : OUT STD_LOGIC;
        myIpAddress_V_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_out1_full_n : IN STD_LOGIC;
        myIpAddress_V_out1_write : OUT STD_LOGIC;
        gatewayIP_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gatewayIP_V_out_full_n : IN STD_LOGIC;
        gatewayIP_V_out_write : OUT STD_LOGIC;
        networkMask_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        networkMask_V_out_full_n : IN STD_LOGIC;
        networkMask_V_out_write : OUT STD_LOGIC );
    end component;


    component genARPDiscovery IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        macIpEncodeIn_V_V_TVALID : IN STD_LOGIC;
        macIpEncode_rsp_i_V_dout : IN STD_LOGIC_VECTOR (48 downto 0);
        macIpEncode_rsp_i_V_empty_n : IN STD_LOGIC;
        macIpEncode_rsp_i_V_read : OUT STD_LOGIC;
        myIpAddress_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_empty_n : IN STD_LOGIC;
        myIpAddress_V_read : OUT STD_LOGIC;
        macIpEncode_i_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        macIpEncode_i_V_V_full_n : IN STD_LOGIC;
        macIpEncode_i_V_V_write : OUT STD_LOGIC;
        macIpEncode_rsp_o_V_TREADY : IN STD_LOGIC;
        macIpEncodeIn_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        macIpEncodeIn_V_V_TREADY : OUT STD_LOGIC;
        macIpEncode_rsp_o_V_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
        macIpEncode_rsp_o_V_TVALID : OUT STD_LOGIC;
        arp_scan_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
        arp_scan_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        arp_scan_V_o_ap_vld : OUT STD_LOGIC );
    end component;


    component arp_pkg_receiver IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myIpAddress_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_empty_n : IN STD_LOGIC;
        myIpAddress_V_read : OUT STD_LOGIC;
        myIpAddress_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_out_full_n : IN STD_LOGIC;
        myIpAddress_V_out_write : OUT STD_LOGIC;
        arpDataIn_TVALID : IN STD_LOGIC;
        arpTableInsertFifo_V_din : OUT STD_LOGIC_VECTOR (80 downto 0);
        arpTableInsertFifo_V_full_n : IN STD_LOGIC;
        arpTableInsertFifo_V_write : OUT STD_LOGIC;
        arpReplyFifo_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        arpReplyFifo_V_full_n : IN STD_LOGIC;
        arpReplyFifo_V_write : OUT STD_LOGIC;
        arpDataIn_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        arpDataIn_TREADY : OUT STD_LOGIC;
        arpDataIn_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        arpDataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component arp_pkg_sender IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arpRequestFifo_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        arpRequestFifo_V_V_empty_n : IN STD_LOGIC;
        arpRequestFifo_V_V_read : OUT STD_LOGIC;
        arpReplyFifo_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        arpReplyFifo_V_empty_n : IN STD_LOGIC;
        arpReplyFifo_V_read : OUT STD_LOGIC;
        myIpAddress_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_empty_n : IN STD_LOGIC;
        myIpAddress_V_read : OUT STD_LOGIC;
        gatewayIP_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gatewayIP_V_empty_n : IN STD_LOGIC;
        gatewayIP_V_read : OUT STD_LOGIC;
        networkMask_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        networkMask_V_empty_n : IN STD_LOGIC;
        networkMask_V_read : OUT STD_LOGIC;
        myIpAddress_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_out_full_n : IN STD_LOGIC;
        myIpAddress_V_out_write : OUT STD_LOGIC;
        gatewayIP_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gatewayIP_V_out_full_n : IN STD_LOGIC;
        gatewayIP_V_out_write : OUT STD_LOGIC;
        networkMask_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        networkMask_V_out_full_n : IN STD_LOGIC;
        networkMask_V_out_write : OUT STD_LOGIC;
        myMacAddress_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        myMacAddress_V_empty_n : IN STD_LOGIC;
        myMacAddress_V_read : OUT STD_LOGIC;
        arpDataOut_TREADY : IN STD_LOGIC;
        arpDataOut_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        arpDataOut_TVALID : OUT STD_LOGIC;
        arpDataOut_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        arpDataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component arp_table IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myIpAddress_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_V_empty_n : IN STD_LOGIC;
        myIpAddress_V_read : OUT STD_LOGIC;
        gatewayIP_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gatewayIP_V_empty_n : IN STD_LOGIC;
        gatewayIP_V_read : OUT STD_LOGIC;
        networkMask_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        networkMask_V_empty_n : IN STD_LOGIC;
        networkMask_V_read : OUT STD_LOGIC;
        macIpEncode_i_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        macIpEncode_i_V_V_empty_n : IN STD_LOGIC;
        macIpEncode_i_V_V_read : OUT STD_LOGIC;
        arpTableInsertFifo_V_dout : IN STD_LOGIC_VECTOR (80 downto 0);
        arpTableInsertFifo_V_empty_n : IN STD_LOGIC;
        arpTableInsertFifo_V_read : OUT STD_LOGIC;
        macIpEncode_rsp_i_V_din : OUT STD_LOGIC_VECTOR (48 downto 0);
        macIpEncode_rsp_i_V_full_n : IN STD_LOGIC;
        macIpEncode_rsp_i_V_write : OUT STD_LOGIC;
        arpRequestFifo_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        arpRequestFifo_V_V_full_n : IN STD_LOGIC;
        arpRequestFifo_V_V_write : OUT STD_LOGIC;
        arpTable_macAddress_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_macAddress_V_ce0 : OUT STD_LOGIC;
        arpTable_macAddress_V_we0 : OUT STD_LOGIC;
        arpTable_macAddress_V_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        arpTable_macAddress_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
        arpTable_ipAddress_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_ipAddress_V_ce0 : OUT STD_LOGIC;
        arpTable_ipAddress_V_we0 : OUT STD_LOGIC;
        arpTable_ipAddress_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        arpTable_valid_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_valid_V_ce0 : OUT STD_LOGIC;
        arpTable_valid_V_we0 : OUT STD_LOGIC;
        arpTable_valid_V_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        arpTable_valid_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w48_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w49_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (48 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (48 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w192_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (191 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (191 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w81_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (80 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (80 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component arp_server_s_axilite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        arpTable_macAddress_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_macAddress_V_ce0 : IN STD_LOGIC;
        arpTable_macAddress_V_we0 : IN STD_LOGIC;
        arpTable_macAddress_V_d0 : IN STD_LOGIC_VECTOR (47 downto 0);
        arpTable_macAddress_V_q0 : OUT STD_LOGIC_VECTOR (47 downto 0);
        arpTable_ipAddress_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_ipAddress_V_ce0 : IN STD_LOGIC;
        arpTable_ipAddress_V_we0 : IN STD_LOGIC;
        arpTable_ipAddress_V_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        arpTable_valid_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_valid_V_ce0 : IN STD_LOGIC;
        arpTable_valid_V_we0 : IN STD_LOGIC;
        arpTable_valid_V_d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        arpTable_valid_V_q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        arp_scan_V_o : IN STD_LOGIC_VECTOR (0 downto 0);
        arp_scan_V_o_ap_vld : IN STD_LOGIC;
        arp_scan_V_i : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    arp_server_s_axilite_s_axi_U : component arp_server_s_axilite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXILITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXILITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_s_axilite_AWVALID,
        AWREADY => s_axi_s_axilite_AWREADY,
        AWADDR => s_axi_s_axilite_AWADDR,
        WVALID => s_axi_s_axilite_WVALID,
        WREADY => s_axi_s_axilite_WREADY,
        WDATA => s_axi_s_axilite_WDATA,
        WSTRB => s_axi_s_axilite_WSTRB,
        ARVALID => s_axi_s_axilite_ARVALID,
        ARREADY => s_axi_s_axilite_ARREADY,
        ARADDR => s_axi_s_axilite_ARADDR,
        RVALID => s_axi_s_axilite_RVALID,
        RREADY => s_axi_s_axilite_RREADY,
        RDATA => s_axi_s_axilite_RDATA,
        RRESP => s_axi_s_axilite_RRESP,
        BVALID => s_axi_s_axilite_BVALID,
        BREADY => s_axi_s_axilite_BREADY,
        BRESP => s_axi_s_axilite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        arpTable_macAddress_V_address0 => arp_table_U0_arpTable_macAddress_V_address0,
        arpTable_macAddress_V_ce0 => arp_table_U0_arpTable_macAddress_V_ce0,
        arpTable_macAddress_V_we0 => arp_table_U0_arpTable_macAddress_V_we0,
        arpTable_macAddress_V_d0 => arp_table_U0_arpTable_macAddress_V_d0,
        arpTable_macAddress_V_q0 => arpTable_macAddress_V_q0,
        arpTable_ipAddress_V_address0 => arp_table_U0_arpTable_ipAddress_V_address0,
        arpTable_ipAddress_V_ce0 => arp_table_U0_arpTable_ipAddress_V_ce0,
        arpTable_ipAddress_V_we0 => arp_table_U0_arpTable_ipAddress_V_we0,
        arpTable_ipAddress_V_d0 => arp_table_U0_arpTable_ipAddress_V_d0,
        arpTable_valid_V_address0 => arp_table_U0_arpTable_valid_V_address0,
        arpTable_valid_V_ce0 => arp_table_U0_arpTable_valid_V_ce0,
        arpTable_valid_V_we0 => arp_table_U0_arpTable_valid_V_we0,
        arpTable_valid_V_d0 => arp_table_U0_arpTable_valid_V_d0,
        arpTable_valid_V_q0 => arpTable_valid_V_q0,
        arp_scan_V_o => genARPDiscovery_U0_arp_scan_V_o,
        arp_scan_V_o_ap_vld => genARPDiscovery_U0_arp_scan_V_o_ap_vld,
        arp_scan_V_i => arp_scan_V_i);

    arp_server_entry174_U0 : component arp_server_entry174
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_server_entry174_U0_ap_start,
        ap_done => arp_server_entry174_U0_ap_done,
        ap_continue => arp_server_entry174_U0_ap_continue,
        ap_idle => arp_server_entry174_U0_ap_idle,
        ap_ready => arp_server_entry174_U0_ap_ready,
        myMacAddress_V => myMacAddress_V,
        myIpAddress_V => myIpAddress_V,
        gatewayIP_V => gatewayIP_V,
        networkMask_V => networkMask_V,
        myMacAddress_V_out_din => arp_server_entry174_U0_myMacAddress_V_out_din,
        myMacAddress_V_out_full_n => myMacAddress_V_c_full_n,
        myMacAddress_V_out_write => arp_server_entry174_U0_myMacAddress_V_out_write,
        myIpAddress_V_out_din => arp_server_entry174_U0_myIpAddress_V_out_din,
        myIpAddress_V_out_full_n => myIpAddress_V_c_full_n,
        myIpAddress_V_out_write => arp_server_entry174_U0_myIpAddress_V_out_write,
        myIpAddress_V_out1_din => arp_server_entry174_U0_myIpAddress_V_out1_din,
        myIpAddress_V_out1_full_n => myIpAddress_V_c40_full_n,
        myIpAddress_V_out1_write => arp_server_entry174_U0_myIpAddress_V_out1_write,
        gatewayIP_V_out_din => arp_server_entry174_U0_gatewayIP_V_out_din,
        gatewayIP_V_out_full_n => gatewayIP_V_c_full_n,
        gatewayIP_V_out_write => arp_server_entry174_U0_gatewayIP_V_out_write,
        networkMask_V_out_din => arp_server_entry174_U0_networkMask_V_out_din,
        networkMask_V_out_full_n => networkMask_V_c_full_n,
        networkMask_V_out_write => arp_server_entry174_U0_networkMask_V_out_write);

    genARPDiscovery_U0 : component genARPDiscovery
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => genARPDiscovery_U0_ap_start,
        ap_done => genARPDiscovery_U0_ap_done,
        ap_continue => genARPDiscovery_U0_ap_continue,
        ap_idle => genARPDiscovery_U0_ap_idle,
        ap_ready => genARPDiscovery_U0_ap_ready,
        macIpEncodeIn_V_V_TVALID => macIpEncode_req_V_V_TVALID,
        macIpEncode_rsp_i_V_dout => macIpEncode_rsp_i_V_dout,
        macIpEncode_rsp_i_V_empty_n => macIpEncode_rsp_i_V_empty_n,
        macIpEncode_rsp_i_V_read => genARPDiscovery_U0_macIpEncode_rsp_i_V_read,
        myIpAddress_V_dout => myIpAddress_V_c_dout,
        myIpAddress_V_empty_n => myIpAddress_V_c_empty_n,
        myIpAddress_V_read => genARPDiscovery_U0_myIpAddress_V_read,
        macIpEncode_i_V_V_din => genARPDiscovery_U0_macIpEncode_i_V_V_din,
        macIpEncode_i_V_V_full_n => macIpEncode_i_V_V_full_n,
        macIpEncode_i_V_V_write => genARPDiscovery_U0_macIpEncode_i_V_V_write,
        macIpEncode_rsp_o_V_TREADY => macIpEncode_rsp_V_TREADY,
        macIpEncodeIn_V_V_TDATA => macIpEncode_req_V_V_TDATA,
        macIpEncodeIn_V_V_TREADY => genARPDiscovery_U0_macIpEncodeIn_V_V_TREADY,
        macIpEncode_rsp_o_V_TDATA => genARPDiscovery_U0_macIpEncode_rsp_o_V_TDATA,
        macIpEncode_rsp_o_V_TVALID => genARPDiscovery_U0_macIpEncode_rsp_o_V_TVALID,
        arp_scan_V_i => arp_scan_V_i,
        arp_scan_V_o => genARPDiscovery_U0_arp_scan_V_o,
        arp_scan_V_o_ap_vld => genARPDiscovery_U0_arp_scan_V_o_ap_vld);

    arp_pkg_receiver_U0 : component arp_pkg_receiver
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_pkg_receiver_U0_ap_start,
        ap_done => arp_pkg_receiver_U0_ap_done,
        ap_continue => arp_pkg_receiver_U0_ap_continue,
        ap_idle => arp_pkg_receiver_U0_ap_idle,
        ap_ready => arp_pkg_receiver_U0_ap_ready,
        myIpAddress_V_dout => myIpAddress_V_c40_dout,
        myIpAddress_V_empty_n => myIpAddress_V_c40_empty_n,
        myIpAddress_V_read => arp_pkg_receiver_U0_myIpAddress_V_read,
        myIpAddress_V_out_din => arp_pkg_receiver_U0_myIpAddress_V_out_din,
        myIpAddress_V_out_full_n => myIpAddress_V_c41_full_n,
        myIpAddress_V_out_write => arp_pkg_receiver_U0_myIpAddress_V_out_write,
        arpDataIn_TVALID => arpDataIn_TVALID,
        arpTableInsertFifo_V_din => arp_pkg_receiver_U0_arpTableInsertFifo_V_din,
        arpTableInsertFifo_V_full_n => arpTableInsertFifo_V_full_n,
        arpTableInsertFifo_V_write => arp_pkg_receiver_U0_arpTableInsertFifo_V_write,
        arpReplyFifo_V_din => arp_pkg_receiver_U0_arpReplyFifo_V_din,
        arpReplyFifo_V_full_n => arpReplyFifo_V_full_n,
        arpReplyFifo_V_write => arp_pkg_receiver_U0_arpReplyFifo_V_write,
        arpDataIn_TDATA => arpDataIn_TDATA,
        arpDataIn_TREADY => arp_pkg_receiver_U0_arpDataIn_TREADY,
        arpDataIn_TKEEP => arpDataIn_TKEEP,
        arpDataIn_TLAST => arpDataIn_TLAST);

    arp_pkg_sender_U0 : component arp_pkg_sender
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_pkg_sender_U0_ap_start,
        ap_done => arp_pkg_sender_U0_ap_done,
        ap_continue => arp_pkg_sender_U0_ap_continue,
        ap_idle => arp_pkg_sender_U0_ap_idle,
        ap_ready => arp_pkg_sender_U0_ap_ready,
        arpRequestFifo_V_V_dout => arpRequestFifo_V_V_dout,
        arpRequestFifo_V_V_empty_n => arpRequestFifo_V_V_empty_n,
        arpRequestFifo_V_V_read => arp_pkg_sender_U0_arpRequestFifo_V_V_read,
        arpReplyFifo_V_dout => arpReplyFifo_V_dout,
        arpReplyFifo_V_empty_n => arpReplyFifo_V_empty_n,
        arpReplyFifo_V_read => arp_pkg_sender_U0_arpReplyFifo_V_read,
        myIpAddress_V_dout => myIpAddress_V_c41_dout,
        myIpAddress_V_empty_n => myIpAddress_V_c41_empty_n,
        myIpAddress_V_read => arp_pkg_sender_U0_myIpAddress_V_read,
        gatewayIP_V_dout => gatewayIP_V_c_dout,
        gatewayIP_V_empty_n => gatewayIP_V_c_empty_n,
        gatewayIP_V_read => arp_pkg_sender_U0_gatewayIP_V_read,
        networkMask_V_dout => networkMask_V_c_dout,
        networkMask_V_empty_n => networkMask_V_c_empty_n,
        networkMask_V_read => arp_pkg_sender_U0_networkMask_V_read,
        myIpAddress_V_out_din => arp_pkg_sender_U0_myIpAddress_V_out_din,
        myIpAddress_V_out_full_n => myIpAddress_V_c42_full_n,
        myIpAddress_V_out_write => arp_pkg_sender_U0_myIpAddress_V_out_write,
        gatewayIP_V_out_din => arp_pkg_sender_U0_gatewayIP_V_out_din,
        gatewayIP_V_out_full_n => gatewayIP_V_c43_full_n,
        gatewayIP_V_out_write => arp_pkg_sender_U0_gatewayIP_V_out_write,
        networkMask_V_out_din => arp_pkg_sender_U0_networkMask_V_out_din,
        networkMask_V_out_full_n => networkMask_V_c44_full_n,
        networkMask_V_out_write => arp_pkg_sender_U0_networkMask_V_out_write,
        myMacAddress_V_dout => myMacAddress_V_c_dout,
        myMacAddress_V_empty_n => myMacAddress_V_c_empty_n,
        myMacAddress_V_read => arp_pkg_sender_U0_myMacAddress_V_read,
        arpDataOut_TREADY => arpDataOut_TREADY,
        arpDataOut_TDATA => arp_pkg_sender_U0_arpDataOut_TDATA,
        arpDataOut_TVALID => arp_pkg_sender_U0_arpDataOut_TVALID,
        arpDataOut_TKEEP => arp_pkg_sender_U0_arpDataOut_TKEEP,
        arpDataOut_TLAST => arp_pkg_sender_U0_arpDataOut_TLAST);

    arp_table_U0 : component arp_table
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_table_U0_ap_start,
        ap_done => arp_table_U0_ap_done,
        ap_continue => arp_table_U0_ap_continue,
        ap_idle => arp_table_U0_ap_idle,
        ap_ready => arp_table_U0_ap_ready,
        myIpAddress_V_dout => myIpAddress_V_c42_dout,
        myIpAddress_V_empty_n => myIpAddress_V_c42_empty_n,
        myIpAddress_V_read => arp_table_U0_myIpAddress_V_read,
        gatewayIP_V_dout => gatewayIP_V_c43_dout,
        gatewayIP_V_empty_n => gatewayIP_V_c43_empty_n,
        gatewayIP_V_read => arp_table_U0_gatewayIP_V_read,
        networkMask_V_dout => networkMask_V_c44_dout,
        networkMask_V_empty_n => networkMask_V_c44_empty_n,
        networkMask_V_read => arp_table_U0_networkMask_V_read,
        macIpEncode_i_V_V_dout => macIpEncode_i_V_V_dout,
        macIpEncode_i_V_V_empty_n => macIpEncode_i_V_V_empty_n,
        macIpEncode_i_V_V_read => arp_table_U0_macIpEncode_i_V_V_read,
        arpTableInsertFifo_V_dout => arpTableInsertFifo_V_dout,
        arpTableInsertFifo_V_empty_n => arpTableInsertFifo_V_empty_n,
        arpTableInsertFifo_V_read => arp_table_U0_arpTableInsertFifo_V_read,
        macIpEncode_rsp_i_V_din => arp_table_U0_macIpEncode_rsp_i_V_din,
        macIpEncode_rsp_i_V_full_n => macIpEncode_rsp_i_V_full_n,
        macIpEncode_rsp_i_V_write => arp_table_U0_macIpEncode_rsp_i_V_write,
        arpRequestFifo_V_V_din => arp_table_U0_arpRequestFifo_V_V_din,
        arpRequestFifo_V_V_full_n => arpRequestFifo_V_V_full_n,
        arpRequestFifo_V_V_write => arp_table_U0_arpRequestFifo_V_V_write,
        arpTable_macAddress_V_address0 => arp_table_U0_arpTable_macAddress_V_address0,
        arpTable_macAddress_V_ce0 => arp_table_U0_arpTable_macAddress_V_ce0,
        arpTable_macAddress_V_we0 => arp_table_U0_arpTable_macAddress_V_we0,
        arpTable_macAddress_V_d0 => arp_table_U0_arpTable_macAddress_V_d0,
        arpTable_macAddress_V_q0 => arpTable_macAddress_V_q0,
        arpTable_ipAddress_V_address0 => arp_table_U0_arpTable_ipAddress_V_address0,
        arpTable_ipAddress_V_ce0 => arp_table_U0_arpTable_ipAddress_V_ce0,
        arpTable_ipAddress_V_we0 => arp_table_U0_arpTable_ipAddress_V_we0,
        arpTable_ipAddress_V_d0 => arp_table_U0_arpTable_ipAddress_V_d0,
        arpTable_valid_V_address0 => arp_table_U0_arpTable_valid_V_address0,
        arpTable_valid_V_ce0 => arp_table_U0_arpTable_valid_V_ce0,
        arpTable_valid_V_we0 => arp_table_U0_arpTable_valid_V_we0,
        arpTable_valid_V_d0 => arp_table_U0_arpTable_valid_V_d0,
        arpTable_valid_V_q0 => arpTable_valid_V_q0);

    myMacAddress_V_c_U : component fifo_w48_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_server_entry174_U0_myMacAddress_V_out_din,
        if_full_n => myMacAddress_V_c_full_n,
        if_write => arp_server_entry174_U0_myMacAddress_V_out_write,
        if_dout => myMacAddress_V_c_dout,
        if_empty_n => myMacAddress_V_c_empty_n,
        if_read => arp_pkg_sender_U0_myMacAddress_V_read);

    myIpAddress_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_server_entry174_U0_myIpAddress_V_out_din,
        if_full_n => myIpAddress_V_c_full_n,
        if_write => arp_server_entry174_U0_myIpAddress_V_out_write,
        if_dout => myIpAddress_V_c_dout,
        if_empty_n => myIpAddress_V_c_empty_n,
        if_read => genARPDiscovery_U0_myIpAddress_V_read);

    myIpAddress_V_c40_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_server_entry174_U0_myIpAddress_V_out1_din,
        if_full_n => myIpAddress_V_c40_full_n,
        if_write => arp_server_entry174_U0_myIpAddress_V_out1_write,
        if_dout => myIpAddress_V_c40_dout,
        if_empty_n => myIpAddress_V_c40_empty_n,
        if_read => arp_pkg_receiver_U0_myIpAddress_V_read);

    gatewayIP_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_server_entry174_U0_gatewayIP_V_out_din,
        if_full_n => gatewayIP_V_c_full_n,
        if_write => arp_server_entry174_U0_gatewayIP_V_out_write,
        if_dout => gatewayIP_V_c_dout,
        if_empty_n => gatewayIP_V_c_empty_n,
        if_read => arp_pkg_sender_U0_gatewayIP_V_read);

    networkMask_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_server_entry174_U0_networkMask_V_out_din,
        if_full_n => networkMask_V_c_full_n,
        if_write => arp_server_entry174_U0_networkMask_V_out_write,
        if_dout => networkMask_V_c_dout,
        if_empty_n => networkMask_V_c_empty_n,
        if_read => arp_pkg_sender_U0_networkMask_V_read);

    macIpEncode_i_V_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => genARPDiscovery_U0_macIpEncode_i_V_V_din,
        if_full_n => macIpEncode_i_V_V_full_n,
        if_write => genARPDiscovery_U0_macIpEncode_i_V_V_write,
        if_dout => macIpEncode_i_V_V_dout,
        if_empty_n => macIpEncode_i_V_V_empty_n,
        if_read => arp_table_U0_macIpEncode_i_V_V_read);

    macIpEncode_rsp_i_V_U : component fifo_w49_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_table_U0_macIpEncode_rsp_i_V_din,
        if_full_n => macIpEncode_rsp_i_V_full_n,
        if_write => arp_table_U0_macIpEncode_rsp_i_V_write,
        if_dout => macIpEncode_rsp_i_V_dout,
        if_empty_n => macIpEncode_rsp_i_V_empty_n,
        if_read => genARPDiscovery_U0_macIpEncode_rsp_i_V_read);

    myIpAddress_V_c41_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_receiver_U0_myIpAddress_V_out_din,
        if_full_n => myIpAddress_V_c41_full_n,
        if_write => arp_pkg_receiver_U0_myIpAddress_V_out_write,
        if_dout => myIpAddress_V_c41_dout,
        if_empty_n => myIpAddress_V_c41_empty_n,
        if_read => arp_pkg_sender_U0_myIpAddress_V_read);

    arpReplyFifo_V_U : component fifo_w192_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_receiver_U0_arpReplyFifo_V_din,
        if_full_n => arpReplyFifo_V_full_n,
        if_write => arp_pkg_receiver_U0_arpReplyFifo_V_write,
        if_dout => arpReplyFifo_V_dout,
        if_empty_n => arpReplyFifo_V_empty_n,
        if_read => arp_pkg_sender_U0_arpReplyFifo_V_read);

    arpTableInsertFifo_V_U : component fifo_w81_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_receiver_U0_arpTableInsertFifo_V_din,
        if_full_n => arpTableInsertFifo_V_full_n,
        if_write => arp_pkg_receiver_U0_arpTableInsertFifo_V_write,
        if_dout => arpTableInsertFifo_V_dout,
        if_empty_n => arpTableInsertFifo_V_empty_n,
        if_read => arp_table_U0_arpTableInsertFifo_V_read);

    myIpAddress_V_c42_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_sender_U0_myIpAddress_V_out_din,
        if_full_n => myIpAddress_V_c42_full_n,
        if_write => arp_pkg_sender_U0_myIpAddress_V_out_write,
        if_dout => myIpAddress_V_c42_dout,
        if_empty_n => myIpAddress_V_c42_empty_n,
        if_read => arp_table_U0_myIpAddress_V_read);

    gatewayIP_V_c43_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_sender_U0_gatewayIP_V_out_din,
        if_full_n => gatewayIP_V_c43_full_n,
        if_write => arp_pkg_sender_U0_gatewayIP_V_out_write,
        if_dout => gatewayIP_V_c43_dout,
        if_empty_n => gatewayIP_V_c43_empty_n,
        if_read => arp_table_U0_gatewayIP_V_read);

    networkMask_V_c44_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_sender_U0_networkMask_V_out_din,
        if_full_n => networkMask_V_c44_full_n,
        if_write => arp_pkg_sender_U0_networkMask_V_out_write,
        if_dout => networkMask_V_c44_dout,
        if_empty_n => networkMask_V_c44_empty_n,
        if_read => arp_table_U0_networkMask_V_read);

    arpRequestFifo_V_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_table_U0_arpRequestFifo_V_V_din,
        if_full_n => arpRequestFifo_V_V_full_n,
        if_write => arp_table_U0_arpRequestFifo_V_V_write,
        if_dout => arpRequestFifo_V_V_dout,
        if_empty_n => arpRequestFifo_V_V_empty_n,
        if_read => arp_pkg_sender_U0_arpRequestFifo_V_V_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    arpDataIn_TREADY <= arp_pkg_receiver_U0_arpDataIn_TREADY;
    arpDataOut_TDATA <= arp_pkg_sender_U0_arpDataOut_TDATA;
    arpDataOut_TKEEP <= arp_pkg_sender_U0_arpDataOut_TKEEP;
    arpDataOut_TLAST <= arp_pkg_sender_U0_arpDataOut_TLAST;
    arpDataOut_TVALID <= arp_pkg_sender_U0_arpDataOut_TVALID;
    arp_pkg_receiver_U0_ap_continue <= ap_const_logic_1;
    arp_pkg_receiver_U0_ap_start <= ap_const_logic_1;
    arp_pkg_sender_U0_ap_continue <= ap_const_logic_1;
    arp_pkg_sender_U0_ap_start <= ap_const_logic_1;
    arp_server_entry174_U0_ap_continue <= ap_const_logic_1;
    arp_server_entry174_U0_ap_start <= ap_const_logic_1;
    arp_table_U0_ap_continue <= ap_const_logic_1;
    arp_table_U0_ap_start <= ap_const_logic_1;
    genARPDiscovery_U0_ap_continue <= ap_const_logic_1;
    genARPDiscovery_U0_ap_start <= ap_const_logic_1;
    macIpEncode_req_V_V_TREADY <= genARPDiscovery_U0_macIpEncodeIn_V_V_TREADY;
    macIpEncode_rsp_V_TDATA <= genARPDiscovery_U0_macIpEncode_rsp_o_V_TDATA;
    macIpEncode_rsp_V_TVALID <= genARPDiscovery_U0_macIpEncode_rsp_o_V_TVALID;
end behav;
