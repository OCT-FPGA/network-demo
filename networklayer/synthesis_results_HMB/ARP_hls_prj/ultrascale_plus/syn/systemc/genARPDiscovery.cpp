// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "genARPDiscovery.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic genARPDiscovery::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic genARPDiscovery::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> genARPDiscovery::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> genARPDiscovery::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool genARPDiscovery::ap_const_boolean_1 = true;
const sc_lv<3> genARPDiscovery::ap_const_lv3_3 = "11";
const sc_lv<1> genARPDiscovery::ap_const_lv1_1 = "1";
const sc_lv<3> genARPDiscovery::ap_const_lv3_4 = "100";
const sc_lv<3> genARPDiscovery::ap_const_lv3_2 = "10";
const bool genARPDiscovery::ap_const_boolean_0 = false;
const sc_lv<8> genARPDiscovery::ap_const_lv8_0 = "00000000";
const sc_lv<1> genARPDiscovery::ap_const_lv1_0 = "0";
const sc_lv<3> genARPDiscovery::ap_const_lv3_1 = "1";
const sc_lv<3> genARPDiscovery::ap_const_lv3_7 = "111";
const sc_lv<3> genARPDiscovery::ap_const_lv3_6 = "110";
const sc_lv<3> genARPDiscovery::ap_const_lv3_5 = "101";
const sc_lv<3> genARPDiscovery::ap_const_lv3_0 = "000";
const sc_lv<8> genARPDiscovery::ap_const_lv8_1 = "1";
const sc_lv<32> genARPDiscovery::ap_const_lv32_59682F00 = "1011001011010000010111100000000";
const sc_lv<32> genARPDiscovery::ap_const_lv32_1 = "1";

genARPDiscovery::genARPDiscovery(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_macIpEncode_rsp_o_V_U = new regslice_both<56>("regslice_both_macIpEncode_rsp_o_V_U");
    regslice_both_macIpEncode_rsp_o_V_U->ap_clk(ap_clk);
    regslice_both_macIpEncode_rsp_o_V_U->ap_rst(ap_rst);
    regslice_both_macIpEncode_rsp_o_V_U->data_in(macIpEncode_rsp_o_V_TDATA_int);
    regslice_both_macIpEncode_rsp_o_V_U->vld_in(macIpEncode_rsp_o_V_TVALID_int);
    regslice_both_macIpEncode_rsp_o_V_U->ack_in(macIpEncode_rsp_o_V_TREADY_int);
    regslice_both_macIpEncode_rsp_o_V_U->data_out(macIpEncode_rsp_o_V_TDATA);
    regslice_both_macIpEncode_rsp_o_V_U->vld_out(regslice_both_macIpEncode_rsp_o_V_U_vld_out);
    regslice_both_macIpEncode_rsp_o_V_U->ack_out(macIpEncode_rsp_o_V_TREADY);
    regslice_both_macIpEncode_rsp_o_V_U->apdone_blk(regslice_both_macIpEncode_rsp_o_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_1_fu_270_p2);
    sensitive << ( time_counter_V );

    SC_METHOD(thread_add_ln700_fu_242_p2);
    sensitive << ( ip_lsb_V );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( macIpEncodeIn_V_V_TVALID );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( macIpEncode_rsp_i_V_empty_n );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_predicate_op27_read_state1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_full_n );
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( regslice_both_macIpEncode_rsp_o_V_U_apdone_blk );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( macIpEncodeIn_V_V_TVALID );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( macIpEncode_rsp_i_V_empty_n );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_predicate_op27_read_state1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_full_n );
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_macIpEncode_rsp_o_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( macIpEncodeIn_V_V_TVALID );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( macIpEncode_rsp_i_V_empty_n );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_predicate_op27_read_state1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_full_n );
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_macIpEncode_rsp_o_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( macIpEncodeIn_V_V_TVALID );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( macIpEncode_rsp_i_V_empty_n );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_predicate_op27_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( ap_predicate_op47_write_state2 );
    sensitive << ( macIpEncode_rsp_o_V_TREADY_int );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_full_n );
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_predicate_op65_write_state3 );
    sensitive << ( macIpEncode_rsp_o_V_TREADY_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( regslice_both_macIpEncode_rsp_o_V_U_apdone_blk );

    SC_METHOD(thread_ap_condition_132);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_291);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4);
    sensitive << ( tmp_1_nbreadreq_fu_90_p3 );
    sensitive << ( gia_fsm_state );
    sensitive << ( ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_arp_scan_V_loc_1_i_i_reg_157);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146);

    SC_METHOD(thread_ap_predicate_op13_read_state1);
    sensitive << ( tmp_1_nbreadreq_fu_90_p3 );
    sensitive << ( gia_fsm_state );

    SC_METHOD(thread_ap_predicate_op17_read_state1);
    sensitive << ( grp_nbreadreq_fu_104_p3 );
    sensitive << ( gia_fsm_state );

    SC_METHOD(thread_ap_predicate_op27_read_state1);
    sensitive << ( grp_nbreadreq_fu_104_p3 );
    sensitive << ( gia_fsm_state );

    SC_METHOD(thread_ap_predicate_op44_write_state2);
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( tmp_1_reg_324 );

    SC_METHOD(thread_ap_predicate_op47_write_state2);
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( tmp_2_reg_333 );

    SC_METHOD(thread_ap_predicate_op65_write_state3);
    sensitive << ( gia_fsm_state_load_reg_304_pp0_iter1_reg );
    sensitive << ( tmp_2_reg_333_pp0_iter1_reg );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_ap_sig_allocacmp_arp_scan_1d_V_load);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( arp_scan_1d_V );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157 );

    SC_METHOD(thread_arp_scan_V_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_104_p3 );
    sensitive << ( arp_scan_V_i );
    sensitive << ( gia_fsm_state );
    sensitive << ( ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4 );
    sensitive << ( or_ln323_fu_210_p2 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_arp_scan_V_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_104_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( gia_fsm_state );
    sensitive << ( ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4 );
    sensitive << ( or_ln323_fu_210_p2 );

    SC_METHOD(thread_gia_fsm_state_load_load_fu_186_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( gia_fsm_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_grp_nbreadreq_fu_104_p3);
    sensitive << ( macIpEncode_rsp_i_V_empty_n );

    SC_METHOD(thread_icmp_ln879_1_fu_222_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( grp_nbreadreq_fu_104_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( gia_fsm_state );
    sensitive << ( ip_lsb_V );

    SC_METHOD(thread_icmp_ln879_fu_264_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( gia_fsm_state_load_load_fu_186_p1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( time_counter_V );

    SC_METHOD(thread_ip_aux_V_fu_290_p3);
    sensitive << ( v1_V_reg_308 );
    sensitive << ( trunc_ln647_fu_286_p1 );

    SC_METHOD(thread_macIpEncodeIn_V_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( macIpEncodeIn_V_V_TVALID );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_macIpEncodeIn_V_V_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op13_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_macIpEncode_i_V_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( macIpEncode_i_V_V_full_n );
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_macIpEncode_i_V_V_din);
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( tmp_V_1_reg_328 );
    sensitive << ( ip_aux_V_fu_290_p3 );
    sensitive << ( ap_condition_291 );

    SC_METHOD(thread_macIpEncode_i_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gia_fsm_state_load_reg_304 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_macIpEncode_rsp_i_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( macIpEncode_rsp_i_V_empty_n );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_predicate_op27_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_macIpEncode_rsp_i_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op17_read_state1 );
    sensitive << ( ap_predicate_op27_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_macIpEncode_rsp_o_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op47_write_state2 );
    sensitive << ( ap_predicate_op65_write_state3 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( macIpEncode_rsp_o_V_TREADY_int );

    SC_METHOD(thread_macIpEncode_rsp_o_V_TDATA_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op47_write_state2 );
    sensitive << ( tmp_18_reg_337 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_macIpEncode_rsp_o_V_TVALID);
    sensitive << ( regslice_both_macIpEncode_rsp_o_V_U_vld_out );

    SC_METHOD(thread_macIpEncode_rsp_o_V_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op47_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_myIpAddress_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_myIpAddress_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_or_ln323_fu_210_p2);
    sensitive << ( ap_sig_allocacmp_arp_scan_1d_V_load );
    sensitive << ( xor_ln323_fu_204_p2 );

    SC_METHOD(thread_select_ln304_fu_228_p3);
    sensitive << ( icmp_ln879_1_fu_222_p2 );

    SC_METHOD(thread_tmp_1_nbreadreq_fu_90_p3);
    sensitive << ( macIpEncodeIn_V_V_TVALID );

    SC_METHOD(thread_trunc_ln647_fu_286_p1);
    sensitive << ( myIpAddress_V_dout );

    SC_METHOD(thread_xor_ln323_fu_204_p2);
    sensitive << ( arp_scan_V_i );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    gia_fsm_state = "011";
    ip_lsb_V = "00000000";
    time_counter_V = "00000000000000000000000000000000";
    arp_scan_1d_V = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "genARPDiscovery_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, macIpEncodeIn_V_V_TVALID, "(port)macIpEncodeIn_V_V_TVALID");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_dout, "(port)macIpEncode_rsp_i_V_dout");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_empty_n, "(port)macIpEncode_rsp_i_V_empty_n");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_read, "(port)macIpEncode_rsp_i_V_read");
    sc_trace(mVcdFile, myIpAddress_V_dout, "(port)myIpAddress_V_dout");
    sc_trace(mVcdFile, myIpAddress_V_empty_n, "(port)myIpAddress_V_empty_n");
    sc_trace(mVcdFile, myIpAddress_V_read, "(port)myIpAddress_V_read");
    sc_trace(mVcdFile, macIpEncode_i_V_V_din, "(port)macIpEncode_i_V_V_din");
    sc_trace(mVcdFile, macIpEncode_i_V_V_full_n, "(port)macIpEncode_i_V_V_full_n");
    sc_trace(mVcdFile, macIpEncode_i_V_V_write, "(port)macIpEncode_i_V_V_write");
    sc_trace(mVcdFile, macIpEncode_rsp_o_V_TREADY, "(port)macIpEncode_rsp_o_V_TREADY");
    sc_trace(mVcdFile, macIpEncodeIn_V_V_TDATA, "(port)macIpEncodeIn_V_V_TDATA");
    sc_trace(mVcdFile, macIpEncodeIn_V_V_TREADY, "(port)macIpEncodeIn_V_V_TREADY");
    sc_trace(mVcdFile, macIpEncode_rsp_o_V_TDATA, "(port)macIpEncode_rsp_o_V_TDATA");
    sc_trace(mVcdFile, macIpEncode_rsp_o_V_TVALID, "(port)macIpEncode_rsp_o_V_TVALID");
    sc_trace(mVcdFile, arp_scan_V_i, "(port)arp_scan_V_i");
    sc_trace(mVcdFile, arp_scan_V_o, "(port)arp_scan_V_o");
    sc_trace(mVcdFile, arp_scan_V_o_ap_vld, "(port)arp_scan_V_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, gia_fsm_state_load_load_fu_186_p1, "gia_fsm_state_load_load_fu_186_p1");
    sc_trace(mVcdFile, tmp_1_nbreadreq_fu_90_p3, "tmp_1_nbreadreq_fu_90_p3");
    sc_trace(mVcdFile, ap_predicate_op13_read_state1, "ap_predicate_op13_read_state1");
    sc_trace(mVcdFile, grp_nbreadreq_fu_104_p3, "grp_nbreadreq_fu_104_p3");
    sc_trace(mVcdFile, ap_predicate_op17_read_state1, "ap_predicate_op17_read_state1");
    sc_trace(mVcdFile, ap_predicate_op27_read_state1, "ap_predicate_op27_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, gia_fsm_state_load_reg_304, "gia_fsm_state_load_reg_304");
    sc_trace(mVcdFile, tmp_1_reg_324, "tmp_1_reg_324");
    sc_trace(mVcdFile, ap_predicate_op44_write_state2, "ap_predicate_op44_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, tmp_2_reg_333, "tmp_2_reg_333");
    sc_trace(mVcdFile, ap_predicate_op47_write_state2, "ap_predicate_op47_write_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, regslice_both_macIpEncode_rsp_o_V_U_apdone_blk, "regslice_both_macIpEncode_rsp_o_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, gia_fsm_state_load_reg_304_pp0_iter1_reg, "gia_fsm_state_load_reg_304_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_2_reg_333_pp0_iter1_reg, "tmp_2_reg_333_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_predicate_op65_write_state3, "ap_predicate_op65_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, gia_fsm_state, "gia_fsm_state");
    sc_trace(mVcdFile, ip_lsb_V, "ip_lsb_V");
    sc_trace(mVcdFile, time_counter_V, "time_counter_V");
    sc_trace(mVcdFile, arp_scan_1d_V, "arp_scan_1d_V");
    sc_trace(mVcdFile, macIpEncodeIn_V_V_TDATA_blk_n, "macIpEncodeIn_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, macIpEncode_rsp_o_V_TDATA_blk_n, "macIpEncode_rsp_o_V_TDATA_blk_n");
    sc_trace(mVcdFile, myIpAddress_V_blk_n, "myIpAddress_V_blk_n");
    sc_trace(mVcdFile, macIpEncode_i_V_V_blk_n, "macIpEncode_i_V_V_blk_n");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_blk_n, "macIpEncode_rsp_i_V_blk_n");
    sc_trace(mVcdFile, v1_V_reg_308, "v1_V_reg_308");
    sc_trace(mVcdFile, tmp_V_1_reg_328, "tmp_V_1_reg_328");
    sc_trace(mVcdFile, tmp_18_reg_337, "tmp_18_reg_337");
    sc_trace(mVcdFile, icmp_ln879_fu_264_p2, "icmp_ln879_fu_264_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4, "ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146, "ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_arp_scan_V_loc_1_i_i_reg_157, "ap_phi_reg_pp0_iter0_arp_scan_V_loc_1_i_i_reg_157");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157, "ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157");
    sc_trace(mVcdFile, or_ln323_fu_210_p2, "or_ln323_fu_210_p2");
    sc_trace(mVcdFile, select_ln304_fu_228_p3, "select_ln304_fu_228_p3");
    sc_trace(mVcdFile, add_ln700_fu_242_p2, "add_ln700_fu_242_p2");
    sc_trace(mVcdFile, add_ln700_1_fu_270_p2, "add_ln700_1_fu_270_p2");
    sc_trace(mVcdFile, ap_sig_allocacmp_arp_scan_1d_V_load, "ap_sig_allocacmp_arp_scan_1d_V_load");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ip_aux_V_fu_290_p3, "ip_aux_V_fu_290_p3");
    sc_trace(mVcdFile, xor_ln323_fu_204_p2, "xor_ln323_fu_204_p2");
    sc_trace(mVcdFile, icmp_ln879_1_fu_222_p2, "icmp_ln879_1_fu_222_p2");
    sc_trace(mVcdFile, trunc_ln647_fu_286_p1, "trunc_ln647_fu_286_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, macIpEncode_rsp_o_V_TDATA_int, "macIpEncode_rsp_o_V_TDATA_int");
    sc_trace(mVcdFile, macIpEncode_rsp_o_V_TVALID_int, "macIpEncode_rsp_o_V_TVALID_int");
    sc_trace(mVcdFile, macIpEncode_rsp_o_V_TREADY_int, "macIpEncode_rsp_o_V_TREADY_int");
    sc_trace(mVcdFile, regslice_both_macIpEncode_rsp_o_V_U_vld_out, "regslice_both_macIpEncode_rsp_o_V_U_vld_out");
    sc_trace(mVcdFile, ap_condition_132, "ap_condition_132");
    sc_trace(mVcdFile, ap_condition_291, "ap_condition_291");
#endif

    }
}

genARPDiscovery::~genARPDiscovery() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_macIpEncode_rsp_o_V_U;
}

void genARPDiscovery::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         ((esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read())) || 
          (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
           esl_seteq<1,1,1>(grp_nbreadreq_fu_104_p3.read(), ap_const_lv1_0) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read()))))) {
        ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_4) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 ((esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_7) || 
                   esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_6)) || 
                  esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_5))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_2)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 ((esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
                   esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4.read()) && 
                   esl_seteq<1,1,1>(ap_const_lv1_1, or_ln323_fu_210_p2.read())) || 
                  (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
                   esl_seteq<1,1,1>(ap_const_lv1_1, or_ln323_fu_210_p2.read()) && 
                   esl_seteq<1,1,1>(grp_nbreadreq_fu_104_p3.read(), ap_const_lv1_0)))) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_104_p3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4.read())))) {
        ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157 = arp_scan_V_i.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157 = ap_phi_reg_pp0_iter0_arp_scan_V_loc_1_i_i_reg_157.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        gia_fsm_state = ap_const_lv3_3;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_2))) {
            gia_fsm_state = ap_const_lv3_4;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_104_p3.read()) && 
                    esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_4) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            gia_fsm_state = select_ln304_fu_228_p3.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                    ((esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
                      esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4.read()) && 
                      esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read())) || 
                     (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
                      esl_seteq<1,1,1>(grp_nbreadreq_fu_104_p3.read(), ap_const_lv1_0) && 
                      esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read()))))) {
            gia_fsm_state = ap_const_lv3_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                     esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                     esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_1) && 
                     esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_264_p2.read())))) {
            gia_fsm_state = ap_const_lv3_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_132.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_2)) {
            ip_lsb_V = add_ln700_fu_242_p2.read();
        } else if (esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_0)) {
            ip_lsb_V = ap_const_lv8_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arp_scan_1d_V = ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gia_fsm_state_load_reg_304 = gia_fsm_state.read();
        gia_fsm_state_load_reg_304_pp0_iter1_reg = gia_fsm_state_load_reg_304.read();
        tmp_2_reg_333_pp0_iter1_reg = tmp_2_reg_333.read();
        v1_V_reg_308 = ip_lsb_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,3,3>(gia_fsm_state_load_load_fu_186_p1.read(), ap_const_lv3_1))) {
        time_counter_V = add_ln700_1_fu_270_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_18_reg_337 = macIpEncode_rsp_i_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_324 = tmp_1_nbreadreq_fu_90_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_2_reg_333 = grp_nbreadreq_fu_104_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_1_reg_328 = macIpEncodeIn_V_V_TDATA.read();
    }
}

void genARPDiscovery::thread_add_ln700_1_fu_270_p2() {
    add_ln700_1_fu_270_p2 = (!time_counter_V.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(time_counter_V.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void genARPDiscovery::thread_add_ln700_fu_242_p2() {
    add_ln700_fu_242_p2 = (!ap_const_lv8_1.is_01() || !ip_lsb_V.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_1) + sc_biguint<8>(ip_lsb_V.read()));
}

void genARPDiscovery::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void genARPDiscovery::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void genARPDiscovery::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncodeIn_V_V_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
    esl_seteq<1,3,3>(gia_fsm_state_load_reg_304.read(), ap_const_lv3_2))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_macIpEncode_rsp_o_V_U_apdone_blk.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void genARPDiscovery::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncodeIn_V_V_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
    esl_seteq<1,3,3>(gia_fsm_state_load_reg_304.read(), ap_const_lv3_2)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_macIpEncode_rsp_o_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void genARPDiscovery::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncodeIn_V_V_TVALID.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
    esl_seteq<1,3,3>(gia_fsm_state_load_reg_304.read(), ap_const_lv3_2)) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_macIpEncode_rsp_o_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void genARPDiscovery::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncodeIn_V_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void genARPDiscovery::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_write_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_o_V_TREADY_int.read()));
}

void genARPDiscovery::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_full_n.read()) && 
  esl_seteq<1,3,3>(gia_fsm_state_load_reg_304.read(), ap_const_lv3_2)));
}

void genARPDiscovery::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op65_write_state3.read()) && esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_o_V_TREADY_int.read()));
}

void genARPDiscovery::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_macIpEncode_rsp_o_V_U_apdone_blk.read());
}

void genARPDiscovery::thread_ap_condition_132() {
    ap_condition_132 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void genARPDiscovery::thread_ap_condition_291() {
    ap_condition_291 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void genARPDiscovery::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void genARPDiscovery::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void genARPDiscovery::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void genARPDiscovery::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4() {
    if (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3)) {
        if (esl_seteq<1,1,1>(tmp_1_nbreadreq_fu_90_p3.read(), ap_const_lv1_0)) {
            ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4 = ap_const_lv1_1;
        } else if (esl_seteq<1,1,1>(tmp_1_nbreadreq_fu_90_p3.read(), ap_const_lv1_1)) {
            ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4 = ap_const_lv1_0;
        } else {
            ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4 = ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146.read();
        }
    } else {
        ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4 = ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146.read();
    }
}

void genARPDiscovery::thread_ap_phi_reg_pp0_iter0_arp_scan_V_loc_1_i_i_reg_157() {
    ap_phi_reg_pp0_iter0_arp_scan_V_loc_1_i_i_reg_157 =  (sc_lv<1>) ("X");
}

void genARPDiscovery::thread_ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146() {
    ap_phi_reg_pp0_iter0_p_0120_0_i_i_reg_146 =  (sc_lv<1>) ("X");
}

void genARPDiscovery::thread_ap_predicate_op13_read_state1() {
    ap_predicate_op13_read_state1 = (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && esl_seteq<1,1,1>(tmp_1_nbreadreq_fu_90_p3.read(), ap_const_lv1_1));
}

void genARPDiscovery::thread_ap_predicate_op17_read_state1() {
    ap_predicate_op17_read_state1 = (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_104_p3.read()));
}

void genARPDiscovery::thread_ap_predicate_op27_read_state1() {
    ap_predicate_op27_read_state1 = (esl_seteq<1,1,1>(ap_const_lv1_1, grp_nbreadreq_fu_104_p3.read()) && esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_4));
}

void genARPDiscovery::thread_ap_predicate_op44_write_state2() {
    ap_predicate_op44_write_state2 = (esl_seteq<1,3,3>(ap_const_lv3_3, gia_fsm_state_load_reg_304.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_324.read()));
}

void genARPDiscovery::thread_ap_predicate_op47_write_state2() {
    ap_predicate_op47_write_state2 = (esl_seteq<1,3,3>(ap_const_lv3_3, gia_fsm_state_load_reg_304.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_333.read()));
}

void genARPDiscovery::thread_ap_predicate_op65_write_state3() {
    ap_predicate_op65_write_state3 = (esl_seteq<1,3,3>(ap_const_lv3_3, gia_fsm_state_load_reg_304_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_333_pp0_iter1_reg.read()));
}

void genARPDiscovery::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_ap_sig_allocacmp_arp_scan_1d_V_load() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_sig_allocacmp_arp_scan_1d_V_load = ap_phi_reg_pp0_iter1_arp_scan_V_loc_1_i_i_reg_157.read();
    } else {
        ap_sig_allocacmp_arp_scan_1d_V_load = arp_scan_1d_V.read();
    }
}

void genARPDiscovery::thread_arp_scan_V_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         ((esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read())) || 
          (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
           esl_seteq<1,1,1>(grp_nbreadreq_fu_104_p3.read(), ap_const_lv1_0) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read()))) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        arp_scan_V_o = ap_const_lv1_0;
    } else {
        arp_scan_V_o = arp_scan_V_i.read();
    }
}

void genARPDiscovery::thread_arp_scan_V_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         ((esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_p_0120_0_i_i_phi_fu_149_p4.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read())) || 
          (esl_seteq<1,3,3>(gia_fsm_state.read(), ap_const_lv3_3) && 
           esl_seteq<1,1,1>(grp_nbreadreq_fu_104_p3.read(), ap_const_lv1_0) && 
           esl_seteq<1,1,1>(ap_const_lv1_0, or_ln323_fu_210_p2.read()))))) {
        arp_scan_V_o_ap_vld = ap_const_logic_1;
    } else {
        arp_scan_V_o_ap_vld = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_gia_fsm_state_load_load_fu_186_p1() {
    gia_fsm_state_load_load_fu_186_p1 = gia_fsm_state.read();
}

void genARPDiscovery::thread_grp_nbreadreq_fu_104_p3() {
    grp_nbreadreq_fu_104_p3 =  (sc_lv<1>) ((macIpEncode_rsp_i_V_empty_n.read()));
}

void genARPDiscovery::thread_icmp_ln879_1_fu_222_p2() {
    icmp_ln879_1_fu_222_p2 = (!ip_lsb_V.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(ip_lsb_V.read() == ap_const_lv8_0);
}

void genARPDiscovery::thread_icmp_ln879_fu_264_p2() {
    icmp_ln879_fu_264_p2 = (!time_counter_V.read().is_01() || !ap_const_lv32_59682F00.is_01())? sc_lv<1>(): sc_lv<1>(time_counter_V.read() == ap_const_lv32_59682F00);
}

void genARPDiscovery::thread_ip_aux_V_fu_290_p3() {
    ip_aux_V_fu_290_p3 = esl_concat<8,24>(v1_V_reg_308.read(), trunc_ln647_fu_286_p1.read());
}

void genARPDiscovery::thread_macIpEncodeIn_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        macIpEncodeIn_V_V_TDATA_blk_n = macIpEncodeIn_V_V_TVALID.read();
    } else {
        macIpEncodeIn_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void genARPDiscovery::thread_macIpEncodeIn_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op13_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        macIpEncodeIn_V_V_TREADY = ap_const_logic_1;
    } else {
        macIpEncodeIn_V_V_TREADY = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_macIpEncode_i_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(gia_fsm_state_load_reg_304.read(), ap_const_lv3_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        macIpEncode_i_V_V_blk_n = macIpEncode_i_V_V_full_n.read();
    } else {
        macIpEncode_i_V_V_blk_n = ap_const_logic_1;
    }
}

void genARPDiscovery::thread_macIpEncode_i_V_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_291.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,3,3>(gia_fsm_state_load_reg_304.read(), ap_const_lv3_2)) {
            macIpEncode_i_V_V_din = ip_aux_V_fu_290_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read())) {
            macIpEncode_i_V_V_din = tmp_V_1_reg_328.read();
        } else {
            macIpEncode_i_V_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        macIpEncode_i_V_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void genARPDiscovery::thread_macIpEncode_i_V_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(gia_fsm_state_load_reg_304.read(), ap_const_lv3_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        macIpEncode_i_V_V_write = ap_const_logic_1;
    } else {
        macIpEncode_i_V_V_write = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_macIpEncode_rsp_i_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        macIpEncode_rsp_i_V_blk_n = macIpEncode_rsp_i_V_empty_n.read();
    } else {
        macIpEncode_rsp_i_V_blk_n = ap_const_logic_1;
    }
}

void genARPDiscovery::thread_macIpEncode_rsp_i_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op17_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op27_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        macIpEncode_rsp_i_V_read = ap_const_logic_1;
    } else {
        macIpEncode_rsp_i_V_read = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_macIpEncode_rsp_o_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op65_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        macIpEncode_rsp_o_V_TDATA_blk_n = macIpEncode_rsp_o_V_TREADY_int.read();
    } else {
        macIpEncode_rsp_o_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void genARPDiscovery::thread_macIpEncode_rsp_o_V_TDATA_int() {
    macIpEncode_rsp_o_V_TDATA_int = esl_sext<56,49>(tmp_18_reg_337.read());
}

void genARPDiscovery::thread_macIpEncode_rsp_o_V_TVALID() {
    macIpEncode_rsp_o_V_TVALID = regslice_both_macIpEncode_rsp_o_V_U_vld_out.read();
}

void genARPDiscovery::thread_macIpEncode_rsp_o_V_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op47_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        macIpEncode_rsp_o_V_TVALID_int = ap_const_logic_1;
    } else {
        macIpEncode_rsp_o_V_TVALID_int = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_myIpAddress_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        myIpAddress_V_blk_n = myIpAddress_V_empty_n.read();
    } else {
        myIpAddress_V_blk_n = ap_const_logic_1;
    }
}

void genARPDiscovery::thread_myIpAddress_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        myIpAddress_V_read = ap_const_logic_1;
    } else {
        myIpAddress_V_read = ap_const_logic_0;
    }
}

void genARPDiscovery::thread_or_ln323_fu_210_p2() {
    or_ln323_fu_210_p2 = (ap_sig_allocacmp_arp_scan_1d_V_load.read() | xor_ln323_fu_204_p2.read());
}

void genARPDiscovery::thread_select_ln304_fu_228_p3() {
    select_ln304_fu_228_p3 = (!icmp_ln879_1_fu_222_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln879_1_fu_222_p2.read()[0].to_bool())? ap_const_lv3_3: ap_const_lv3_2);
}

void genARPDiscovery::thread_tmp_1_nbreadreq_fu_90_p3() {
    tmp_1_nbreadreq_fu_90_p3 =  (sc_lv<1>) ((macIpEncodeIn_V_V_TVALID.read()));
}

void genARPDiscovery::thread_trunc_ln647_fu_286_p1() {
    trunc_ln647_fu_286_p1 = myIpAddress_V_dout.read().range(24-1, 0);
}

void genARPDiscovery::thread_xor_ln323_fu_204_p2() {
    xor_ln323_fu_204_p2 = (arp_scan_V_i.read() ^ ap_const_lv1_1);
}

void genARPDiscovery::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

