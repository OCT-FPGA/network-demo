// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "arp_pkg_sender.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic arp_pkg_sender::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic arp_pkg_sender::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> arp_pkg_sender::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool arp_pkg_sender::ap_const_boolean_1 = true;
const sc_lv<2> arp_pkg_sender::ap_const_lv2_0 = "00";
const sc_lv<1> arp_pkg_sender::ap_const_lv1_0 = "0";
const sc_lv<1> arp_pkg_sender::ap_const_lv1_1 = "1";
const sc_lv<2> arp_pkg_sender::ap_const_lv2_1 = "1";
const sc_lv<2> arp_pkg_sender::ap_const_lv2_2 = "10";
const bool arp_pkg_sender::ap_const_boolean_0 = false;
const sc_lv<48> arp_pkg_sender::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<64> arp_pkg_sender::ap_const_lv64_FFFFFFFFFFFFFFF = "111111111111111111111111111111111111111111111111111111111111";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_30 = "110000";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_3F = "111111";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_40 = "1000000";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_4F = "1001111";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_50 = "1010000";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_5F = "1011111";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_60 = "1100000";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_67 = "1100111";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_68 = "1101000";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_6F = "1101111";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_70 = "1110000";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_9F = "10011111";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_A0 = "10100000";
const sc_lv<32> arp_pkg_sender::ap_const_lv32_BF = "10111111";
const sc_lv<176> arp_pkg_sender::ap_const_lv176_lc_1 = "10001010100010101000110010001100100111101000011000000000000000000000000000000000000000000000000";
const sc_lv<16> arp_pkg_sender::ap_const_lv16_200 = "1000000000";
const sc_lv<80> arp_pkg_sender::ap_const_lv80_1000406000801000608 = "1000000000000010000000110000000000000100000000001000000000000011000001000";
const sc_lv<48> arp_pkg_sender::ap_const_lv48_FFFFFFFFFFFF = "111111111111111111111111111111111111111111111111";

arp_pkg_sender::arp_pkg_sender(sc_module_name name) : sc_module(name), mVcdFile(0) {
    regslice_both_arpDataOut_V_data_V_U = new regslice_both<512>("regslice_both_arpDataOut_V_data_V_U");
    regslice_both_arpDataOut_V_data_V_U->ap_clk(ap_clk);
    regslice_both_arpDataOut_V_data_V_U->ap_rst(ap_rst);
    regslice_both_arpDataOut_V_data_V_U->data_in(arpDataOut_TDATA_int);
    regslice_both_arpDataOut_V_data_V_U->vld_in(arpDataOut_TVALID_int);
    regslice_both_arpDataOut_V_data_V_U->ack_in(arpDataOut_TREADY_int);
    regslice_both_arpDataOut_V_data_V_U->data_out(arpDataOut_TDATA);
    regslice_both_arpDataOut_V_data_V_U->vld_out(regslice_both_arpDataOut_V_data_V_U_vld_out);
    regslice_both_arpDataOut_V_data_V_U->ack_out(arpDataOut_TREADY);
    regslice_both_arpDataOut_V_data_V_U->apdone_blk(regslice_both_arpDataOut_V_data_V_U_apdone_blk);
    regslice_both_arpDataOut_V_keep_V_U = new regslice_both<64>("regslice_both_arpDataOut_V_keep_V_U");
    regslice_both_arpDataOut_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_arpDataOut_V_keep_V_U->ap_rst(ap_rst);
    regslice_both_arpDataOut_V_keep_V_U->data_in(ap_var_for_const0);
    regslice_both_arpDataOut_V_keep_V_U->vld_in(arpDataOut_TVALID_int);
    regslice_both_arpDataOut_V_keep_V_U->ack_in(regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy);
    regslice_both_arpDataOut_V_keep_V_U->data_out(arpDataOut_TKEEP);
    regslice_both_arpDataOut_V_keep_V_U->vld_out(regslice_both_arpDataOut_V_keep_V_U_vld_out);
    regslice_both_arpDataOut_V_keep_V_U->ack_out(arpDataOut_TREADY);
    regslice_both_arpDataOut_V_keep_V_U->apdone_blk(regslice_both_arpDataOut_V_keep_V_U_apdone_blk);
    regslice_both_arpDataOut_V_last_V_U = new regslice_both<1>("regslice_both_arpDataOut_V_last_V_U");
    regslice_both_arpDataOut_V_last_V_U->ap_clk(ap_clk);
    regslice_both_arpDataOut_V_last_V_U->ap_rst(ap_rst);
    regslice_both_arpDataOut_V_last_V_U->data_in(ap_var_for_const1);
    regslice_both_arpDataOut_V_last_V_U->vld_in(arpDataOut_TVALID_int);
    regslice_both_arpDataOut_V_last_V_U->ack_in(regslice_both_arpDataOut_V_last_V_U_ack_in_dummy);
    regslice_both_arpDataOut_V_last_V_U->data_out(arpDataOut_TLAST);
    regslice_both_arpDataOut_V_last_V_U->vld_out(regslice_both_arpDataOut_V_last_V_U_vld_out);
    regslice_both_arpDataOut_V_last_V_U->ack_out(arpDataOut_TREADY);
    regslice_both_arpDataOut_V_last_V_U->apdone_blk(regslice_both_arpDataOut_V_last_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln879_fu_450_p2);
    sensitive << ( networkMask_V_dout );
    sensitive << ( xor_ln879_fu_444_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( arpRequestFifo_V_V_empty_n );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( arpReplyFifo_V_empty_n );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( gatewayIP_V_out_full_n );
    sensitive << ( networkMask_V_out_full_n );
    sensitive << ( myMacAddress_V_empty_n );
    sensitive << ( regslice_both_arpDataOut_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( arpRequestFifo_V_V_empty_n );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( arpReplyFifo_V_empty_n );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( gatewayIP_V_out_full_n );
    sensitive << ( networkMask_V_out_full_n );
    sensitive << ( myMacAddress_V_empty_n );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_arpDataOut_V_data_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( arpRequestFifo_V_V_empty_n );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( arpReplyFifo_V_empty_n );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( gatewayIP_V_out_full_n );
    sensitive << ( networkMask_V_out_full_n );
    sensitive << ( myMacAddress_V_empty_n );
    sensitive << ( ap_block_state2_io );
    sensitive << ( regslice_both_arpDataOut_V_data_V_U_apdone_blk );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( arpRequestFifo_V_V_empty_n );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( arpReplyFifo_V_empty_n );
    sensitive << ( ap_predicate_op14_read_state1 );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( aps_fsmState_load_reg_496 );
    sensitive << ( arpDataOut_TREADY_int );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( gatewayIP_V_out_full_n );
    sensitive << ( networkMask_V_out_full_n );
    sensitive << ( myMacAddress_V_empty_n );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( aps_fsmState_load_reg_496_pp0_iter1_reg );
    sensitive << ( arpDataOut_TREADY_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( regslice_both_arpDataOut_V_data_V_U_apdone_blk );

    SC_METHOD(thread_ap_condition_276);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op12_read_state1);
    sensitive << ( tmp_nbreadreq_fu_142_p3 );
    sensitive << ( tmp_4_nbreadreq_fu_150_p3 );
    sensitive << ( aps_fsmState );

    SC_METHOD(thread_ap_predicate_op14_read_state1);
    sensitive << ( tmp_nbreadreq_fu_142_p3 );
    sensitive << ( aps_fsmState );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_aps_fsmState_load_load_fu_239_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( aps_fsmState );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpDataOut_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( aps_fsmState_load_reg_496 );
    sensitive << ( aps_fsmState_load_reg_496_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( arpDataOut_TREADY_int );

    SC_METHOD(thread_arpDataOut_TDATA_int);
    sensitive << ( aps_fsmState_load_reg_496 );
    sensitive << ( p_Result_1_fu_413_p14 );
    sensitive << ( p_Result_s_fu_470_p9 );
    sensitive << ( ap_condition_276 );

    SC_METHOD(thread_arpDataOut_TVALID);
    sensitive << ( regslice_both_arpDataOut_V_data_V_U_vld_out );

    SC_METHOD(thread_arpDataOut_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( aps_fsmState_load_reg_496 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpReplyFifo_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( arpReplyFifo_V_empty_n );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpReplyFifo_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op14_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpRequestFifo_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( arpRequestFifo_V_V_empty_n );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpRequestFifo_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op12_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gatewayIP_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_gatewayIP_V_out_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gatewayIP_V_out_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_gatewayIP_V_out_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( gatewayIP_V_dout );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_gatewayIP_V_out_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gatewayIP_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln879_fu_456_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( aps_fsmState_load_reg_496 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( and_ln879_fu_450_p2 );

    SC_METHOD(thread_myIpAddress_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_myIpAddress_V_out_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_myIpAddress_V_out_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myIpAddress_V_dout );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_myIpAddress_V_out_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_myIpAddress_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_myMacAddress_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myMacAddress_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_myMacAddress_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_networkMask_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_networkMask_V_out_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( networkMask_V_out_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_networkMask_V_out_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( networkMask_V_dout );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_networkMask_V_out_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_networkMask_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_1_fu_413_p14);
    sensitive << ( myIpAddress_V_dout );
    sensitive << ( myMacAddress_V_dout );
    sensitive << ( replyMeta_srcMac_V );
    sensitive << ( replyMeta_ethType_V );
    sensitive << ( replyMeta_hwType_V );
    sensitive << ( replyMeta_protoType_s );
    sensitive << ( replyMeta_hwLen_V );
    sensitive << ( replyMeta_protoLen_V );
    sensitive << ( replyMeta_hwAddrSrc_s );
    sensitive << ( replyMeta_protoAddrS );

    SC_METHOD(thread_p_Result_s_fu_470_p9);
    sensitive << ( myIpAddress_V_dout );
    sensitive << ( myMacAddress_V_dout );
    sensitive << ( select_ln136_fu_462_p3 );

    SC_METHOD(thread_select_ln136_fu_462_p3);
    sensitive << ( gatewayIP_V_dout );
    sensitive << ( inputIP_V );
    sensitive << ( icmp_ln879_fu_456_p2 );

    SC_METHOD(thread_tmp_4_nbreadreq_fu_150_p3);
    sensitive << ( arpRequestFifo_V_V_empty_n );

    SC_METHOD(thread_tmp_nbreadreq_fu_142_p3);
    sensitive << ( arpReplyFifo_V_empty_n );

    SC_METHOD(thread_trunc_ln321_fu_249_p1);
    sensitive << ( arpReplyFifo_V_dout );

    SC_METHOD(thread_xor_ln879_fu_444_p2);
    sensitive << ( myIpAddress_V_dout );
    sensitive << ( inputIP_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    aps_fsmState = "00";
    inputIP_V = "00000000000000000000000000000000";
    replyMeta_srcMac_V = "000000000000000000000000000000000000000000000000";
    replyMeta_ethType_V = "0000000000000000";
    replyMeta_hwType_V = "0000000000000000";
    replyMeta_protoType_s = "0000000000000000";
    replyMeta_hwLen_V = "00000000";
    replyMeta_protoLen_V = "00000000";
    replyMeta_hwAddrSrc_s = "000000000000000000000000000000000000000000000000";
    replyMeta_protoAddrS = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "arp_pkg_sender_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, arpRequestFifo_V_V_dout, "(port)arpRequestFifo_V_V_dout");
    sc_trace(mVcdFile, arpRequestFifo_V_V_empty_n, "(port)arpRequestFifo_V_V_empty_n");
    sc_trace(mVcdFile, arpRequestFifo_V_V_read, "(port)arpRequestFifo_V_V_read");
    sc_trace(mVcdFile, arpReplyFifo_V_dout, "(port)arpReplyFifo_V_dout");
    sc_trace(mVcdFile, arpReplyFifo_V_empty_n, "(port)arpReplyFifo_V_empty_n");
    sc_trace(mVcdFile, arpReplyFifo_V_read, "(port)arpReplyFifo_V_read");
    sc_trace(mVcdFile, myIpAddress_V_dout, "(port)myIpAddress_V_dout");
    sc_trace(mVcdFile, myIpAddress_V_empty_n, "(port)myIpAddress_V_empty_n");
    sc_trace(mVcdFile, myIpAddress_V_read, "(port)myIpAddress_V_read");
    sc_trace(mVcdFile, gatewayIP_V_dout, "(port)gatewayIP_V_dout");
    sc_trace(mVcdFile, gatewayIP_V_empty_n, "(port)gatewayIP_V_empty_n");
    sc_trace(mVcdFile, gatewayIP_V_read, "(port)gatewayIP_V_read");
    sc_trace(mVcdFile, networkMask_V_dout, "(port)networkMask_V_dout");
    sc_trace(mVcdFile, networkMask_V_empty_n, "(port)networkMask_V_empty_n");
    sc_trace(mVcdFile, networkMask_V_read, "(port)networkMask_V_read");
    sc_trace(mVcdFile, myIpAddress_V_out_din, "(port)myIpAddress_V_out_din");
    sc_trace(mVcdFile, myIpAddress_V_out_full_n, "(port)myIpAddress_V_out_full_n");
    sc_trace(mVcdFile, myIpAddress_V_out_write, "(port)myIpAddress_V_out_write");
    sc_trace(mVcdFile, gatewayIP_V_out_din, "(port)gatewayIP_V_out_din");
    sc_trace(mVcdFile, gatewayIP_V_out_full_n, "(port)gatewayIP_V_out_full_n");
    sc_trace(mVcdFile, gatewayIP_V_out_write, "(port)gatewayIP_V_out_write");
    sc_trace(mVcdFile, networkMask_V_out_din, "(port)networkMask_V_out_din");
    sc_trace(mVcdFile, networkMask_V_out_full_n, "(port)networkMask_V_out_full_n");
    sc_trace(mVcdFile, networkMask_V_out_write, "(port)networkMask_V_out_write");
    sc_trace(mVcdFile, myMacAddress_V_dout, "(port)myMacAddress_V_dout");
    sc_trace(mVcdFile, myMacAddress_V_empty_n, "(port)myMacAddress_V_empty_n");
    sc_trace(mVcdFile, myMacAddress_V_read, "(port)myMacAddress_V_read");
    sc_trace(mVcdFile, arpDataOut_TREADY, "(port)arpDataOut_TREADY");
    sc_trace(mVcdFile, arpDataOut_TDATA, "(port)arpDataOut_TDATA");
    sc_trace(mVcdFile, arpDataOut_TVALID, "(port)arpDataOut_TVALID");
    sc_trace(mVcdFile, arpDataOut_TKEEP, "(port)arpDataOut_TKEEP");
    sc_trace(mVcdFile, arpDataOut_TLAST, "(port)arpDataOut_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, aps_fsmState_load_load_fu_239_p1, "aps_fsmState_load_load_fu_239_p1");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_142_p3, "tmp_nbreadreq_fu_142_p3");
    sc_trace(mVcdFile, tmp_4_nbreadreq_fu_150_p3, "tmp_4_nbreadreq_fu_150_p3");
    sc_trace(mVcdFile, ap_predicate_op12_read_state1, "ap_predicate_op12_read_state1");
    sc_trace(mVcdFile, ap_predicate_op14_read_state1, "ap_predicate_op14_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, aps_fsmState_load_reg_496, "aps_fsmState_load_reg_496");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_data_V_U_apdone_blk, "regslice_both_arpDataOut_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, aps_fsmState_load_reg_496_pp0_iter1_reg, "aps_fsmState_load_reg_496_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, aps_fsmState, "aps_fsmState");
    sc_trace(mVcdFile, inputIP_V, "inputIP_V");
    sc_trace(mVcdFile, replyMeta_srcMac_V, "replyMeta_srcMac_V");
    sc_trace(mVcdFile, replyMeta_ethType_V, "replyMeta_ethType_V");
    sc_trace(mVcdFile, replyMeta_hwType_V, "replyMeta_hwType_V");
    sc_trace(mVcdFile, replyMeta_protoType_s, "replyMeta_protoType_s");
    sc_trace(mVcdFile, replyMeta_hwLen_V, "replyMeta_hwLen_V");
    sc_trace(mVcdFile, replyMeta_protoLen_V, "replyMeta_protoLen_V");
    sc_trace(mVcdFile, replyMeta_hwAddrSrc_s, "replyMeta_hwAddrSrc_s");
    sc_trace(mVcdFile, replyMeta_protoAddrS, "replyMeta_protoAddrS");
    sc_trace(mVcdFile, arpDataOut_TDATA_blk_n, "arpDataOut_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, myMacAddress_V_blk_n, "myMacAddress_V_blk_n");
    sc_trace(mVcdFile, myIpAddress_V_blk_n, "myIpAddress_V_blk_n");
    sc_trace(mVcdFile, gatewayIP_V_blk_n, "gatewayIP_V_blk_n");
    sc_trace(mVcdFile, networkMask_V_blk_n, "networkMask_V_blk_n");
    sc_trace(mVcdFile, myIpAddress_V_out_blk_n, "myIpAddress_V_out_blk_n");
    sc_trace(mVcdFile, gatewayIP_V_out_blk_n, "gatewayIP_V_out_blk_n");
    sc_trace(mVcdFile, networkMask_V_out_blk_n, "networkMask_V_out_blk_n");
    sc_trace(mVcdFile, arpReplyFifo_V_blk_n, "arpReplyFifo_V_blk_n");
    sc_trace(mVcdFile, arpRequestFifo_V_V_blk_n, "arpRequestFifo_V_V_blk_n");
    sc_trace(mVcdFile, tmp_reg_500, "tmp_reg_500");
    sc_trace(mVcdFile, tmp_4_reg_504, "tmp_4_reg_504");
    sc_trace(mVcdFile, tmp_V_reg_508, "tmp_V_reg_508");
    sc_trace(mVcdFile, p_Result_1_fu_413_p14, "p_Result_1_fu_413_p14");
    sc_trace(mVcdFile, p_Result_s_fu_470_p9, "p_Result_s_fu_470_p9");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, trunc_ln321_fu_249_p1, "trunc_ln321_fu_249_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, xor_ln879_fu_444_p2, "xor_ln879_fu_444_p2");
    sc_trace(mVcdFile, and_ln879_fu_450_p2, "and_ln879_fu_450_p2");
    sc_trace(mVcdFile, icmp_ln879_fu_456_p2, "icmp_ln879_fu_456_p2");
    sc_trace(mVcdFile, select_ln136_fu_462_p3, "select_ln136_fu_462_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, arpDataOut_TDATA_int, "arpDataOut_TDATA_int");
    sc_trace(mVcdFile, arpDataOut_TVALID_int, "arpDataOut_TVALID_int");
    sc_trace(mVcdFile, arpDataOut_TREADY_int, "arpDataOut_TREADY_int");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_data_V_U_vld_out, "regslice_both_arpDataOut_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_keep_V_U_apdone_blk, "regslice_both_arpDataOut_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy, "regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_keep_V_U_vld_out, "regslice_both_arpDataOut_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_last_V_U_apdone_blk, "regslice_both_arpDataOut_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_last_V_U_ack_in_dummy, "regslice_both_arpDataOut_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_arpDataOut_V_last_V_U_vld_out, "regslice_both_arpDataOut_V_last_V_U_vld_out");
    sc_trace(mVcdFile, ap_condition_276, "ap_condition_276");
#endif

    }
}

arp_pkg_sender::~arp_pkg_sender() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete regslice_both_arpDataOut_V_data_V_U;
    delete regslice_both_arpDataOut_V_keep_V_U;
    delete regslice_both_arpDataOut_V_last_V_U;
}

void arp_pkg_sender::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_1;
}

void arp_pkg_sender::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_FFFFFFFFFFFFFFF;
}

void arp_pkg_sender::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(aps_fsmState.read(), ap_const_lv2_0) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_142_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        aps_fsmState = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                esl_seteq<1,2,2>(aps_fsmState.read(), ap_const_lv2_0) && 
                esl_seteq<1,1,1>(tmp_nbreadreq_fu_142_p3.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(tmp_4_nbreadreq_fu_150_p3.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        aps_fsmState = ap_const_lv2_2;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,2,2>(aps_fsmState_load_load_fu_239_p1.read(), ap_const_lv2_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,2,2>(aps_fsmState_load_load_fu_239_p1.read(), ap_const_lv2_2)))) {
        aps_fsmState = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        aps_fsmState_load_reg_496 = aps_fsmState.read();
        aps_fsmState_load_reg_496_pp0_iter1_reg = aps_fsmState_load_reg_496.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,2,2>(ap_const_lv2_0, aps_fsmState_load_reg_496.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_500.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_reg_504.read()))) {
        inputIP_V = tmp_V_reg_508.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,2,2>(aps_fsmState.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_142_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        replyMeta_ethType_V = arpReplyFifo_V_dout.read().range(63, 48);
        replyMeta_hwAddrSrc_s = arpReplyFifo_V_dout.read().range(159, 112);
        replyMeta_hwLen_V = arpReplyFifo_V_dout.read().range(103, 96);
        replyMeta_hwType_V = arpReplyFifo_V_dout.read().range(79, 64);
        replyMeta_protoAddrS = arpReplyFifo_V_dout.read().range(191, 160);
        replyMeta_protoLen_V = arpReplyFifo_V_dout.read().range(111, 104);
        replyMeta_protoType_s = arpReplyFifo_V_dout.read().range(95, 80);
        replyMeta_srcMac_V = trunc_ln321_fu_249_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,2,2>(aps_fsmState.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_142_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_4_reg_504 = tmp_4_nbreadreq_fu_150_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_reg_508 = arpRequestFifo_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,2,2>(aps_fsmState.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_500 = tmp_nbreadreq_fu_142_p3.read();
    }
}

void arp_pkg_sender::thread_and_ln879_fu_450_p2() {
    and_ln879_fu_450_p2 = (networkMask_V_dout.read() & xor_ln879_fu_444_p2.read());
}

void arp_pkg_sender::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void arp_pkg_sender::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void arp_pkg_sender::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myMacAddress_V_empty_n.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpDataOut_V_data_V_U_apdone_blk.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void arp_pkg_sender::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myMacAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpDataOut_V_data_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void arp_pkg_sender::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_out_full_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myMacAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || ((esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpDataOut_V_data_V_U_apdone_blk.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void arp_pkg_sender::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void arp_pkg_sender::thread_ap_block_state2_io() {
    ap_block_state2_io = ((esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpDataOut_TREADY_int.read())) || (esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_2) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpDataOut_TREADY_int.read())));
}

void arp_pkg_sender::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, myMacAddress_V_empty_n.read()));
}

void arp_pkg_sender::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,2,2>(ap_const_lv2_1, aps_fsmState_load_reg_496_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpDataOut_TREADY_int.read())) || (esl_seteq<1,2,2>(ap_const_lv2_2, aps_fsmState_load_reg_496_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, arpDataOut_TREADY_int.read())));
}

void arp_pkg_sender::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_arpDataOut_V_data_V_U_apdone_blk.read());
}

void arp_pkg_sender::thread_ap_condition_276() {
    ap_condition_276 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void arp_pkg_sender::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void arp_pkg_sender::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void arp_pkg_sender::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void arp_pkg_sender::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_ap_predicate_op12_read_state1() {
    ap_predicate_op12_read_state1 = (esl_seteq<1,2,2>(aps_fsmState.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_142_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_4_nbreadreq_fu_150_p3.read(), ap_const_lv1_1));
}

void arp_pkg_sender::thread_ap_predicate_op14_read_state1() {
    ap_predicate_op14_read_state1 = (esl_seteq<1,2,2>(aps_fsmState.read(), ap_const_lv2_0) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_142_p3.read(), ap_const_lv1_1));
}

void arp_pkg_sender::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_aps_fsmState_load_load_fu_239_p1() {
    aps_fsmState_load_load_fu_239_p1 = aps_fsmState.read();
}

void arp_pkg_sender::thread_arpDataOut_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,2,2>(ap_const_lv2_2, aps_fsmState_load_reg_496_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,2,2>(ap_const_lv2_1, aps_fsmState_load_reg_496_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        arpDataOut_TDATA_blk_n = arpDataOut_TREADY_int.read();
    } else {
        arpDataOut_TDATA_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_arpDataOut_TDATA_int() {
    if (esl_seteq<1,1,1>(ap_condition_276.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_2)) {
            arpDataOut_TDATA_int = p_Result_s_fu_470_p9.read();
        } else if (esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_1)) {
            arpDataOut_TDATA_int = p_Result_1_fu_413_p14.read();
        } else {
            arpDataOut_TDATA_int = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        arpDataOut_TDATA_int = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void arp_pkg_sender::thread_arpDataOut_TVALID() {
    arpDataOut_TVALID = regslice_both_arpDataOut_V_data_V_U_vld_out.read();
}

void arp_pkg_sender::thread_arpDataOut_TVALID_int() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,2,2>(aps_fsmState_load_reg_496.read(), ap_const_lv2_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        arpDataOut_TVALID_int = ap_const_logic_1;
    } else {
        arpDataOut_TVALID_int = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_arpReplyFifo_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        arpReplyFifo_V_blk_n = arpReplyFifo_V_empty_n.read();
    } else {
        arpReplyFifo_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_arpReplyFifo_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op14_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpReplyFifo_V_read = ap_const_logic_1;
    } else {
        arpReplyFifo_V_read = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_arpRequestFifo_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        arpRequestFifo_V_V_blk_n = arpRequestFifo_V_V_empty_n.read();
    } else {
        arpRequestFifo_V_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_arpRequestFifo_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op12_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpRequestFifo_V_V_read = ap_const_logic_1;
    } else {
        arpRequestFifo_V_V_read = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_gatewayIP_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        gatewayIP_V_blk_n = gatewayIP_V_empty_n.read();
    } else {
        gatewayIP_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_gatewayIP_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        gatewayIP_V_out_blk_n = gatewayIP_V_out_full_n.read();
    } else {
        gatewayIP_V_out_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_gatewayIP_V_out_din() {
    gatewayIP_V_out_din = gatewayIP_V_dout.read();
}

void arp_pkg_sender::thread_gatewayIP_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gatewayIP_V_out_write = ap_const_logic_1;
    } else {
        gatewayIP_V_out_write = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_gatewayIP_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gatewayIP_V_read = ap_const_logic_1;
    } else {
        gatewayIP_V_read = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_icmp_ln879_fu_456_p2() {
    icmp_ln879_fu_456_p2 = (!and_ln879_fu_450_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(and_ln879_fu_450_p2.read() == ap_const_lv32_0);
}

void arp_pkg_sender::thread_myIpAddress_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        myIpAddress_V_blk_n = myIpAddress_V_empty_n.read();
    } else {
        myIpAddress_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_myIpAddress_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        myIpAddress_V_out_blk_n = myIpAddress_V_out_full_n.read();
    } else {
        myIpAddress_V_out_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_myIpAddress_V_out_din() {
    myIpAddress_V_out_din = myIpAddress_V_dout.read();
}

void arp_pkg_sender::thread_myIpAddress_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        myIpAddress_V_out_write = ap_const_logic_1;
    } else {
        myIpAddress_V_out_write = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_myIpAddress_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        myIpAddress_V_read = ap_const_logic_1;
    } else {
        myIpAddress_V_read = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_myMacAddress_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        myMacAddress_V_blk_n = myMacAddress_V_empty_n.read();
    } else {
        myMacAddress_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_myMacAddress_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        myMacAddress_V_read = ap_const_logic_1;
    } else {
        myMacAddress_V_read = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_networkMask_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        networkMask_V_blk_n = networkMask_V_empty_n.read();
    } else {
        networkMask_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_networkMask_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        networkMask_V_out_blk_n = networkMask_V_out_full_n.read();
    } else {
        networkMask_V_out_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_sender::thread_networkMask_V_out_din() {
    networkMask_V_out_din = networkMask_V_dout.read();
}

void arp_pkg_sender::thread_networkMask_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        networkMask_V_out_write = ap_const_logic_1;
    } else {
        networkMask_V_out_write = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_networkMask_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        networkMask_V_read = ap_const_logic_1;
    } else {
        networkMask_V_read = ap_const_logic_0;
    }
}

void arp_pkg_sender::thread_p_Result_1_fu_413_p14() {
    p_Result_1_fu_413_p14 = esl_concat<464,48>(esl_concat<416,48>(esl_concat<400,16>(esl_concat<384,16>(esl_concat<368,16>(esl_concat<360,8>(esl_concat<352,8>(esl_concat<336,16>(esl_concat<288,48>(esl_concat<256,32>(esl_concat<208,48>(esl_concat<176,32>(ap_const_lv176_lc_1, replyMeta_protoAddrS.read()), replyMeta_hwAddrSrc_s.read()), myIpAddress_V_dout.read()), myMacAddress_V_dout.read()), ap_const_lv16_200), replyMeta_protoLen_V.read()), replyMeta_hwLen_V.read()), replyMeta_protoType_s.read()), replyMeta_hwType_V.read()), replyMeta_ethType_V.read()), myMacAddress_V_dout.read()), replyMeta_srcMac_V.read());
}

void arp_pkg_sender::thread_p_Result_s_fu_470_p9() {
    p_Result_s_fu_470_p9 = esl_concat<464,48>(esl_concat<416,48>(esl_concat<336,80>(esl_concat<288,48>(esl_concat<256,32>(esl_concat<208,48>(esl_concat<176,32>(ap_const_lv176_lc_1, select_ln136_fu_462_p3.read()), ap_const_lv48_0), myIpAddress_V_dout.read()), myMacAddress_V_dout.read()), ap_const_lv80_1000406000801000608), myMacAddress_V_dout.read()), ap_const_lv48_FFFFFFFFFFFF);
}

void arp_pkg_sender::thread_select_ln136_fu_462_p3() {
    select_ln136_fu_462_p3 = (!icmp_ln879_fu_456_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln879_fu_456_p2.read()[0].to_bool())? inputIP_V.read(): gatewayIP_V_dout.read());
}

void arp_pkg_sender::thread_tmp_4_nbreadreq_fu_150_p3() {
    tmp_4_nbreadreq_fu_150_p3 =  (sc_lv<1>) ((arpRequestFifo_V_V_empty_n.read()));
}

void arp_pkg_sender::thread_tmp_nbreadreq_fu_142_p3() {
    tmp_nbreadreq_fu_142_p3 =  (sc_lv<1>) ((arpReplyFifo_V_empty_n.read()));
}

void arp_pkg_sender::thread_trunc_ln321_fu_249_p1() {
    trunc_ln321_fu_249_p1 = arpReplyFifo_V_dout.read().range(48-1, 0);
}

void arp_pkg_sender::thread_xor_ln879_fu_444_p2() {
    xor_ln879_fu_444_p2 = (myIpAddress_V_dout.read() ^ inputIP_V.read());
}

void arp_pkg_sender::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

