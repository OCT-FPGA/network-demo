// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _arp_pkg_sender_HH_
#define _arp_pkg_sender_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct arp_pkg_sender : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > arpRequestFifo_V_V_dout;
    sc_in< sc_logic > arpRequestFifo_V_V_empty_n;
    sc_out< sc_logic > arpRequestFifo_V_V_read;
    sc_in< sc_lv<192> > arpReplyFifo_V_dout;
    sc_in< sc_logic > arpReplyFifo_V_empty_n;
    sc_out< sc_logic > arpReplyFifo_V_read;
    sc_in< sc_lv<32> > myIpAddress_V_dout;
    sc_in< sc_logic > myIpAddress_V_empty_n;
    sc_out< sc_logic > myIpAddress_V_read;
    sc_in< sc_lv<32> > gatewayIP_V_dout;
    sc_in< sc_logic > gatewayIP_V_empty_n;
    sc_out< sc_logic > gatewayIP_V_read;
    sc_in< sc_lv<32> > networkMask_V_dout;
    sc_in< sc_logic > networkMask_V_empty_n;
    sc_out< sc_logic > networkMask_V_read;
    sc_out< sc_lv<32> > myIpAddress_V_out_din;
    sc_in< sc_logic > myIpAddress_V_out_full_n;
    sc_out< sc_logic > myIpAddress_V_out_write;
    sc_out< sc_lv<32> > gatewayIP_V_out_din;
    sc_in< sc_logic > gatewayIP_V_out_full_n;
    sc_out< sc_logic > gatewayIP_V_out_write;
    sc_out< sc_lv<32> > networkMask_V_out_din;
    sc_in< sc_logic > networkMask_V_out_full_n;
    sc_out< sc_logic > networkMask_V_out_write;
    sc_in< sc_lv<48> > myMacAddress_V_dout;
    sc_in< sc_logic > myMacAddress_V_empty_n;
    sc_out< sc_logic > myMacAddress_V_read;
    sc_in< sc_logic > arpDataOut_TREADY;
    sc_out< sc_lv<512> > arpDataOut_TDATA;
    sc_out< sc_logic > arpDataOut_TVALID;
    sc_out< sc_lv<64> > arpDataOut_TKEEP;
    sc_out< sc_lv<1> > arpDataOut_TLAST;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<64> > ap_var_for_const0;


    // Module declarations
    arp_pkg_sender(sc_module_name name);
    SC_HAS_PROCESS(arp_pkg_sender);

    ~arp_pkg_sender();

    sc_trace_file* mVcdFile;

    regslice_both<512>* regslice_both_arpDataOut_V_data_V_U;
    regslice_both<64>* regslice_both_arpDataOut_V_keep_V_U;
    regslice_both<1>* regslice_both_arpDataOut_V_last_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<2> > aps_fsmState_load_load_fu_239_p1;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_142_p3;
    sc_signal< sc_lv<1> > tmp_4_nbreadreq_fu_150_p3;
    sc_signal< bool > ap_predicate_op12_read_state1;
    sc_signal< bool > ap_predicate_op14_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_lv<2> > aps_fsmState_load_reg_496;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_data_V_U_apdone_blk;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< sc_lv<2> > aps_fsmState_load_reg_496_pp0_iter1_reg;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > aps_fsmState;
    sc_signal< sc_lv<32> > inputIP_V;
    sc_signal< sc_lv<48> > replyMeta_srcMac_V;
    sc_signal< sc_lv<16> > replyMeta_ethType_V;
    sc_signal< sc_lv<16> > replyMeta_hwType_V;
    sc_signal< sc_lv<16> > replyMeta_protoType_s;
    sc_signal< sc_lv<8> > replyMeta_hwLen_V;
    sc_signal< sc_lv<8> > replyMeta_protoLen_V;
    sc_signal< sc_lv<48> > replyMeta_hwAddrSrc_s;
    sc_signal< sc_lv<32> > replyMeta_protoAddrS;
    sc_signal< sc_logic > arpDataOut_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > myMacAddress_V_blk_n;
    sc_signal< sc_logic > myIpAddress_V_blk_n;
    sc_signal< sc_logic > gatewayIP_V_blk_n;
    sc_signal< sc_logic > networkMask_V_blk_n;
    sc_signal< sc_logic > myIpAddress_V_out_blk_n;
    sc_signal< sc_logic > gatewayIP_V_out_blk_n;
    sc_signal< sc_logic > networkMask_V_out_blk_n;
    sc_signal< sc_logic > arpReplyFifo_V_blk_n;
    sc_signal< sc_logic > arpRequestFifo_V_V_blk_n;
    sc_signal< sc_lv<1> > tmp_reg_500;
    sc_signal< sc_lv<1> > tmp_4_reg_504;
    sc_signal< sc_lv<32> > tmp_V_reg_508;
    sc_signal< sc_lv<512> > p_Result_1_fu_413_p14;
    sc_signal< sc_lv<512> > p_Result_s_fu_470_p9;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<48> > trunc_ln321_fu_249_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > xor_ln879_fu_444_p2;
    sc_signal< sc_lv<32> > and_ln879_fu_450_p2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_456_p2;
    sc_signal< sc_lv<32> > select_ln136_fu_462_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<512> > arpDataOut_TDATA_int;
    sc_signal< sc_logic > arpDataOut_TVALID_int;
    sc_signal< sc_logic > arpDataOut_TREADY_int;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_arpDataOut_V_last_V_U_vld_out;
    sc_signal< bool > ap_condition_276;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFF;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_lv<32> ap_const_lv32_50;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_67;
    static const sc_lv<32> ap_const_lv32_68;
    static const sc_lv<32> ap_const_lv32_6F;
    static const sc_lv<32> ap_const_lv32_70;
    static const sc_lv<32> ap_const_lv32_9F;
    static const sc_lv<32> ap_const_lv32_A0;
    static const sc_lv<32> ap_const_lv32_BF;
    static const sc_lv<176> ap_const_lv176_lc_1;
    static const sc_lv<16> ap_const_lv16_200;
    static const sc_lv<80> ap_const_lv80_1000406000801000608;
    static const sc_lv<48> ap_const_lv48_FFFFFFFFFFFF;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_and_ln879_fu_450_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_io();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_276();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_predicate_op12_read_state1();
    void thread_ap_predicate_op14_read_state1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_aps_fsmState_load_load_fu_239_p1();
    void thread_arpDataOut_TDATA_blk_n();
    void thread_arpDataOut_TDATA_int();
    void thread_arpDataOut_TVALID();
    void thread_arpDataOut_TVALID_int();
    void thread_arpReplyFifo_V_blk_n();
    void thread_arpReplyFifo_V_read();
    void thread_arpRequestFifo_V_V_blk_n();
    void thread_arpRequestFifo_V_V_read();
    void thread_gatewayIP_V_blk_n();
    void thread_gatewayIP_V_out_blk_n();
    void thread_gatewayIP_V_out_din();
    void thread_gatewayIP_V_out_write();
    void thread_gatewayIP_V_read();
    void thread_icmp_ln879_fu_456_p2();
    void thread_myIpAddress_V_blk_n();
    void thread_myIpAddress_V_out_blk_n();
    void thread_myIpAddress_V_out_din();
    void thread_myIpAddress_V_out_write();
    void thread_myIpAddress_V_read();
    void thread_myMacAddress_V_blk_n();
    void thread_myMacAddress_V_read();
    void thread_networkMask_V_blk_n();
    void thread_networkMask_V_out_blk_n();
    void thread_networkMask_V_out_din();
    void thread_networkMask_V_out_write();
    void thread_networkMask_V_read();
    void thread_p_Result_1_fu_413_p14();
    void thread_p_Result_s_fu_470_p9();
    void thread_select_ln136_fu_462_p3();
    void thread_tmp_4_nbreadreq_fu_150_p3();
    void thread_tmp_nbreadreq_fu_142_p3();
    void thread_trunc_ln321_fu_249_p1();
    void thread_xor_ln879_fu_444_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
