// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _arp_table_HH_
#define _arp_table_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct arp_table : public sc_module {
    // Port declarations 42
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > myIpAddress_V_dout;
    sc_in< sc_logic > myIpAddress_V_empty_n;
    sc_out< sc_logic > myIpAddress_V_read;
    sc_in< sc_lv<32> > gatewayIP_V_dout;
    sc_in< sc_logic > gatewayIP_V_empty_n;
    sc_out< sc_logic > gatewayIP_V_read;
    sc_in< sc_lv<32> > networkMask_V_dout;
    sc_in< sc_logic > networkMask_V_empty_n;
    sc_out< sc_logic > networkMask_V_read;
    sc_in< sc_lv<32> > macIpEncode_i_V_V_dout;
    sc_in< sc_logic > macIpEncode_i_V_V_empty_n;
    sc_out< sc_logic > macIpEncode_i_V_V_read;
    sc_in< sc_lv<81> > arpTableInsertFifo_V_dout;
    sc_in< sc_logic > arpTableInsertFifo_V_empty_n;
    sc_out< sc_logic > arpTableInsertFifo_V_read;
    sc_out< sc_lv<49> > macIpEncode_rsp_i_V_din;
    sc_in< sc_logic > macIpEncode_rsp_i_V_full_n;
    sc_out< sc_logic > macIpEncode_rsp_i_V_write;
    sc_out< sc_lv<32> > arpRequestFifo_V_V_din;
    sc_in< sc_logic > arpRequestFifo_V_V_full_n;
    sc_out< sc_logic > arpRequestFifo_V_V_write;
    sc_out< sc_lv<8> > arpTable_macAddress_V_address0;
    sc_out< sc_logic > arpTable_macAddress_V_ce0;
    sc_out< sc_logic > arpTable_macAddress_V_we0;
    sc_out< sc_lv<48> > arpTable_macAddress_V_d0;
    sc_in< sc_lv<48> > arpTable_macAddress_V_q0;
    sc_out< sc_lv<8> > arpTable_ipAddress_V_address0;
    sc_out< sc_logic > arpTable_ipAddress_V_ce0;
    sc_out< sc_logic > arpTable_ipAddress_V_we0;
    sc_out< sc_lv<32> > arpTable_ipAddress_V_d0;
    sc_out< sc_lv<8> > arpTable_valid_V_address0;
    sc_out< sc_logic > arpTable_valid_V_ce0;
    sc_out< sc_logic > arpTable_valid_V_we0;
    sc_out< sc_lv<1> > arpTable_valid_V_d0;
    sc_in< sc_lv<1> > arpTable_valid_V_q0;


    // Module declarations
    arp_table(sc_module_name name);
    SC_HAS_PROCESS(arp_table);

    ~arp_table();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_100_p3;
    sc_signal< sc_lv<1> > tmp_3_nbreadreq_fu_108_p3;
    sc_signal< bool > ap_predicate_op11_read_state1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > tmp_reg_298;
    sc_signal< sc_lv<1> > tmp_3_reg_302;
    sc_signal< bool > ap_predicate_op37_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< sc_lv<1> > tmp_reg_298_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_3_reg_302_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_hit_reg_331;
    sc_signal< bool > ap_predicate_op53_write_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > myIpAddress_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > gatewayIP_V_blk_n;
    sc_signal< sc_logic > networkMask_V_blk_n;
    sc_signal< sc_logic > arpTableInsertFifo_V_blk_n;
    sc_signal< sc_logic > macIpEncode_i_V_V_blk_n;
    sc_signal< sc_logic > arpRequestFifo_V_V_blk_n;
    sc_signal< sc_logic > macIpEncode_rsp_i_V_blk_n;
    sc_signal< sc_lv<32> > tmp_V_reg_306;
    sc_signal< sc_lv<32> > tmp_V_reg_306_pp0_iter1_reg;
    sc_signal< sc_lv<32> > p_Val2_s_reg_321;
    sc_signal< sc_lv<32> > p_Val2_s_reg_321_pp0_iter1_reg;
    sc_signal< sc_lv<64> > zext_ln681_fu_283_p1;
    sc_signal< sc_lv<64> > zext_ln681_reg_326;
    sc_signal< sc_lv<64> > zext_ln681_reg_326_pp0_iter1_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln681_1_fu_243_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > xor_ln879_fu_197_p2;
    sc_signal< sc_lv<32> > and_ln879_fu_203_p2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_209_p2;
    sc_signal< sc_lv<8> > tmp_4_fu_215_p4;
    sc_signal< sc_lv<8> > tmp_5_fu_225_p4;
    sc_signal< sc_lv<8> > select_ln232_fu_235_p3;
    sc_signal< sc_lv<8> > p_Result_i_i_fu_273_p4;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< bool > ap_block_pp0;
    sc_signal< bool > ap_enable_operation_30;
    sc_signal< bool > ap_enable_state1_pp0_iter0_stage0;
    sc_signal< bool > ap_predicate_op20_load_state1;
    sc_signal< bool > ap_enable_operation_20;
    sc_signal< bool > ap_predicate_op33_load_state2;
    sc_signal< bool > ap_enable_operation_33;
    sc_signal< bool > ap_enable_state2_pp0_iter1_stage0;
    sc_signal< bool > ap_enable_operation_32;
    sc_signal< bool > ap_predicate_op22_load_state1;
    sc_signal< bool > ap_enable_operation_22;
    sc_signal< bool > ap_predicate_op34_load_state2;
    sc_signal< bool > ap_enable_operation_34;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_150;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_lv<32> ap_const_lv32_50;
    static const sc_lv<32> ap_const_lv32_48;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln879_fu_203_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_150();
    void thread_ap_done();
    void thread_ap_enable_operation_20();
    void thread_ap_enable_operation_22();
    void thread_ap_enable_operation_30();
    void thread_ap_enable_operation_32();
    void thread_ap_enable_operation_33();
    void thread_ap_enable_operation_34();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_enable_state1_pp0_iter0_stage0();
    void thread_ap_enable_state2_pp0_iter1_stage0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_predicate_op11_read_state1();
    void thread_ap_predicate_op20_load_state1();
    void thread_ap_predicate_op22_load_state1();
    void thread_ap_predicate_op33_load_state2();
    void thread_ap_predicate_op34_load_state2();
    void thread_ap_predicate_op37_write_state2();
    void thread_ap_predicate_op53_write_state3();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_arpRequestFifo_V_V_blk_n();
    void thread_arpRequestFifo_V_V_din();
    void thread_arpRequestFifo_V_V_write();
    void thread_arpTableInsertFifo_V_blk_n();
    void thread_arpTableInsertFifo_V_read();
    void thread_arpTable_ipAddress_V_address0();
    void thread_arpTable_ipAddress_V_ce0();
    void thread_arpTable_ipAddress_V_d0();
    void thread_arpTable_ipAddress_V_we0();
    void thread_arpTable_macAddress_V_address0();
    void thread_arpTable_macAddress_V_ce0();
    void thread_arpTable_macAddress_V_d0();
    void thread_arpTable_macAddress_V_we0();
    void thread_arpTable_valid_V_address0();
    void thread_arpTable_valid_V_ce0();
    void thread_arpTable_valid_V_d0();
    void thread_arpTable_valid_V_we0();
    void thread_gatewayIP_V_blk_n();
    void thread_gatewayIP_V_read();
    void thread_icmp_ln879_fu_209_p2();
    void thread_macIpEncode_i_V_V_blk_n();
    void thread_macIpEncode_i_V_V_read();
    void thread_macIpEncode_rsp_i_V_blk_n();
    void thread_macIpEncode_rsp_i_V_din();
    void thread_macIpEncode_rsp_i_V_write();
    void thread_myIpAddress_V_blk_n();
    void thread_myIpAddress_V_read();
    void thread_networkMask_V_blk_n();
    void thread_networkMask_V_read();
    void thread_p_Result_i_i_fu_273_p4();
    void thread_select_ln232_fu_235_p3();
    void thread_tmp_3_nbreadreq_fu_108_p3();
    void thread_tmp_4_fu_215_p4();
    void thread_tmp_5_fu_225_p4();
    void thread_tmp_nbreadreq_fu_100_p3();
    void thread_xor_ln879_fu_197_p2();
    void thread_zext_ln681_1_fu_243_p1();
    void thread_zext_ln681_fu_283_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
