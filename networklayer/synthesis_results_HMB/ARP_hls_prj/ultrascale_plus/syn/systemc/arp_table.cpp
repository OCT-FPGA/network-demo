// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "arp_table.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic arp_table::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic arp_table::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> arp_table::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> arp_table::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool arp_table::ap_const_boolean_1 = true;
const sc_lv<1> arp_table::ap_const_lv1_0 = "0";
const sc_lv<1> arp_table::ap_const_lv1_1 = "1";
const bool arp_table::ap_const_boolean_0 = false;
const sc_lv<32> arp_table::ap_const_lv32_18 = "11000";
const sc_lv<32> arp_table::ap_const_lv32_1F = "11111";
const sc_lv<32> arp_table::ap_const_lv32_30 = "110000";
const sc_lv<32> arp_table::ap_const_lv32_4F = "1001111";
const sc_lv<32> arp_table::ap_const_lv32_50 = "1010000";
const sc_lv<32> arp_table::ap_const_lv32_48 = "1001000";

arp_table::arp_table(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln879_fu_203_p2);
    sensitive << ( networkMask_V_dout );
    sensitive << ( xor_ln879_fu_197_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( arpTableInsertFifo_V_empty_n );
    sensitive << ( macIpEncode_rsp_i_V_full_n );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( arpRequestFifo_V_V_full_n );
    sensitive << ( ap_predicate_op53_write_state3 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( arpTableInsertFifo_V_empty_n );
    sensitive << ( macIpEncode_rsp_i_V_full_n );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( arpRequestFifo_V_V_full_n );
    sensitive << ( ap_predicate_op53_write_state3 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( arpTableInsertFifo_V_empty_n );
    sensitive << ( macIpEncode_rsp_i_V_full_n );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( arpRequestFifo_V_V_full_n );
    sensitive << ( ap_predicate_op53_write_state3 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( macIpEncode_i_V_V_empty_n );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( arpTableInsertFifo_V_empty_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( macIpEncode_rsp_i_V_full_n );
    sensitive << ( ap_predicate_op37_write_state2 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( arpRequestFifo_V_V_full_n );
    sensitive << ( ap_predicate_op53_write_state3 );

    SC_METHOD(thread_ap_condition_150);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_operation_20);
    sensitive << ( ap_predicate_op20_load_state1 );

    SC_METHOD(thread_ap_enable_operation_22);
    sensitive << ( ap_predicate_op22_load_state1 );

    SC_METHOD(thread_ap_enable_operation_30);
    sensitive << ( tmp_nbreadreq_fu_100_p3 );

    SC_METHOD(thread_ap_enable_operation_32);
    sensitive << ( tmp_nbreadreq_fu_100_p3 );

    SC_METHOD(thread_ap_enable_operation_33);
    sensitive << ( ap_predicate_op33_load_state2 );

    SC_METHOD(thread_ap_enable_operation_34);
    sensitive << ( ap_predicate_op34_load_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_enable_state1_pp0_iter0_stage0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );

    SC_METHOD(thread_ap_enable_state2_pp0_iter1_stage0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_predicate_op11_read_state1);
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );

    SC_METHOD(thread_ap_predicate_op20_load_state1);
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );

    SC_METHOD(thread_ap_predicate_op22_load_state1);
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );

    SC_METHOD(thread_ap_predicate_op33_load_state2);
    sensitive << ( tmp_reg_298 );
    sensitive << ( tmp_3_reg_302 );

    SC_METHOD(thread_ap_predicate_op34_load_state2);
    sensitive << ( tmp_reg_298 );
    sensitive << ( tmp_3_reg_302 );

    SC_METHOD(thread_ap_predicate_op37_write_state2);
    sensitive << ( tmp_reg_298 );
    sensitive << ( tmp_3_reg_302 );

    SC_METHOD(thread_ap_predicate_op53_write_state3);
    sensitive << ( tmp_reg_298_pp0_iter1_reg );
    sensitive << ( tmp_3_reg_302_pp0_iter1_reg );
    sensitive << ( tmp_hit_reg_331 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to1 );

    SC_METHOD(thread_arpRequestFifo_V_V_blk_n);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( arpRequestFifo_V_V_full_n );
    sensitive << ( ap_predicate_op53_write_state3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpRequestFifo_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op53_write_state3 );
    sensitive << ( tmp_V_reg_306_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_arpRequestFifo_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_predicate_op53_write_state3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTableInsertFifo_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( arpTableInsertFifo_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpTableInsertFifo_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTable_ipAddress_V_address0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln681_reg_326_pp0_iter1_reg );

    SC_METHOD(thread_arpTable_ipAddress_V_ce0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTable_ipAddress_V_d0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( p_Val2_s_reg_321_pp0_iter1_reg );

    SC_METHOD(thread_arpTable_ipAddress_V_we0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_reg_298_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTable_macAddress_V_address0);
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );
    sensitive << ( zext_ln681_fu_283_p1 );
    sensitive << ( zext_ln681_1_fu_243_p1 );
    sensitive << ( ap_condition_150 );

    SC_METHOD(thread_arpTable_macAddress_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTable_macAddress_V_d0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( arpTableInsertFifo_V_dout );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpTable_macAddress_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTable_valid_V_address0);
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );
    sensitive << ( zext_ln681_fu_283_p1 );
    sensitive << ( zext_ln681_1_fu_243_p1 );
    sensitive << ( ap_condition_150 );

    SC_METHOD(thread_arpTable_valid_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTable_valid_V_d0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( arpTableInsertFifo_V_dout );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpTable_valid_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gatewayIP_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( gatewayIP_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_gatewayIP_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln879_fu_209_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_100_p3 );
    sensitive << ( tmp_3_nbreadreq_fu_108_p3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( and_ln879_fu_203_p2 );

    SC_METHOD(thread_macIpEncode_i_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( macIpEncode_i_V_V_empty_n );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_macIpEncode_i_V_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op11_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_macIpEncode_rsp_i_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( macIpEncode_rsp_i_V_full_n );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_macIpEncode_rsp_i_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( arpTable_macAddress_V_q0 );
    sensitive << ( arpTable_valid_V_q0 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_macIpEncode_rsp_i_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op37_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_myIpAddress_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_myIpAddress_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_networkMask_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( networkMask_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_networkMask_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_i_i_fu_273_p4);
    sensitive << ( arpTableInsertFifo_V_dout );

    SC_METHOD(thread_select_ln232_fu_235_p3);
    sensitive << ( icmp_ln879_fu_209_p2 );
    sensitive << ( tmp_4_fu_215_p4 );
    sensitive << ( tmp_5_fu_225_p4 );

    SC_METHOD(thread_tmp_3_nbreadreq_fu_108_p3);
    sensitive << ( macIpEncode_i_V_V_empty_n );

    SC_METHOD(thread_tmp_4_fu_215_p4);
    sensitive << ( macIpEncode_i_V_V_dout );

    SC_METHOD(thread_tmp_5_fu_225_p4);
    sensitive << ( gatewayIP_V_dout );

    SC_METHOD(thread_tmp_nbreadreq_fu_100_p3);
    sensitive << ( arpTableInsertFifo_V_empty_n );

    SC_METHOD(thread_xor_ln879_fu_197_p2);
    sensitive << ( myIpAddress_V_dout );
    sensitive << ( macIpEncode_i_V_V_dout );

    SC_METHOD(thread_zext_ln681_1_fu_243_p1);
    sensitive << ( select_ln232_fu_235_p3 );

    SC_METHOD(thread_zext_ln681_fu_283_p1);
    sensitive << ( p_Result_i_i_fu_273_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "arp_table_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, myIpAddress_V_dout, "(port)myIpAddress_V_dout");
    sc_trace(mVcdFile, myIpAddress_V_empty_n, "(port)myIpAddress_V_empty_n");
    sc_trace(mVcdFile, myIpAddress_V_read, "(port)myIpAddress_V_read");
    sc_trace(mVcdFile, gatewayIP_V_dout, "(port)gatewayIP_V_dout");
    sc_trace(mVcdFile, gatewayIP_V_empty_n, "(port)gatewayIP_V_empty_n");
    sc_trace(mVcdFile, gatewayIP_V_read, "(port)gatewayIP_V_read");
    sc_trace(mVcdFile, networkMask_V_dout, "(port)networkMask_V_dout");
    sc_trace(mVcdFile, networkMask_V_empty_n, "(port)networkMask_V_empty_n");
    sc_trace(mVcdFile, networkMask_V_read, "(port)networkMask_V_read");
    sc_trace(mVcdFile, macIpEncode_i_V_V_dout, "(port)macIpEncode_i_V_V_dout");
    sc_trace(mVcdFile, macIpEncode_i_V_V_empty_n, "(port)macIpEncode_i_V_V_empty_n");
    sc_trace(mVcdFile, macIpEncode_i_V_V_read, "(port)macIpEncode_i_V_V_read");
    sc_trace(mVcdFile, arpTableInsertFifo_V_dout, "(port)arpTableInsertFifo_V_dout");
    sc_trace(mVcdFile, arpTableInsertFifo_V_empty_n, "(port)arpTableInsertFifo_V_empty_n");
    sc_trace(mVcdFile, arpTableInsertFifo_V_read, "(port)arpTableInsertFifo_V_read");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_din, "(port)macIpEncode_rsp_i_V_din");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_full_n, "(port)macIpEncode_rsp_i_V_full_n");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_write, "(port)macIpEncode_rsp_i_V_write");
    sc_trace(mVcdFile, arpRequestFifo_V_V_din, "(port)arpRequestFifo_V_V_din");
    sc_trace(mVcdFile, arpRequestFifo_V_V_full_n, "(port)arpRequestFifo_V_V_full_n");
    sc_trace(mVcdFile, arpRequestFifo_V_V_write, "(port)arpRequestFifo_V_V_write");
    sc_trace(mVcdFile, arpTable_macAddress_V_address0, "(port)arpTable_macAddress_V_address0");
    sc_trace(mVcdFile, arpTable_macAddress_V_ce0, "(port)arpTable_macAddress_V_ce0");
    sc_trace(mVcdFile, arpTable_macAddress_V_we0, "(port)arpTable_macAddress_V_we0");
    sc_trace(mVcdFile, arpTable_macAddress_V_d0, "(port)arpTable_macAddress_V_d0");
    sc_trace(mVcdFile, arpTable_macAddress_V_q0, "(port)arpTable_macAddress_V_q0");
    sc_trace(mVcdFile, arpTable_ipAddress_V_address0, "(port)arpTable_ipAddress_V_address0");
    sc_trace(mVcdFile, arpTable_ipAddress_V_ce0, "(port)arpTable_ipAddress_V_ce0");
    sc_trace(mVcdFile, arpTable_ipAddress_V_we0, "(port)arpTable_ipAddress_V_we0");
    sc_trace(mVcdFile, arpTable_ipAddress_V_d0, "(port)arpTable_ipAddress_V_d0");
    sc_trace(mVcdFile, arpTable_valid_V_address0, "(port)arpTable_valid_V_address0");
    sc_trace(mVcdFile, arpTable_valid_V_ce0, "(port)arpTable_valid_V_ce0");
    sc_trace(mVcdFile, arpTable_valid_V_we0, "(port)arpTable_valid_V_we0");
    sc_trace(mVcdFile, arpTable_valid_V_d0, "(port)arpTable_valid_V_d0");
    sc_trace(mVcdFile, arpTable_valid_V_q0, "(port)arpTable_valid_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_100_p3, "tmp_nbreadreq_fu_100_p3");
    sc_trace(mVcdFile, tmp_3_nbreadreq_fu_108_p3, "tmp_3_nbreadreq_fu_108_p3");
    sc_trace(mVcdFile, ap_predicate_op11_read_state1, "ap_predicate_op11_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, tmp_reg_298, "tmp_reg_298");
    sc_trace(mVcdFile, tmp_3_reg_302, "tmp_3_reg_302");
    sc_trace(mVcdFile, ap_predicate_op37_write_state2, "ap_predicate_op37_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, tmp_reg_298_pp0_iter1_reg, "tmp_reg_298_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_3_reg_302_pp0_iter1_reg, "tmp_3_reg_302_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_hit_reg_331, "tmp_hit_reg_331");
    sc_trace(mVcdFile, ap_predicate_op53_write_state3, "ap_predicate_op53_write_state3");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, myIpAddress_V_blk_n, "myIpAddress_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, gatewayIP_V_blk_n, "gatewayIP_V_blk_n");
    sc_trace(mVcdFile, networkMask_V_blk_n, "networkMask_V_blk_n");
    sc_trace(mVcdFile, arpTableInsertFifo_V_blk_n, "arpTableInsertFifo_V_blk_n");
    sc_trace(mVcdFile, macIpEncode_i_V_V_blk_n, "macIpEncode_i_V_V_blk_n");
    sc_trace(mVcdFile, arpRequestFifo_V_V_blk_n, "arpRequestFifo_V_V_blk_n");
    sc_trace(mVcdFile, macIpEncode_rsp_i_V_blk_n, "macIpEncode_rsp_i_V_blk_n");
    sc_trace(mVcdFile, tmp_V_reg_306, "tmp_V_reg_306");
    sc_trace(mVcdFile, tmp_V_reg_306_pp0_iter1_reg, "tmp_V_reg_306_pp0_iter1_reg");
    sc_trace(mVcdFile, p_Val2_s_reg_321, "p_Val2_s_reg_321");
    sc_trace(mVcdFile, p_Val2_s_reg_321_pp0_iter1_reg, "p_Val2_s_reg_321_pp0_iter1_reg");
    sc_trace(mVcdFile, zext_ln681_fu_283_p1, "zext_ln681_fu_283_p1");
    sc_trace(mVcdFile, zext_ln681_reg_326, "zext_ln681_reg_326");
    sc_trace(mVcdFile, zext_ln681_reg_326_pp0_iter1_reg, "zext_ln681_reg_326_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, zext_ln681_1_fu_243_p1, "zext_ln681_1_fu_243_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, xor_ln879_fu_197_p2, "xor_ln879_fu_197_p2");
    sc_trace(mVcdFile, and_ln879_fu_203_p2, "and_ln879_fu_203_p2");
    sc_trace(mVcdFile, icmp_ln879_fu_209_p2, "icmp_ln879_fu_209_p2");
    sc_trace(mVcdFile, tmp_4_fu_215_p4, "tmp_4_fu_215_p4");
    sc_trace(mVcdFile, tmp_5_fu_225_p4, "tmp_5_fu_225_p4");
    sc_trace(mVcdFile, select_ln232_fu_235_p3, "select_ln232_fu_235_p3");
    sc_trace(mVcdFile, p_Result_i_i_fu_273_p4, "p_Result_i_i_fu_273_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to1, "ap_idle_pp0_0to1");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_block_pp0, "ap_block_pp0");
    sc_trace(mVcdFile, ap_enable_operation_30, "ap_enable_operation_30");
    sc_trace(mVcdFile, ap_enable_state1_pp0_iter0_stage0, "ap_enable_state1_pp0_iter0_stage0");
    sc_trace(mVcdFile, ap_predicate_op20_load_state1, "ap_predicate_op20_load_state1");
    sc_trace(mVcdFile, ap_enable_operation_20, "ap_enable_operation_20");
    sc_trace(mVcdFile, ap_predicate_op33_load_state2, "ap_predicate_op33_load_state2");
    sc_trace(mVcdFile, ap_enable_operation_33, "ap_enable_operation_33");
    sc_trace(mVcdFile, ap_enable_state2_pp0_iter1_stage0, "ap_enable_state2_pp0_iter1_stage0");
    sc_trace(mVcdFile, ap_enable_operation_32, "ap_enable_operation_32");
    sc_trace(mVcdFile, ap_predicate_op22_load_state1, "ap_predicate_op22_load_state1");
    sc_trace(mVcdFile, ap_enable_operation_22, "ap_enable_operation_22");
    sc_trace(mVcdFile, ap_predicate_op34_load_state2, "ap_predicate_op34_load_state2");
    sc_trace(mVcdFile, ap_enable_operation_34, "ap_enable_operation_34");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_150, "ap_condition_150");
#endif

    }
}

arp_table::~arp_table() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void arp_table::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_Val2_s_reg_321 = arpTableInsertFifo_V_dout.read().range(79, 48);
        zext_ln681_reg_326 = zext_ln681_fu_283_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_Val2_s_reg_321_pp0_iter1_reg = p_Val2_s_reg_321.read();
        tmp_3_reg_302_pp0_iter1_reg = tmp_3_reg_302.read();
        tmp_V_reg_306_pp0_iter1_reg = tmp_V_reg_306.read();
        tmp_reg_298 = tmp_nbreadreq_fu_100_p3.read();
        tmp_reg_298_pp0_iter1_reg = tmp_reg_298.read();
        zext_ln681_reg_326_pp0_iter1_reg = zext_ln681_reg_326.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_3_reg_302 = tmp_3_nbreadreq_fu_108_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_reg_306 = macIpEncode_i_V_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_298.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_302.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_hit_reg_331 = arpTable_valid_V_q0.read();
    }
}

void arp_table::thread_and_ln879_fu_203_p2() {
    and_ln879_fu_203_p2 = (networkMask_V_dout.read() & xor_ln879_fu_197_p2.read());
}

void arp_table::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void arp_table::thread_ap_block_pp0() {
    ap_block_pp0 = (esl_seteq<1,1,1>(ap_ST_fsm_pp0_stage0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_pp0_stage0_subdone.read()));
}

void arp_table::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void arp_table::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void arp_table::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void arp_table::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_empty_n.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())));
}

void arp_table::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, gatewayIP_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, networkMask_V_empty_n.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_i_V_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_empty_n.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void arp_table::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, macIpEncode_rsp_i_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()));
}

void arp_table::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, arpRequestFifo_V_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()));
}

void arp_table::thread_ap_condition_150() {
    ap_condition_150 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0));
}

void arp_table::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void arp_table::thread_ap_enable_operation_20() {
    ap_enable_operation_20 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op20_load_state1.read());
}

void arp_table::thread_ap_enable_operation_22() {
    ap_enable_operation_22 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op22_load_state1.read());
}

void arp_table::thread_ap_enable_operation_30() {
    ap_enable_operation_30 = esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1);
}

void arp_table::thread_ap_enable_operation_32() {
    ap_enable_operation_32 = esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1);
}

void arp_table::thread_ap_enable_operation_33() {
    ap_enable_operation_33 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op33_load_state2.read());
}

void arp_table::thread_ap_enable_operation_34() {
    ap_enable_operation_34 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_load_state2.read());
}

void arp_table::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void arp_table::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void arp_table::thread_ap_enable_state1_pp0_iter0_stage0() {
    ap_enable_state1_pp0_iter0_stage0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1));
}

void arp_table::thread_ap_enable_state2_pp0_iter1_stage0() {
    ap_enable_state2_pp0_iter1_stage0 = (esl_seteq<1,1,1>(ap_CS_fsm_pp0_stage0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1));
}

void arp_table::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void arp_table::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void arp_table::thread_ap_idle_pp0_0to1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0_0to1 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to1 = ap_const_logic_0;
    }
}

void arp_table::thread_ap_predicate_op11_read_state1() {
    ap_predicate_op11_read_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_108_p3.read(), ap_const_lv1_1));
}

void arp_table::thread_ap_predicate_op20_load_state1() {
    ap_predicate_op20_load_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_108_p3.read(), ap_const_lv1_1));
}

void arp_table::thread_ap_predicate_op22_load_state1() {
    ap_predicate_op22_load_state1 = (esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_108_p3.read(), ap_const_lv1_1));
}

void arp_table::thread_ap_predicate_op33_load_state2() {
    ap_predicate_op33_load_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_298.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_302.read()));
}

void arp_table::thread_ap_predicate_op34_load_state2() {
    ap_predicate_op34_load_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_298.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_302.read()));
}

void arp_table::thread_ap_predicate_op37_write_state2() {
    ap_predicate_op37_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_298.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_302.read()));
}

void arp_table::thread_ap_predicate_op53_write_state3() {
    ap_predicate_op53_write_state3 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_298_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_302_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_hit_reg_331.read()));
}

void arp_table::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void arp_table::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to1.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void arp_table::thread_arpRequestFifo_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        arpRequestFifo_V_V_blk_n = arpRequestFifo_V_V_full_n.read();
    } else {
        arpRequestFifo_V_V_blk_n = ap_const_logic_1;
    }
}

void arp_table::thread_arpRequestFifo_V_V_din() {
    arpRequestFifo_V_V_din = tmp_V_reg_306_pp0_iter1_reg.read();
}

void arp_table::thread_arpRequestFifo_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpRequestFifo_V_V_write = ap_const_logic_1;
    } else {
        arpRequestFifo_V_V_write = ap_const_logic_0;
    }
}

void arp_table::thread_arpTableInsertFifo_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        arpTableInsertFifo_V_blk_n = arpTableInsertFifo_V_empty_n.read();
    } else {
        arpTableInsertFifo_V_blk_n = ap_const_logic_1;
    }
}

void arp_table::thread_arpTableInsertFifo_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpTableInsertFifo_V_read = ap_const_logic_1;
    } else {
        arpTableInsertFifo_V_read = ap_const_logic_0;
    }
}

void arp_table::thread_arpTable_ipAddress_V_address0() {
    arpTable_ipAddress_V_address0 =  (sc_lv<8>) (zext_ln681_reg_326_pp0_iter1_reg.read());
}

void arp_table::thread_arpTable_ipAddress_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpTable_ipAddress_V_ce0 = ap_const_logic_1;
    } else {
        arpTable_ipAddress_V_ce0 = ap_const_logic_0;
    }
}

void arp_table::thread_arpTable_ipAddress_V_d0() {
    arpTable_ipAddress_V_d0 = p_Val2_s_reg_321_pp0_iter1_reg.read();
}

void arp_table::thread_arpTable_ipAddress_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_298_pp0_iter1_reg.read()))) {
        arpTable_ipAddress_V_we0 = ap_const_logic_1;
    } else {
        arpTable_ipAddress_V_we0 = ap_const_logic_0;
    }
}

void arp_table::thread_arpTable_macAddress_V_address0() {
    if (esl_seteq<1,1,1>(ap_condition_150.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1)) {
            arpTable_macAddress_V_address0 =  (sc_lv<8>) (zext_ln681_fu_283_p1.read());
        } else if ((esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_108_p3.read(), ap_const_lv1_1))) {
            arpTable_macAddress_V_address0 =  (sc_lv<8>) (zext_ln681_1_fu_243_p1.read());
        } else {
            arpTable_macAddress_V_address0 = "XXXXXXXX";
        }
    } else {
        arpTable_macAddress_V_address0 = "XXXXXXXX";
    }
}

void arp_table::thread_arpTable_macAddress_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_108_p3.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        arpTable_macAddress_V_ce0 = ap_const_logic_1;
    } else {
        arpTable_macAddress_V_ce0 = ap_const_logic_0;
    }
}

void arp_table::thread_arpTable_macAddress_V_d0() {
    arpTable_macAddress_V_d0 = arpTableInsertFifo_V_dout.read().range(48-1, 0);
}

void arp_table::thread_arpTable_macAddress_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpTable_macAddress_V_we0 = ap_const_logic_1;
    } else {
        arpTable_macAddress_V_we0 = ap_const_logic_0;
    }
}

void arp_table::thread_arpTable_valid_V_address0() {
    if (esl_seteq<1,1,1>(ap_condition_150.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1)) {
            arpTable_valid_V_address0 =  (sc_lv<8>) (zext_ln681_fu_283_p1.read());
        } else if ((esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_108_p3.read(), ap_const_lv1_1))) {
            arpTable_valid_V_address0 =  (sc_lv<8>) (zext_ln681_1_fu_243_p1.read());
        } else {
            arpTable_valid_V_address0 = "XXXXXXXX";
        }
    } else {
        arpTable_valid_V_address0 = "XXXXXXXX";
    }
}

void arp_table::thread_arpTable_valid_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_108_p3.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        arpTable_valid_V_ce0 = ap_const_logic_1;
    } else {
        arpTable_valid_V_ce0 = ap_const_logic_0;
    }
}

void arp_table::thread_arpTable_valid_V_d0() {
    arpTable_valid_V_d0 = arpTableInsertFifo_V_dout.read().range(80, 80);
}

void arp_table::thread_arpTable_valid_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_100_p3.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpTable_valid_V_we0 = ap_const_logic_1;
    } else {
        arpTable_valid_V_we0 = ap_const_logic_0;
    }
}

void arp_table::thread_gatewayIP_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        gatewayIP_V_blk_n = gatewayIP_V_empty_n.read();
    } else {
        gatewayIP_V_blk_n = ap_const_logic_1;
    }
}

void arp_table::thread_gatewayIP_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gatewayIP_V_read = ap_const_logic_1;
    } else {
        gatewayIP_V_read = ap_const_logic_0;
    }
}

void arp_table::thread_icmp_ln879_fu_209_p2() {
    icmp_ln879_fu_209_p2 = (!and_ln879_fu_203_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(and_ln879_fu_203_p2.read() == ap_const_lv32_0);
}

void arp_table::thread_macIpEncode_i_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        macIpEncode_i_V_V_blk_n = macIpEncode_i_V_V_empty_n.read();
    } else {
        macIpEncode_i_V_V_blk_n = ap_const_logic_1;
    }
}

void arp_table::thread_macIpEncode_i_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op11_read_state1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        macIpEncode_i_V_V_read = ap_const_logic_1;
    } else {
        macIpEncode_i_V_V_read = ap_const_logic_0;
    }
}

void arp_table::thread_macIpEncode_rsp_i_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        macIpEncode_rsp_i_V_blk_n = macIpEncode_rsp_i_V_full_n.read();
    } else {
        macIpEncode_rsp_i_V_blk_n = ap_const_logic_1;
    }
}

void arp_table::thread_macIpEncode_rsp_i_V_din() {
    macIpEncode_rsp_i_V_din = esl_concat<1,48>(arpTable_valid_V_q0.read(), arpTable_macAddress_V_q0.read());
}

void arp_table::thread_macIpEncode_rsp_i_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        macIpEncode_rsp_i_V_write = ap_const_logic_1;
    } else {
        macIpEncode_rsp_i_V_write = ap_const_logic_0;
    }
}

void arp_table::thread_myIpAddress_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        myIpAddress_V_blk_n = myIpAddress_V_empty_n.read();
    } else {
        myIpAddress_V_blk_n = ap_const_logic_1;
    }
}

void arp_table::thread_myIpAddress_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        myIpAddress_V_read = ap_const_logic_1;
    } else {
        myIpAddress_V_read = ap_const_logic_0;
    }
}

void arp_table::thread_networkMask_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        networkMask_V_blk_n = networkMask_V_empty_n.read();
    } else {
        networkMask_V_blk_n = ap_const_logic_1;
    }
}

void arp_table::thread_networkMask_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        networkMask_V_read = ap_const_logic_1;
    } else {
        networkMask_V_read = ap_const_logic_0;
    }
}

void arp_table::thread_p_Result_i_i_fu_273_p4() {
    p_Result_i_i_fu_273_p4 = arpTableInsertFifo_V_dout.read().range(79, 72);
}

void arp_table::thread_select_ln232_fu_235_p3() {
    select_ln232_fu_235_p3 = (!icmp_ln879_fu_209_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln879_fu_209_p2.read()[0].to_bool())? tmp_4_fu_215_p4.read(): tmp_5_fu_225_p4.read());
}

void arp_table::thread_tmp_3_nbreadreq_fu_108_p3() {
    tmp_3_nbreadreq_fu_108_p3 =  (sc_lv<1>) ((macIpEncode_i_V_V_empty_n.read()));
}

void arp_table::thread_tmp_4_fu_215_p4() {
    tmp_4_fu_215_p4 = macIpEncode_i_V_V_dout.read().range(31, 24);
}

void arp_table::thread_tmp_5_fu_225_p4() {
    tmp_5_fu_225_p4 = gatewayIP_V_dout.read().range(31, 24);
}

void arp_table::thread_tmp_nbreadreq_fu_100_p3() {
    tmp_nbreadreq_fu_100_p3 =  (sc_lv<1>) ((arpTableInsertFifo_V_empty_n.read()));
}

void arp_table::thread_xor_ln879_fu_197_p2() {
    xor_ln879_fu_197_p2 = (myIpAddress_V_dout.read() ^ macIpEncode_i_V_V_dout.read());
}

void arp_table::thread_zext_ln681_1_fu_243_p1() {
    zext_ln681_1_fu_243_p1 = esl_zext<64,8>(select_ln232_fu_235_p3.read());
}

void arp_table::thread_zext_ln681_fu_283_p1() {
    zext_ln681_fu_283_p1 = esl_zext<64,8>(p_Result_i_i_fu_273_p4.read());
}

void arp_table::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

