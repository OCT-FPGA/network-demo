// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "arp_pkg_receiver.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic arp_pkg_receiver::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic arp_pkg_receiver::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> arp_pkg_receiver::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool arp_pkg_receiver::ap_const_boolean_1 = true;
const sc_lv<1> arp_pkg_receiver::ap_const_lv1_1 = "1";
const sc_lv<1> arp_pkg_receiver::ap_const_lv1_0 = "0";
const bool arp_pkg_receiver::ap_const_boolean_0 = false;
const sc_lv<4> arp_pkg_receiver::ap_const_lv4_0 = "0000";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_B0 = "10110000";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_FF = "11111111";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_A0 = "10100000";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_AF = "10101111";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_130 = "100110000";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_14F = "101001111";
const sc_lv<16> arp_pkg_receiver::ap_const_lv16_100 = "100000000";
const sc_lv<16> arp_pkg_receiver::ap_const_lv16_200 = "1000000000";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_30 = "110000";
const sc_lv<32> arp_pkg_receiver::ap_const_lv32_9F = "10011111";
const sc_lv<4> arp_pkg_receiver::ap_const_lv4_1 = "1";

arp_pkg_receiver::arp_pkg_receiver(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_fu_230_p2);
    sensitive << ( wordCount_V );

    SC_METHOD(thread_and_ln74_fu_202_p2);
    sensitive << ( icmp_ln879_2_fu_190_p2 );
    sensitive << ( icmp_ln879_3_fu_196_p2 );

    SC_METHOD(thread_and_ln76_fu_214_p2);
    sensitive << ( icmp_ln879_3_fu_196_p2 );
    sensitive << ( icmp_ln879_4_fu_208_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( arpDataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( arpTableInsertFifo_V_full_n );
    sensitive << ( ap_predicate_op40_write_state2 );
    sensitive << ( arpReplyFifo_V_full_n );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( arpDataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( arpTableInsertFifo_V_full_n );
    sensitive << ( ap_predicate_op40_write_state2 );
    sensitive << ( arpReplyFifo_V_full_n );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( arpDataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( arpTableInsertFifo_V_full_n );
    sensitive << ( ap_predicate_op40_write_state2 );
    sensitive << ( arpReplyFifo_V_full_n );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( arpDataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( arpTableInsertFifo_V_full_n );
    sensitive << ( ap_predicate_op40_write_state2 );
    sensitive << ( arpReplyFifo_V_full_n );
    sensitive << ( ap_predicate_op44_write_state2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op40_write_state2);
    sensitive << ( tmp_reg_267 );
    sensitive << ( icmp_ln879_reg_271 );
    sensitive << ( and_ln74_reg_275 );
    sensitive << ( and_ln76_reg_279 );

    SC_METHOD(thread_ap_predicate_op44_write_state2);
    sensitive << ( tmp_reg_267 );
    sensitive << ( icmp_ln879_reg_271 );
    sensitive << ( and_ln74_reg_275 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_arpDataIn_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( arpDataIn_TVALID );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpDataIn_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpReplyFifo_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( arpReplyFifo_V_full_n );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpReplyFifo_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( reg_147 );
    sensitive << ( tmp_6_i_i_reg_283 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_arpReplyFifo_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op44_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_arpTableInsertFifo_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( arpTableInsertFifo_V_full_n );
    sensitive << ( ap_predicate_op40_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_arpTableInsertFifo_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op40_write_state2 );
    sensitive << ( reg_147 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_arpTableInsertFifo_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op40_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln879_2_fu_190_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln879_fu_164_p2 );
    sensitive << ( opCode_V_fu_170_p4 );

    SC_METHOD(thread_icmp_ln879_3_fu_196_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( myIpAddress_V_dout );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln879_fu_164_p2 );
    sensitive << ( protoAddrDst_V_fu_180_p4 );

    SC_METHOD(thread_icmp_ln879_4_fu_208_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln879_fu_164_p2 );
    sensitive << ( and_ln74_fu_202_p2 );
    sensitive << ( opCode_V_fu_170_p4 );

    SC_METHOD(thread_icmp_ln879_fu_164_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_nbreadreq_fu_102_p5 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( wordCount_V );

    SC_METHOD(thread_myIpAddress_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( myIpAddress_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_myIpAddress_V_out_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( myIpAddress_V_out_full_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_myIpAddress_V_out_din);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( myIpAddress_V_dout );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_myIpAddress_V_out_write);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_myIpAddress_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_opCode_V_fu_170_p4);
    sensitive << ( arpDataIn_TDATA );

    SC_METHOD(thread_protoAddrDst_V_fu_180_p4);
    sensitive << ( arpDataIn_TDATA );

    SC_METHOD(thread_select_ln80_fu_236_p3);
    sensitive << ( arpDataIn_TLAST );
    sensitive << ( add_ln700_fu_230_p2 );

    SC_METHOD(thread_tmp_nbreadreq_fu_102_p5);
    sensitive << ( arpDataIn_TVALID );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    wordCount_V = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "arp_pkg_receiver_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, myIpAddress_V_dout, "(port)myIpAddress_V_dout");
    sc_trace(mVcdFile, myIpAddress_V_empty_n, "(port)myIpAddress_V_empty_n");
    sc_trace(mVcdFile, myIpAddress_V_read, "(port)myIpAddress_V_read");
    sc_trace(mVcdFile, myIpAddress_V_out_din, "(port)myIpAddress_V_out_din");
    sc_trace(mVcdFile, myIpAddress_V_out_full_n, "(port)myIpAddress_V_out_full_n");
    sc_trace(mVcdFile, myIpAddress_V_out_write, "(port)myIpAddress_V_out_write");
    sc_trace(mVcdFile, arpDataIn_TVALID, "(port)arpDataIn_TVALID");
    sc_trace(mVcdFile, arpTableInsertFifo_V_din, "(port)arpTableInsertFifo_V_din");
    sc_trace(mVcdFile, arpTableInsertFifo_V_full_n, "(port)arpTableInsertFifo_V_full_n");
    sc_trace(mVcdFile, arpTableInsertFifo_V_write, "(port)arpTableInsertFifo_V_write");
    sc_trace(mVcdFile, arpReplyFifo_V_din, "(port)arpReplyFifo_V_din");
    sc_trace(mVcdFile, arpReplyFifo_V_full_n, "(port)arpReplyFifo_V_full_n");
    sc_trace(mVcdFile, arpReplyFifo_V_write, "(port)arpReplyFifo_V_write");
    sc_trace(mVcdFile, arpDataIn_TDATA, "(port)arpDataIn_TDATA");
    sc_trace(mVcdFile, arpDataIn_TREADY, "(port)arpDataIn_TREADY");
    sc_trace(mVcdFile, arpDataIn_TKEEP, "(port)arpDataIn_TKEEP");
    sc_trace(mVcdFile, arpDataIn_TLAST, "(port)arpDataIn_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, tmp_nbreadreq_fu_102_p5, "tmp_nbreadreq_fu_102_p5");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, tmp_reg_267, "tmp_reg_267");
    sc_trace(mVcdFile, icmp_ln879_reg_271, "icmp_ln879_reg_271");
    sc_trace(mVcdFile, and_ln74_reg_275, "and_ln74_reg_275");
    sc_trace(mVcdFile, and_ln76_reg_279, "and_ln76_reg_279");
    sc_trace(mVcdFile, ap_predicate_op40_write_state2, "ap_predicate_op40_write_state2");
    sc_trace(mVcdFile, ap_predicate_op44_write_state2, "ap_predicate_op44_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, wordCount_V, "wordCount_V");
    sc_trace(mVcdFile, arpDataIn_TDATA_blk_n, "arpDataIn_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, myIpAddress_V_blk_n, "myIpAddress_V_blk_n");
    sc_trace(mVcdFile, myIpAddress_V_out_blk_n, "myIpAddress_V_out_blk_n");
    sc_trace(mVcdFile, arpReplyFifo_V_blk_n, "arpReplyFifo_V_blk_n");
    sc_trace(mVcdFile, arpTableInsertFifo_V_blk_n, "arpTableInsertFifo_V_blk_n");
    sc_trace(mVcdFile, reg_147, "reg_147");
    sc_trace(mVcdFile, icmp_ln879_fu_164_p2, "icmp_ln879_fu_164_p2");
    sc_trace(mVcdFile, and_ln74_fu_202_p2, "and_ln74_fu_202_p2");
    sc_trace(mVcdFile, and_ln76_fu_214_p2, "and_ln76_fu_214_p2");
    sc_trace(mVcdFile, tmp_6_i_i_reg_283, "tmp_6_i_i_reg_283");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, select_ln80_fu_236_p3, "select_ln80_fu_236_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, opCode_V_fu_170_p4, "opCode_V_fu_170_p4");
    sc_trace(mVcdFile, protoAddrDst_V_fu_180_p4, "protoAddrDst_V_fu_180_p4");
    sc_trace(mVcdFile, icmp_ln879_2_fu_190_p2, "icmp_ln879_2_fu_190_p2");
    sc_trace(mVcdFile, icmp_ln879_3_fu_196_p2, "icmp_ln879_3_fu_196_p2");
    sc_trace(mVcdFile, icmp_ln879_4_fu_208_p2, "icmp_ln879_4_fu_208_p2");
    sc_trace(mVcdFile, add_ln700_fu_230_p2, "add_ln700_fu_230_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

arp_pkg_receiver::~arp_pkg_receiver() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void arp_pkg_receiver::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_164_p2.read()))) {
        and_ln74_reg_275 = and_ln74_fu_202_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_164_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln74_fu_202_p2.read()))) {
        and_ln76_reg_279 = and_ln76_fu_214_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln879_reg_271 = icmp_ln879_fu_164_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_164_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln74_fu_202_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, and_ln76_fu_214_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_164_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, and_ln74_fu_202_p2.read())))) {
        reg_147 = arpDataIn_TDATA.read().range(255, 176);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_164_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, and_ln74_fu_202_p2.read()))) {
        tmp_6_i_i_reg_283 = arpDataIn_TDATA.read().range(159, 48);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_267 = tmp_nbreadreq_fu_102_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        wordCount_V = select_ln80_fu_236_p3.read();
    }
}

void arp_pkg_receiver::thread_add_ln700_fu_230_p2() {
    add_ln700_fu_230_p2 = (!wordCount_V.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(wordCount_V.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void arp_pkg_receiver::thread_and_ln74_fu_202_p2() {
    and_ln74_fu_202_p2 = (icmp_ln879_2_fu_190_p2.read() & icmp_ln879_3_fu_196_p2.read());
}

void arp_pkg_receiver::thread_and_ln76_fu_214_p2() {
    and_ln76_fu_214_p2 = (icmp_ln879_4_fu_208_p2.read() & icmp_ln879_3_fu_196_p2.read());
}

void arp_pkg_receiver::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void arp_pkg_receiver::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void arp_pkg_receiver::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpDataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op40_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void arp_pkg_receiver::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpDataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op40_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void arp_pkg_receiver::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpDataIn_TVALID.read()) && 
    esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1)) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (((esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op40_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void arp_pkg_receiver::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, myIpAddress_V_out_full_n.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, arpDataIn_TVALID.read()) && 
  esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1)) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void arp_pkg_receiver::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_logic_0, arpTableInsertFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op40_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, arpReplyFifo_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read())));
}

void arp_pkg_receiver::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void arp_pkg_receiver::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void arp_pkg_receiver::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void arp_pkg_receiver::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_ap_predicate_op40_write_state2() {
    ap_predicate_op40_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_267.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_271.read()) && esl_seteq<1,1,1>(and_ln74_reg_275.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, and_ln76_reg_279.read()));
}

void arp_pkg_receiver::thread_ap_predicate_op44_write_state2() {
    ap_predicate_op44_write_state2 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_267.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_reg_271.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, and_ln74_reg_275.read()));
}

void arp_pkg_receiver::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_arpDataIn_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        arpDataIn_TDATA_blk_n = arpDataIn_TVALID.read();
    } else {
        arpDataIn_TDATA_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_receiver::thread_arpDataIn_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(tmp_nbreadreq_fu_102_p5.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpDataIn_TREADY = ap_const_logic_1;
    } else {
        arpDataIn_TREADY = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_arpReplyFifo_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        arpReplyFifo_V_blk_n = arpReplyFifo_V_full_n.read();
    } else {
        arpReplyFifo_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_receiver::thread_arpReplyFifo_V_din() {
    arpReplyFifo_V_din = esl_concat<80,112>(reg_147.read(), tmp_6_i_i_reg_283.read());
}

void arp_pkg_receiver::thread_arpReplyFifo_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op44_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpReplyFifo_V_write = ap_const_logic_1;
    } else {
        arpReplyFifo_V_write = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_arpTableInsertFifo_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op40_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        arpTableInsertFifo_V_blk_n = arpTableInsertFifo_V_full_n.read();
    } else {
        arpTableInsertFifo_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_receiver::thread_arpTableInsertFifo_V_din() {
    arpTableInsertFifo_V_din = esl_concat<1,80>(ap_const_lv1_1, reg_147.read());
}

void arp_pkg_receiver::thread_arpTableInsertFifo_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op40_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        arpTableInsertFifo_V_write = ap_const_logic_1;
    } else {
        arpTableInsertFifo_V_write = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_icmp_ln879_2_fu_190_p2() {
    icmp_ln879_2_fu_190_p2 = (!opCode_V_fu_170_p4.read().is_01() || !ap_const_lv16_100.is_01())? sc_lv<1>(): sc_lv<1>(opCode_V_fu_170_p4.read() == ap_const_lv16_100);
}

void arp_pkg_receiver::thread_icmp_ln879_3_fu_196_p2() {
    icmp_ln879_3_fu_196_p2 = (!protoAddrDst_V_fu_180_p4.read().is_01() || !myIpAddress_V_dout.read().is_01())? sc_lv<1>(): sc_lv<1>(protoAddrDst_V_fu_180_p4.read() == myIpAddress_V_dout.read());
}

void arp_pkg_receiver::thread_icmp_ln879_4_fu_208_p2() {
    icmp_ln879_4_fu_208_p2 = (!opCode_V_fu_170_p4.read().is_01() || !ap_const_lv16_200.is_01())? sc_lv<1>(): sc_lv<1>(opCode_V_fu_170_p4.read() == ap_const_lv16_200);
}

void arp_pkg_receiver::thread_icmp_ln879_fu_164_p2() {
    icmp_ln879_fu_164_p2 = (!wordCount_V.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(wordCount_V.read() == ap_const_lv4_0);
}

void arp_pkg_receiver::thread_myIpAddress_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        myIpAddress_V_blk_n = myIpAddress_V_empty_n.read();
    } else {
        myIpAddress_V_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_receiver::thread_myIpAddress_V_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        myIpAddress_V_out_blk_n = myIpAddress_V_out_full_n.read();
    } else {
        myIpAddress_V_out_blk_n = ap_const_logic_1;
    }
}

void arp_pkg_receiver::thread_myIpAddress_V_out_din() {
    myIpAddress_V_out_din = myIpAddress_V_dout.read();
}

void arp_pkg_receiver::thread_myIpAddress_V_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        myIpAddress_V_out_write = ap_const_logic_1;
    } else {
        myIpAddress_V_out_write = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_myIpAddress_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        myIpAddress_V_read = ap_const_logic_1;
    } else {
        myIpAddress_V_read = ap_const_logic_0;
    }
}

void arp_pkg_receiver::thread_opCode_V_fu_170_p4() {
    opCode_V_fu_170_p4 = arpDataIn_TDATA.read().range(175, 160);
}

void arp_pkg_receiver::thread_protoAddrDst_V_fu_180_p4() {
    protoAddrDst_V_fu_180_p4 = arpDataIn_TDATA.read().range(335, 304);
}

void arp_pkg_receiver::thread_select_ln80_fu_236_p3() {
    select_ln80_fu_236_p3 = (!arpDataIn_TLAST.read()[0].is_01())? sc_lv<4>(): ((arpDataIn_TLAST.read()[0].to_bool())? ap_const_lv4_0: add_ln700_fu_230_p2.read());
}

void arp_pkg_receiver::thread_tmp_nbreadreq_fu_102_p5() {
    tmp_nbreadreq_fu_102_p5 =  (sc_lv<1>) ((arpDataIn_TVALID.read()));
}

void arp_pkg_receiver::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

