// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _arp_pkg_receiver_HH_
#define _arp_pkg_receiver_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct arp_pkg_receiver : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > myIpAddress_V_dout;
    sc_in< sc_logic > myIpAddress_V_empty_n;
    sc_out< sc_logic > myIpAddress_V_read;
    sc_out< sc_lv<32> > myIpAddress_V_out_din;
    sc_in< sc_logic > myIpAddress_V_out_full_n;
    sc_out< sc_logic > myIpAddress_V_out_write;
    sc_in< sc_logic > arpDataIn_TVALID;
    sc_out< sc_lv<81> > arpTableInsertFifo_V_din;
    sc_in< sc_logic > arpTableInsertFifo_V_full_n;
    sc_out< sc_logic > arpTableInsertFifo_V_write;
    sc_out< sc_lv<192> > arpReplyFifo_V_din;
    sc_in< sc_logic > arpReplyFifo_V_full_n;
    sc_out< sc_logic > arpReplyFifo_V_write;
    sc_in< sc_lv<512> > arpDataIn_TDATA;
    sc_out< sc_logic > arpDataIn_TREADY;
    sc_in< sc_lv<64> > arpDataIn_TKEEP;
    sc_in< sc_lv<1> > arpDataIn_TLAST;


    // Module declarations
    arp_pkg_receiver(sc_module_name name);
    SC_HAS_PROCESS(arp_pkg_receiver);

    ~arp_pkg_receiver();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_102_p5;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< sc_lv<1> > tmp_reg_267;
    sc_signal< sc_lv<1> > icmp_ln879_reg_271;
    sc_signal< sc_lv<1> > and_ln74_reg_275;
    sc_signal< sc_lv<1> > and_ln76_reg_279;
    sc_signal< bool > ap_predicate_op40_write_state2;
    sc_signal< bool > ap_predicate_op44_write_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > wordCount_V;
    sc_signal< sc_logic > arpDataIn_TDATA_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > myIpAddress_V_blk_n;
    sc_signal< sc_logic > myIpAddress_V_out_blk_n;
    sc_signal< sc_logic > arpReplyFifo_V_blk_n;
    sc_signal< sc_logic > arpTableInsertFifo_V_blk_n;
    sc_signal< sc_lv<80> > reg_147;
    sc_signal< sc_lv<1> > icmp_ln879_fu_164_p2;
    sc_signal< sc_lv<1> > and_ln74_fu_202_p2;
    sc_signal< sc_lv<1> > and_ln76_fu_214_p2;
    sc_signal< sc_lv<112> > tmp_6_i_i_reg_283;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<4> > select_ln80_fu_236_p3;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<16> > opCode_V_fu_170_p4;
    sc_signal< sc_lv<32> > protoAddrDst_V_fu_180_p4;
    sc_signal< sc_lv<1> > icmp_ln879_2_fu_190_p2;
    sc_signal< sc_lv<1> > icmp_ln879_3_fu_196_p2;
    sc_signal< sc_lv<1> > icmp_ln879_4_fu_208_p2;
    sc_signal< sc_lv<4> > add_ln700_fu_230_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_B0;
    static const sc_lv<32> ap_const_lv32_FF;
    static const sc_lv<32> ap_const_lv32_A0;
    static const sc_lv<32> ap_const_lv32_AF;
    static const sc_lv<32> ap_const_lv32_130;
    static const sc_lv<32> ap_const_lv32_14F;
    static const sc_lv<16> ap_const_lv16_100;
    static const sc_lv<16> ap_const_lv16_200;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_9F;
    static const sc_lv<4> ap_const_lv4_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln700_fu_230_p2();
    void thread_and_ln74_fu_202_p2();
    void thread_and_ln76_fu_214_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op40_write_state2();
    void thread_ap_predicate_op44_write_state2();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_arpDataIn_TDATA_blk_n();
    void thread_arpDataIn_TREADY();
    void thread_arpReplyFifo_V_blk_n();
    void thread_arpReplyFifo_V_din();
    void thread_arpReplyFifo_V_write();
    void thread_arpTableInsertFifo_V_blk_n();
    void thread_arpTableInsertFifo_V_din();
    void thread_arpTableInsertFifo_V_write();
    void thread_icmp_ln879_2_fu_190_p2();
    void thread_icmp_ln879_3_fu_196_p2();
    void thread_icmp_ln879_4_fu_208_p2();
    void thread_icmp_ln879_fu_164_p2();
    void thread_myIpAddress_V_blk_n();
    void thread_myIpAddress_V_out_blk_n();
    void thread_myIpAddress_V_out_din();
    void thread_myIpAddress_V_out_write();
    void thread_myIpAddress_V_read();
    void thread_opCode_V_fu_170_p4();
    void thread_protoAddrDst_V_fu_180_p4();
    void thread_select_ln80_fu_236_p3();
    void thread_tmp_nbreadreq_fu_102_p5();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
