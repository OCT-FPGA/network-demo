// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arp_table (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        myIpAddress_V_dout,
        myIpAddress_V_empty_n,
        myIpAddress_V_read,
        gatewayIP_V_dout,
        gatewayIP_V_empty_n,
        gatewayIP_V_read,
        networkMask_V_dout,
        networkMask_V_empty_n,
        networkMask_V_read,
        macIpEncode_i_V_V_dout,
        macIpEncode_i_V_V_empty_n,
        macIpEncode_i_V_V_read,
        arpTableInsertFifo_V_dout,
        arpTableInsertFifo_V_empty_n,
        arpTableInsertFifo_V_read,
        macIpEncode_rsp_i_V_din,
        macIpEncode_rsp_i_V_full_n,
        macIpEncode_rsp_i_V_write,
        arpRequestFifo_V_V_din,
        arpRequestFifo_V_V_full_n,
        arpRequestFifo_V_V_write,
        arpTable_macAddress_V_address0,
        arpTable_macAddress_V_ce0,
        arpTable_macAddress_V_we0,
        arpTable_macAddress_V_d0,
        arpTable_macAddress_V_q0,
        arpTable_ipAddress_V_address0,
        arpTable_ipAddress_V_ce0,
        arpTable_ipAddress_V_we0,
        arpTable_ipAddress_V_d0,
        arpTable_valid_V_address0,
        arpTable_valid_V_ce0,
        arpTable_valid_V_we0,
        arpTable_valid_V_d0,
        arpTable_valid_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] myIpAddress_V_dout;
input   myIpAddress_V_empty_n;
output   myIpAddress_V_read;
input  [31:0] gatewayIP_V_dout;
input   gatewayIP_V_empty_n;
output   gatewayIP_V_read;
input  [31:0] networkMask_V_dout;
input   networkMask_V_empty_n;
output   networkMask_V_read;
input  [31:0] macIpEncode_i_V_V_dout;
input   macIpEncode_i_V_V_empty_n;
output   macIpEncode_i_V_V_read;
input  [80:0] arpTableInsertFifo_V_dout;
input   arpTableInsertFifo_V_empty_n;
output   arpTableInsertFifo_V_read;
output  [48:0] macIpEncode_rsp_i_V_din;
input   macIpEncode_rsp_i_V_full_n;
output   macIpEncode_rsp_i_V_write;
output  [31:0] arpRequestFifo_V_V_din;
input   arpRequestFifo_V_V_full_n;
output   arpRequestFifo_V_V_write;
output  [7:0] arpTable_macAddress_V_address0;
output   arpTable_macAddress_V_ce0;
output   arpTable_macAddress_V_we0;
output  [47:0] arpTable_macAddress_V_d0;
input  [47:0] arpTable_macAddress_V_q0;
output  [7:0] arpTable_ipAddress_V_address0;
output   arpTable_ipAddress_V_ce0;
output   arpTable_ipAddress_V_we0;
output  [31:0] arpTable_ipAddress_V_d0;
output  [7:0] arpTable_valid_V_address0;
output   arpTable_valid_V_ce0;
output   arpTable_valid_V_we0;
output  [0:0] arpTable_valid_V_d0;
input  [0:0] arpTable_valid_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg myIpAddress_V_read;
reg gatewayIP_V_read;
reg networkMask_V_read;
reg macIpEncode_i_V_V_read;
reg arpTableInsertFifo_V_read;
reg macIpEncode_rsp_i_V_write;
reg arpRequestFifo_V_V_write;
reg[7:0] arpTable_macAddress_V_address0;
reg arpTable_macAddress_V_ce0;
reg arpTable_macAddress_V_we0;
reg arpTable_ipAddress_V_ce0;
reg arpTable_ipAddress_V_we0;
reg[7:0] arpTable_valid_V_address0;
reg arpTable_valid_V_ce0;
reg arpTable_valid_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_100_p3;
wire   [0:0] tmp_3_nbreadreq_fu_108_p3;
reg    ap_predicate_op11_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_reg_298;
reg   [0:0] tmp_3_reg_302;
reg    ap_predicate_op37_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_reg_298_pp0_iter1_reg;
reg   [0:0] tmp_3_reg_302_pp0_iter1_reg;
reg   [0:0] tmp_hit_reg_331;
reg    ap_predicate_op53_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    myIpAddress_V_blk_n;
wire    ap_block_pp0_stage0;
reg    gatewayIP_V_blk_n;
reg    networkMask_V_blk_n;
reg    arpTableInsertFifo_V_blk_n;
reg    macIpEncode_i_V_V_blk_n;
reg    arpRequestFifo_V_V_blk_n;
reg    macIpEncode_rsp_i_V_blk_n;
reg   [31:0] tmp_V_reg_306;
reg   [31:0] tmp_V_reg_306_pp0_iter1_reg;
reg   [31:0] p_Val2_s_reg_321;
reg   [31:0] p_Val2_s_reg_321_pp0_iter1_reg;
wire   [63:0] zext_ln681_fu_283_p1;
reg   [63:0] zext_ln681_reg_326;
reg   [63:0] zext_ln681_reg_326_pp0_iter1_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln681_1_fu_243_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] xor_ln879_fu_197_p2;
wire   [31:0] and_ln879_fu_203_p2;
wire   [0:0] icmp_ln879_fu_209_p2;
wire   [7:0] tmp_4_fu_215_p4;
wire   [7:0] tmp_5_fu_225_p4;
wire   [7:0] select_ln232_fu_235_p3;
wire   [7:0] p_Result_i_i_fu_273_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0;
reg    ap_enable_operation_30;
reg    ap_enable_state1_pp0_iter0_stage0;
reg    ap_predicate_op20_load_state1;
reg    ap_enable_operation_20;
reg    ap_predicate_op33_load_state2;
reg    ap_enable_operation_33;
reg    ap_enable_state2_pp0_iter1_stage0;
reg    ap_enable_operation_32;
reg    ap_predicate_op22_load_state1;
reg    ap_enable_operation_22;
reg    ap_predicate_op34_load_state2;
reg    ap_enable_operation_34;
wire    ap_enable_pp0;
reg    ap_condition_150;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_100_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_321 <= {{arpTableInsertFifo_V_dout[79:48]}};
        zext_ln681_reg_326[7 : 0] <= zext_ln681_fu_283_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_s_reg_321_pp0_iter1_reg <= p_Val2_s_reg_321;
        tmp_3_reg_302_pp0_iter1_reg <= tmp_3_reg_302;
        tmp_V_reg_306_pp0_iter1_reg <= tmp_V_reg_306;
        tmp_reg_298 <= tmp_nbreadreq_fu_100_p3;
        tmp_reg_298_pp0_iter1_reg <= tmp_reg_298;
        zext_ln681_reg_326_pp0_iter1_reg[7 : 0] <= zext_ln681_reg_326[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_100_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_reg_302 <= tmp_3_nbreadreq_fu_108_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op11_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_reg_306 <= macIpEncode_i_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_302 == 1'd1) & (tmp_reg_298 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_hit_reg_331 <= arpTable_valid_V_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op53_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        arpRequestFifo_V_V_blk_n = arpRequestFifo_V_V_full_n;
    end else begin
        arpRequestFifo_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op53_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpRequestFifo_V_V_write = 1'b1;
    end else begin
        arpRequestFifo_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_100_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpTableInsertFifo_V_blk_n = arpTableInsertFifo_V_empty_n;
    end else begin
        arpTableInsertFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_100_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpTableInsertFifo_V_read = 1'b1;
    end else begin
        arpTableInsertFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpTable_ipAddress_V_ce0 = 1'b1;
    end else begin
        arpTable_ipAddress_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_298_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpTable_ipAddress_V_we0 = 1'b1;
    end else begin
        arpTable_ipAddress_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_150)) begin
        if ((tmp_nbreadreq_fu_100_p3 == 1'd1)) begin
            arpTable_macAddress_V_address0 = zext_ln681_fu_283_p1;
        end else if (((tmp_3_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd0))) begin
            arpTable_macAddress_V_address0 = zext_ln681_1_fu_243_p1;
        end else begin
            arpTable_macAddress_V_address0 = 'bx;
        end
    end else begin
        arpTable_macAddress_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_nbreadreq_fu_100_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_3_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        arpTable_macAddress_V_ce0 = 1'b1;
    end else begin
        arpTable_macAddress_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_100_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpTable_macAddress_V_we0 = 1'b1;
    end else begin
        arpTable_macAddress_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_150)) begin
        if ((tmp_nbreadreq_fu_100_p3 == 1'd1)) begin
            arpTable_valid_V_address0 = zext_ln681_fu_283_p1;
        end else if (((tmp_3_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd0))) begin
            arpTable_valid_V_address0 = zext_ln681_1_fu_243_p1;
        end else begin
            arpTable_valid_V_address0 = 'bx;
        end
    end else begin
        arpTable_valid_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_nbreadreq_fu_100_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_3_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        arpTable_valid_V_ce0 = 1'b1;
    end else begin
        arpTable_valid_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_100_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpTable_valid_V_we0 = 1'b1;
    end else begin
        arpTable_valid_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gatewayIP_V_blk_n = gatewayIP_V_empty_n;
    end else begin
        gatewayIP_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gatewayIP_V_read = 1'b1;
    end else begin
        gatewayIP_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op11_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        macIpEncode_i_V_V_blk_n = macIpEncode_i_V_V_empty_n;
    end else begin
        macIpEncode_i_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op11_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macIpEncode_i_V_V_read = 1'b1;
    end else begin
        macIpEncode_i_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        macIpEncode_rsp_i_V_blk_n = macIpEncode_rsp_i_V_full_n;
    end else begin
        macIpEncode_rsp_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        macIpEncode_rsp_i_V_write = 1'b1;
    end else begin
        macIpEncode_rsp_i_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        myIpAddress_V_blk_n = myIpAddress_V_empty_n;
    end else begin
        myIpAddress_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        myIpAddress_V_read = 1'b1;
    end else begin
        myIpAddress_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        networkMask_V_blk_n = networkMask_V_empty_n;
    end else begin
        networkMask_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        networkMask_V_read = 1'b1;
    end else begin
        networkMask_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln879_fu_203_p2 = (xor_ln879_fu_197_p2 & networkMask_V_dout);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((macIpEncode_rsp_i_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op37_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (networkMask_V_empty_n == 1'b0) | (gatewayIP_V_empty_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_100_p3 == 1'd1) & (arpTableInsertFifo_V_empty_n == 1'b0)) | ((macIpEncode_i_V_V_empty_n == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)))) | ((arpRequestFifo_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op53_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((macIpEncode_rsp_i_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op37_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (networkMask_V_empty_n == 1'b0) | (gatewayIP_V_empty_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_100_p3 == 1'd1) & (arpTableInsertFifo_V_empty_n == 1'b0)) | ((macIpEncode_i_V_V_empty_n == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)))) | ((arpRequestFifo_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op53_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((macIpEncode_rsp_i_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op37_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (networkMask_V_empty_n == 1'b0) | (gatewayIP_V_empty_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_100_p3 == 1'd1) & (arpTableInsertFifo_V_empty_n == 1'b0)) | ((macIpEncode_i_V_V_empty_n == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)))) | ((arpRequestFifo_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op53_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (networkMask_V_empty_n == 1'b0) | (gatewayIP_V_empty_n == 1'b0) | (myIpAddress_V_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_100_p3 == 1'd1) & (arpTableInsertFifo_V_empty_n == 1'b0)) | ((macIpEncode_i_V_V_empty_n == 1'b0) & (ap_predicate_op11_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((macIpEncode_rsp_i_V_full_n == 1'b0) & (ap_predicate_op37_write_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((arpRequestFifo_V_V_full_n == 1'b0) & (ap_predicate_op53_write_state3 == 1'b1));
end

always @ (*) begin
    ap_condition_150 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_enable_operation_20 = (ap_predicate_op20_load_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_22 = (ap_predicate_op22_load_state1 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_30 = (tmp_nbreadreq_fu_100_p3 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_32 = (tmp_nbreadreq_fu_100_p3 == 1'd1);
end

always @ (*) begin
    ap_enable_operation_33 = (ap_predicate_op33_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_34 = (ap_predicate_op34_load_state2 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state2_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_predicate_op11_read_state1 = ((tmp_3_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd0));
end

always @ (*) begin
    ap_predicate_op20_load_state1 = ((tmp_3_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd0));
end

always @ (*) begin
    ap_predicate_op22_load_state1 = ((tmp_3_nbreadreq_fu_108_p3 == 1'd1) & (tmp_nbreadreq_fu_100_p3 == 1'd0));
end

always @ (*) begin
    ap_predicate_op33_load_state2 = ((tmp_3_reg_302 == 1'd1) & (tmp_reg_298 == 1'd0));
end

always @ (*) begin
    ap_predicate_op34_load_state2 = ((tmp_3_reg_302 == 1'd1) & (tmp_reg_298 == 1'd0));
end

always @ (*) begin
    ap_predicate_op37_write_state2 = ((tmp_3_reg_302 == 1'd1) & (tmp_reg_298 == 1'd0));
end

always @ (*) begin
    ap_predicate_op53_write_state3 = ((tmp_3_reg_302_pp0_iter1_reg == 1'd1) & (tmp_hit_reg_331 == 1'd0) & (tmp_reg_298_pp0_iter1_reg == 1'd0));
end

assign arpRequestFifo_V_V_din = tmp_V_reg_306_pp0_iter1_reg;

assign arpTable_ipAddress_V_address0 = zext_ln681_reg_326_pp0_iter1_reg;

assign arpTable_ipAddress_V_d0 = p_Val2_s_reg_321_pp0_iter1_reg;

assign arpTable_macAddress_V_d0 = arpTableInsertFifo_V_dout[47:0];

assign arpTable_valid_V_d0 = arpTableInsertFifo_V_dout[32'd80];

assign icmp_ln879_fu_209_p2 = ((and_ln879_fu_203_p2 == 32'd0) ? 1'b1 : 1'b0);

assign macIpEncode_rsp_i_V_din = {{arpTable_valid_V_q0}, {arpTable_macAddress_V_q0}};

assign p_Result_i_i_fu_273_p4 = {{arpTableInsertFifo_V_dout[79:72]}};

assign select_ln232_fu_235_p3 = ((icmp_ln879_fu_209_p2[0:0] === 1'b1) ? tmp_4_fu_215_p4 : tmp_5_fu_225_p4);

assign tmp_3_nbreadreq_fu_108_p3 = macIpEncode_i_V_V_empty_n;

assign tmp_4_fu_215_p4 = {{macIpEncode_i_V_V_dout[31:24]}};

assign tmp_5_fu_225_p4 = {{gatewayIP_V_dout[31:24]}};

assign tmp_nbreadreq_fu_100_p3 = arpTableInsertFifo_V_empty_n;

assign xor_ln879_fu_197_p2 = (myIpAddress_V_dout ^ macIpEncode_i_V_V_dout);

assign zext_ln681_1_fu_243_p1 = select_ln232_fu_235_p3;

assign zext_ln681_fu_283_p1 = p_Result_i_i_fu_273_p4;

always @ (posedge ap_clk) begin
    zext_ln681_reg_326[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln681_reg_326_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //arp_table
